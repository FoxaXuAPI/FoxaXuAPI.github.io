Calcium_Text_Pack_File  New Format
//START EXTRACT
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/confedit.ca);
_$directmode;
_$nolog;

_var {COV_ARGS} = _getargs;

_cover <"{SYS_ROOT}/confedit.ca"> "{COV_ARGS}";

_cout "Invoke App failed. Use sysfix to repair this system";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/confedit.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/DeploySettings);
//Natvc Deploy Settings For System first startup

//Allow Not System user run this service
$AllowAdminUserDebug=false;

//Debug system
$DeployModernNatvcApps=true;

//For Insider Version System Unlock Administrator
$AutoUnlockAdminUser=false;

//Debug settings
$CreateUserOOBE=true;


//Modify config/SETUP oobe = 0
$ModifySetupOOBEtoZero=true;


//Enable Fast Boot when system complete deploy
$EnableFastBoot=true;

$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/DeploySettings);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/NativeConf);
//NativeShell Configuration
$StartPath={SYS_ROOT};
$SecondPath={SYS_ROOT};
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/NativeConf);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/SETUP);
//NATVC SETUP ADVANCED
$oobe=1;
$SystemDeploy={SYS_ROOT}/ntvdeploy.ca;
$callexec={SYS_ROOT}/oobe.ca;
$oobequick=0;

//Shutdown Record  0 - false    1 - true
$shutdown_record=1;
$SystemRE_Status=false;
$SystemRE_Dir={NoReEnv};
$FastBoot=0;

//SysRepairService
$DisableSysRepiar=false;

//Shutdown Status
$shutdown=0;
$last_startup=0;
$last_shutdown=0;

//Explorer
$explorer_title=User Explorer >;

//NTVANI
$offani=false;

//Command Manager
$whitelist=0;
$whitelist_file={NATVC_CONFIG}/vaild_command;

//Shutdown Execute
$shutdown_execute=noexec;
$shutdown_exe_title=Please Wait. Prepare Update;


//Startup Execute
$startup_execute=noexec;
$startup_exe_title=Prepare Update ;

//ALL DATA
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/SETUP);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/SOFTWARE);
//NATVC SOFTWARE PATH BIND
//NATVC SOFTWARE GET

//Software Register Link


//For Support Legacy app
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/SOFTWARE);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/SYSTEM);
//NATVC SYSTEM CONFIG
//Log Record

//WARNING:  THIS CONFIG FILE IS SYSTEM FILE
//changes may cause system fail to boot.

//LogFile
$NATVC_SYS_LOG=Natvc/LogFile; //This Record IS logfile path
$DebugNoGUIBoot=0; //set 1 to print boot message

//MAIN
//System boot will check bootloader file is credible
$BL_TrustCheck=false;    

$Edition=Personal;

//PATH BIND
$SYS_ROOT={Boot_OSPATH}/System;  //SYSTEM ROOT PATH
$SYS_NROOT={Boot_OSPATH};        //Natvc System Path
$PROG_PATH=Program;      //Natvc Program Path
$SYS_USERDIR=Users;      //Natvc User Path Bind


//System Messagex
$SYS_NAME=Natvc;
$SYS_KERNEL_VID=6107;
$SYS_REG_NAME=15.1;
$SYS_KERNEL_CODENAME=Liquid;
$SYS_RELEASE_Channel=2025.08.15.Release.GAC_Channel:Hotfix.Repack_v2;

//System Index Kernel File
$NATVC_USERSVC=usersvc.ca;
$NATVC_USERMENU=usermenu.ca;
$NATVC_ROOTSHELL=rootshell.ca;
$NATVC_EXPLORER=ntvexp.ca;

//System Secure Settings
$NATVC_BOOT_DLOAD=1;
$NATVC_SHUTDOWN_SECURE=0;  //Set 1 Enabled . 0 Disabled.
$NATVC_CRASH_EXECUTE=$reboot;  //Set $shutdown or $reboot . 

//Resource File
$NATVC_ABOUTS_TEXT={SYS_NROOT}/res/natvc-abouts.txt;
$NATVC_CRASH_TEXT=Natvc/res/natvc-crash.txt;

//End
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/SYSTEM);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/UPDATE);
//NATVC UPDATE SERVICE PROXY
//SERVER and SETUP CONFIG

$NUSP_GET=http://fdl-cds.dev.foxaxu.com/natvc_fdl/{SYS_KERNEL_CODENAME}/nusp_package.cstp;

//That`s all
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/UPDATE);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/USERS);
//PUBLIC USER DATA
//USERPATH DIR
$default=@;

//WARNING:  THIS CONFIG FILE IS SYSTEM FILE
//changes may cause system fail to boot.

//UserData
//SYSTEM is Kernel User. Do Not Set this user
$SYSTEM=Natvc/SystemUser;


//admin is default system admin user
$admin=Users/admin;

//Add User
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/USERS);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/config/vaild_command);
//CONFIG USER ALLOW EXECUTE
$help=true;
$.exit=true;
$exit=true;
$reload=true;
$logoff=true;
$hiber=true;
$shutdown=true;
$@shutdown=true;
$restart=true;
$lock=true;
$.shell=true;
$ls=true;
$clear=true;
$path=true;
$return=true;
$about=true;
$aboutsys=true;
$whoami=true;
$menu=true;
$software=true;
$ok=true;
$update=true;
$explorer=true;
$explorer.ca=true;
$rootshell=true;
$rootshell.ca=true;
$args=true;
$run=true;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/config/vaild_command);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/explorer.ca);
_$directmode;
_$nolog;

_var {COV_ARGS} = _getargs;

_cover <"{SYS_ROOT}/explorer.ca"> "{COV_ARGS}";

_cout "Invoke App failed. Use sysfix to repair this system";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/explorer.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/about.txt);
Modern Natvc Application
Modern App Core
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/about.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/checkexist.ca);
_$directmode;
_$nolog;

_var {LoadApp} = _getargs;

_var {AppDir} = "{SYS_NROOT}/NatvcApps/{LoadApp}";


_if(_dir_exist "{AppDir}")|_return "true";

_if(!_dir_exist "{AppDir}")|_var {AppDir} = "{PROG_PATH}/{LoadApp}";

_if(_dir_exist "{AppDir}")|_return "true";

_if(!_dir_exist "{AppDir}")|_goto :NoThisApps;


:NoThisApps;
_return "false";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/checkexist.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/install.ca);
_$directmode;
_$nolog;

//mna app installer tool
//Install Main Service
_file_open "{SYS_LOG}";
_file_write "[Mna_Service] Install Request...";

_var {Req_install_dev} = _getargs;

_file_write "[Mna_Service] Parameter {Req_install_dev}";


_if(!_file_exist "{Req_install_dev}")|_goto :FailReqApp;

//start setup application
//Config Program Dir

_if(_cp("0","{NATVC_isAdmin}"))|_goto :NoAuthPkgInstaller;


//Start app
//MKDIR
_$no_cstp_output;
_file_uncstp ("{Req_install_dev}","{temp}/mnaAppTemp");

//Decode package
_sipcfg.open "{temp}/mnaAppTemp/pkgdata.mna";
_var {pkgSetupName} = _sipcfg Setup;
_var {pkgAppName} = _sipcfg AppName;
_var {pkgAppProperties} = _sipcfg AppProperties;

_free {mna_pdir};

_if(_cp ("systemapps","{pkgAppProperties}") ) |_var {mna_pdir} = "{SYS_NROOT}/NatvcApps";
_if(_cp ("userapps","{pkgAppProperties}")   )   |_var {mna_pdir} = "{PROG_PATH}";

//_file_uncstp ("{Req_install_dev}","{mna_pdir}/{pkgSetupName}");
_var {XCOPY_A} = "{temp}/mnaAppTemp";
_var {XCOPY_B} = "{mna_pdir}/{pkgSetupName}";
_script <"{SYS_ROOT}/xcopy.ca">;
_free {XCOPY_A};
_free {XCOPY_B};

//_cout "Save Succeed :  {mna_pdir}/{pkgSetupName}";

_dir_remove "{temp}/mnaAppTemp";

_file_open "{SYS_LOG}";
_file_write "[Mna_Service] App Setup Succeed :  {pkgAppName}   Tag ;  {pkgAppProperties}   Path :  {mna_pdir}";
_file_write "[Mna_Service] Install Operate User :  {NATVC_WHOIS},  User Auth :  {NATVC_isAdmin},";
_cout "App Setup Succeed :  {pkgAppName}   Tag ;  {pkgAppProperties}   Path :  {mna_pdir}";
//_cout "Log File :   {SYS_LOG}";
_$open_cstp_output;
_return "ok";


:FailReqApp;
_cout " mna install serivces";
_cout " invaild package :  {Req_install_dev}";
_cout " Check your type or repiar this file";
_return "failinst";

:NoAuthPkgInstaller;
_cout " mna install serivces";
_cout " Current User is not allowed to install this app";
_cout " Use your administrator user try again";
_return "failinst";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/install.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/mnaload.ca);
_$directmode;
_$nolog;

_var {LoadApp} = _getargs;

_var {AppDir} = "{SYS_NROOT}/NatvcApps/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_var {AppDir} = "{PROG_PATH}/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_goto :UseMethod;

_file_write "[Mna_service] Appload on {AppDir}";

_if(!_file_exist "{AppDir}/apploader.ca")|_goto :BreakPackage;

_file_write "[Mna_service] Execute Program :   {AppDir}/apploader.ca";

_var {mna_loader_callback} = _script <"{AppDir}/apploader.ca">;

_return "{mna_loader_callback}";



:UseMethod;
_cout "mna service load fail";
_cout "Request App Launch Null :  {LoadApp}";
_cout "method :   mnaload.ca     Args = App";
_cout "Press any key to exit";
_pause;
_return "failLdr";

:BreakPackage;
_cout "mna service load fail";
_cout "Request App Launch Null :  {AppDir}";
_cout "This app package might be break. try to reinstall this application";
_cout "Press any key to exit";
_pause;
_return "failLdr";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/mnaload.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/pkgSaved.ca);
_$directmode;
_$nolog;

//mna app out toolkit
// for debug tool

:startuninst;
_var {LoadApp} = _getargs;

_var {AppDir} = "{SYS_NROOT}/NatvcApps/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_var {AppDir} = "{PROG_PATH}/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_goto :UseMethod;

_cout "Type Save Path";
_prt "savefile >";
_var {SavedFile} = _getline;

_cout "";
_cout "Please wait ... ";
_file_cstp ("{AppDir}","{SavedFile}");
_cout "App Out File Succeed :  {LoadApp}";
_cout "On File :  {SavedFile}";
_return "ok";

:UseMethod;
_cout "mna service load fail";
_cout "Request Out package App fail :  {LoadApp}";
_cout "method :   pkgSaved.ca     Args = App";
_cout "Press any key to exit";
_pause;
_return "failLdr";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/pkgSaved.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/quickload.ca);
_$directmode;
_$nolog;

_var {LoadApp} = _getargs;

_var {AppDir} = "{SYS_NROOT}/NatvcApps/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_var {AppDir} = "{PROG_PATH}/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_goto :UseMethod;

_file_write "[Mna_service] Appload on {AppDir}";

_if(!_file_exist "{AppDir}/apploader.ca")|_goto :BreakPackage;

_file_write "[Mna_service] Execute Program :   {AppDir}/apploader.ca";

_var {mna_loader_callback} = _script <"{AppDir}/apploader.ca">;

_return "{mna_loader_callback}";



:UseMethod;
_return "noapp";

:BreakPackage;
_cout "mna service load fail";
_cout "Request App Launch Null :  {AppDir}";
_cout "This app package might be break. try to reinstall this application";
_cout "Press any key to exit";
_pause;
_return "failLdr";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/quickload.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/mnacore/uninstall.ca);
_$directmode;
_$nolog;

//mna app uninstaller tool
//Uninstall Main Service
_file_open "{SYS_LOG}";
_file_write "[Mna_Service] Uninstall Request...";

//start setup application
//Config Program Dir



_free {mna_pdir};
_if(_cp("2","{NATVC_isAdmin}"))|_goto :startuninst;
_if(_cp("1","{NATVC_isAdmin}"))|_goto :startuninst;
_cout "This user is not allowed to uninstall any app";
_return "noauth";


//Start app
//MKDIR
:startuninst;
_var {LoadApp} = _getargs;

_file_open "{SYS_LOG}";
_file_write "[Mna_Service] Parameter {LoadApp}";

_var {AppDir} = "{SYS_NROOT}/NatvcApps/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_var {AppDir} = "{PROG_PATH}/{LoadApp}";

_if(!_dir_exist "{AppDir}")|_goto :UseMethod;

_dir_remove "{AppDir}";

_file_open "{SYS_LOG}";
_file_write "[Mna_Service] App Uninstall Succeed :  {LoadApp}";
_file_write "[Mna_Service] Uninstall Operate User :  {NATVC_WHOIS},  User Auth :  {NATVC_isAdmin},";
_cout "App Uninstall Succeed :  {LoadApp}";
//_cout "Log File :   {SYS_LOG}";
_return "ok";

:UseMethod;
_cout "mna service load fail";
_cout "Request Uninstall App Not Found :  {LoadApp}";
_cout "method :   uninstall.ca     Args = App";
_cout "Press any key to exit";
_return "failLdr";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/mnacore/uninstall.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/NatvcApps/$NATVC_APPS_ROOT.txt);
NATVC APPS ROOT
MANAGE
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/NatvcApps/$NATVC_APPS_ROOT.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/bootmgr.nbf);
_$directmode;
_$nolog;

//New Boot Format
//NBF Boot Manager

_var {BootLogFiles} = "{BootVolume}/BootLogFiles.log";

_if(_file_exist "{BootLogFiles}.old")|_file_del "{BootLogFiles}.old";

_if(_file_exist "{BootLogFiles}")|_file_rename ("{BootLogFiles}","{BootLogFiles}.old");

_file_open "{BootLogFiles}";

_file_write "@NBF System loader log file.   Time  %fulltime% ";

_file_write "[%time%][Boot] Boot Start";

_if(_cp("{NBFMenu}","true"))| _goto :BootSelect;

//Load Default Option
_file_write "[%time%][Boot] Load Default OS Loader";
_sipcfg.open "{BootVolume}/$BVM_VOL_LOAD";
_var {BootDefaultOption} = _sipcfg DefaultOption;
_var {BootSetDefault} = "{BootDefaultOption}";

_file_write "[%time%][Boot] Default BCD File:  {BootDefaultOption}";

:StartLoadingBootNBF

//LoadBCD
_file_write "[%time%][Boot] Checking Boot loader";
_if(!_file_exist "{BootVolume}/nbf/{BootDefaultOption}") | _goto :NoDefaultLoader;
_sipcfg.open "{BootVolume}/nbf/{BootDefaultOption}";

_file_write "[%time%][Boot] Read BCD Files ...";

_var {osvolume} = _sipcfg osvol;
_var {Boot_OSPATH} = _sipcfg ospath;
_var {NATVC_SYSLDR} = _sipcfg osload;
_var {BootSign} = _sipcfg bootsign;

_file_write "[%time%][Boot] OS Volume :  {osvolume}";
_file_write "[%time%][Boot] OS PATH :  {Boot_OSPATH}";
_file_write "[%time%][Boot] OS System loader :  {NATVC_SYSLDR}";
_file_write "[%time%][Boot] OS Sign :  {BootSign}";

//Config All Disks
_file_write "[%time%][Boot] Configuration Disk Device";

//Boot System
_var {NATVC_DISK} = "{osvolume}";

//Edit {boot_rsmode} to Manager System Boot

_file_write "[%time%][Boot] Configuration Boot loader";
//Core
_var {NATVC_BOOTLOAD} = "{NATVC_DISK}/{NATVC_SYSLDR}";

_file_write "[%time%][Boot] Check Boot loader";
_if(!_file_exist "{NATVC_BOOTLOAD}")| _goto :NATVC_MS_SL;

_file_write "[%time%][Boot] Check Boot Sign";
//Verify Boot loader is VALID
_sipcfg.open "{NATVC_BOOTLOAD}";
_var {LoadSign} = _sipcfg signload;
_if(!_cp("{BootSign}","{LoadSign}"))|_goto :SignInvalid;

_file_write "[%time%][Boot] Startup System";

_var {RE_ENV} = "false";
_var {OS_CALLBACK} = _script <"{NATVC_BOOTLOAD}"> "sysload";

_file_open "{BootLogFiles}";
_file_write "[%time%][Boot] System Callback :  {OS_CALLBACK}";
_if(_cp("{OS_CALLBACK}","$reboot"))|_return "$reboot";
_if(_cp("{OS_CALLBACK}","$shutdown"))|_return "$shutdown";
_file_write "[%time%][Boot][Error] Exception CALLBACK";
_goto :NATVC_MS_FL;

_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";

//ERRPAGE
:NATVC_MS_SL;
_file_write "[%time%][Boot][Error] Device Error :   Boot loader is missing";
_var {NBF_FILE} = "{NATVC_BOOTLOAD}";
_clear;
_typefile "{BootVolume}/res/filelost.txt";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";


:NATVC_MS_FL;
_file_write "[%time%][Boot][Error] Boot Fail :  OS CALLBACK =  {NBF_ErrorCode}";
_var {NBF_ErrorCode} = "{OS_CALLBACK}";
_clear;
_typefile "{BootVolume}/res/bootfail.txt";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";


//Boot Select Mode
:BootSelect;
_file_write "[%time%][Boot] Boot Menu";
_var {NBFMenu} = "false";
_clear;
_typefile "{BootVolume}/res/nbfshell.txt";
_prt "Select Boot load or type .exit shutdown $> ";
_var {BootDefaultOption} = _getline;

_if(_cp("{BootDefaultOption}",".exit"))|_return "$shutdown";
_if(_cp("{BootDefaultOption}",".list"))|_goto :ListBootLDR;
_if(!_file_exist "{BootVolume}/nbf/{BootDefaultOption}")|_goto :BootSelect;

_goto :StartLoadingBootNBF;



:NoDefaultLoader;
_file_write "[%time%][Boot] System No Default Loader";
_cout "No Default System Loader";
_sleep 2;
_goto :BootSelect;

:ListBootLDR;
_file_write "[%time%][Boot] List all boot loader";
_clear;
_cout "All Boot loader";
_cout "------------------------------------";
_dir_list ("script/tempnbf","{BootVolume}/nbf");

_file_replace "script/tempnbf" ("{BootVolume}/nbf/","");    

_textprint "script/tempnbf";
_cout "------------------------------------";
_cout "Default :  ({BootSetDefault})";
_cout "------------------------------------";
_file_del "script/tempnbf";
_pause;
_goto :BootSelect;




:SignInvalid;
_file_write "[%time%][Boot] Bootloader sign is invalid :  not trusted device";
_var {NBF_ErrorCode} = "Invalid Boot Loader :  {NATVC_BOOTLOAD}";
_clear;
_typefile "{BootVolume}/res/bootfail.txt";
//_cout "{LoadSign}";
//_cout "{BootSign}";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/bootmgr.nbf);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/NBF-Temple);
//Boot Config Data
//NBF File Loader
$osvol=;
$ospath=;
$osload=;
$bootsign=;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/NBF-Temple);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/nbfload);
//Volume Loader
$DefaultLoader={BootVolume}/bootmgr.nbf;
$DefaultOption=null;
$RollBackLoad=;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/nbfload);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/RE/bootdat);
//NATVC RE OSLOADER
$tempdisk=tempreos;
$ospack=;

//REBOOT
$ospath=;
$osload=;
$bootsign=;

$REAutoExec=;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/RE/bootdat);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/RE/re.nbf);
_$directmode;
_$nolog;
_$no_err_report;

//Natvc RE System Loader
//Anti rootshell load

//SignLoad
//$signload=ntvre_osloader_sign;

_clear;

_sipcfg.open "nul";
_if(_cp("{BootMethod}","nbfload"))|_sipcfg.open "{BootVolume}/nbfload";
_if(_cp("{BootMethod}","boot"))|_sipcfg.open "{BootVolume}/boot";

_var {TempLoadRE} = _sipcfg RollBackLoad;
_if(!_cp(_sipcfg DefaultOption,"recovery"))|_goto :SkipRollBackRE;
_sipcfg DefaultOption = "{TempLoadRE}";
_sipcfg RollBackLoad = "";

:SkipRollBackRE;


//Load main
//GET REDATA
_if(!_file_exist "{NATVC_DISK}/{Boot_OSPATH}/bootdat")|_goto :loadfail_nodat;

_sipcfg.open "{NATVC_DISK}/{Boot_OSPATH}/bootdat";
_var {tempdisk} = _sipcfg tempdisk;
_var {tempdisk} = "script/{tempdisk}";
_var {ospack} = _sipcfg ospack;
_var {REAutoExec} = _sipcfg REAutoExec;

_var {ospack} = "{NATVC_DISK}/{Boot_OSPATH}/{ospack}";

_if(!_file_exist "{ospack}")|_goto :loadfail_nocstp;

_var {OriginDisk} = "{NATVC_DISK}";
_var {NATVC_DISK} = "{tempdisk}";
_var {Boot_OSPATH} = _sipcfg ospath;
_var {NATVC_SYSLDR} = _sipcfg osload;
_var {BootSign} = _sipcfg bootsign;

_clear;
_cout "";
_cout "";
_cout "";
_cout "";
_cout "    {BootUIA}";
_cout "    {BootUIB}";
_cout "    {BootUIC}";
_cout "";
_cout "";
_cout "";
_cout "  Please wait.  Natvc is loading files";
_cout "";

//Extract to TempDisk
_if(_dir_exist "{tempdisk}")|_dir_remove "{tempdisk}";

_file_uncstp("{ospack}","{tempdisk}");

//Boot System
_var {osvolume} = "{tempdisk}";
_var {NATVC_DISK} = "{osvolume}";
//Core
_var {NATVC_BOOTLOAD} = "{NATVC_DISK}/{NATVC_SYSLDR}";
_if(!_file_exist "{NATVC_BOOTLOAD}")| _goto :NATVC_MS_SL;
_var {RE_ENV} = "true";
_clear;
_var {OS_CALLBACK} = _script <"{NATVC_BOOTLOAD}"> "sysload";

_dir_remove "{tempdisk}";

_free {OriginDisk};
_free {NATVC_DISK};
_free {Boot_OSPATH};
_free {NATVC_SYSLDR};
_free {BootSign};
_free {SYS_NROOT};
_free {SYS_ROOT};
_free {REAutoExec};
_free {BL_Verify_F};

_if(_cp("{OS_CALLBACK}","$reboot"))|_return "$reboot";
_if(_cp("{OS_CALLBACK}","$shutdown"))|_return "$shutdown";
_goto :NATVC_MS_FL;



//ERRPAGE
:loadfail_nodat;
_clear;
_cout "Natvc Recovery Load fail";
_cout "file :  {NATVC_DISK}/{Boot_OSPATH}/bootdat   is missing";
_cout "Boot data is missing, system cannot startup";
_pause;
_return "$reboot";

:loadfail_nocstp;
_clear;
_cout "Natvc Recovery Load fail";
_cout "file :  {ospack}   is missing";
_cout "Boot data is missing, system cannot startup";
_pause;
_return "$reboot";



:NATVC_MS_SL;
_var {NBF_FILE} = "{NATVC_BOOTLOAD}";
_clear;
_typefile "{BootVolume}/res/filelost.txt";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";

:NATVC_MS_FL;
_var {NBF_ErrorCode} = "{OS_CALLBACK}";
_clear;
_typefile "{BootVolume}/res/bootfail.txt";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/RE/re.nbf);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/res/bootfail.txt);
=======================================================
                 🧩 NATVC BOOT RECOVERY
=======================================================

❗ CRITICAL SYSTEM ERROR DETECTED

🔧 Error Code: {NBF_ErrorCode}  
📄 Description: Bootloader verification failed

-------------------------------------------------------

🛠️ Recovery Instructions:

  [1] Insert your system recovery media  
  [2] Select 'Repair startup files' option  
  [3] Run boot sector repair tool

-------------------------------------------------------

📌 Without recovery media:  
Please contact your device manufacturer support

   • OEM: {MAF_OEM}

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/res/bootfail.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/res/filelost.txt);
=======================================================
                 🧩 NATVC BOOT RECOVERY
=======================================================

❗ Missing Critical File Detected

📄 File: {NBF_FILE}  
📌 Status: Required for system startup

-------------------------------------------------------

🛠️ Recovery Instructions:

  [1] Insert your setup media  
  [2] Choose "Repair system files"  
  [3] Restore or replace the missing file

-------------------------------------------------------

📌 No recovery media available?

Please contact your device manufacturer support:  
   • OEM: {MAF_OEM}

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/res/filelost.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/nbf/res/nbfshell.txt);
=======================================================
               🖥️ Natvc BOOTMGR Shell
=======================================================

📂 Location: BootVolume/nbf/*.nbf  
⚠️ Legacy boot files are not supported

🔧 Default Boot Loader: {BootSetDefault}

-------------------------------------------------------

🛠️ Available Commands:

  • .list     — Show available boot loaders  
  • .exit     — Shutdown system  

-------------------------------------------------------

💡 Tip: Use `.list` to view all available loaders  
🔐 Secure boot is enforced under Liquid Core

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/nbf/res/nbfshell.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/ntsh.ca);
_$directmode;
_$nolog;

_var {COV_ARGS} = _getargs;

_cover <"{SYS_ROOT}/nativeshell.ca"> "{COV_ARGS}";

_cout "Invoke App failed. Use sysfix to repair this system";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/ntsh.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Personal.txt);
NATVC PERSONAL LICENSE

1. Grant of License
FoxaXu Dev Lab grants User a non-exclusive, non-transferable license to use the Natvc operating system ("Software") in its original, unmodified form solely for personal or internal business purposes.

2. Restrictions
User shall not:

Modify, adapt, or create derivative works of the Software

Reverse engineer, decompile, or disassemble the Software

Redistribute, sublicense, or publish modified versions of the Software

Remove or alter copyright notices or proprietary markings

3. Ownership
FoxaXu Dev Lab retains all intellectual property rights. This license grants no title or ownership.

4. Termination
This agreement terminates automatically if User violates any terms. Upon termination, User must destroy all copies of the Software.

5. Disclaimer
THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY. FOXXAXU DEV LAB SHALL NOT BE LIABLE FOR ANY DAMAGES ARISING FROM ITS USE.

6. Governing Law
This agreement shall be governed by the laws of [Your Jurisdiction].

By using Natvc, User acknowledges acceptance of these terms.
© 2025 FoxaXu Dev Lab. All rights reserved.
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Personal.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-abouts.txt);
=======================================================
                  About {ToolsName}
=======================================================

      FDL. {SYS_NAME} {SYSNAME}

      System Version: {SYS_RELEASE_Channel}
      [Inside Version: {SYSNAME}.{SYS_KERNEL_VID}]

      (c) FoxaXu Dev Lab. All rights reserved.

      According to the End User License Agreement (EULA),
      this product is licensed to:
          {NATVC_USERNAME} ({NATVC_WHOIS})

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-abouts.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-bootui.txt);




        {BootUIA}
        {BootUIB}
        {BootUIC}



$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-bootui.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-bootupdate.txt);




        {BootUIA}
        {BootUIB}
        {BootUIC}



     {update_title}
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-bootupdate.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-cpw.txt);
=======================================================
                 Natvc Recovery
=======================================================

   Your Device not support this NATVC Version

     Your Platform CLFMV :   {CalciumL_FMV}
     Requirement CLFMV   :   {NATVC_FMV_REQ} or Later

-------------------------------------------------------

   type 1 to start Natvc  
   type 2 to shutdown (Default)

                 System Recovery
=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-cpw.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-crash.txt);
=======================================================
      System Error - Immediate Restart Required
=======================================================

   Your device ran into a problem and needs to restart now.

-------------------------------------------------------

     Stop Code: {NATVC_CRASH_CODE}
     Details   : ({BUG_REPORT})

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-crash.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-eula.txt);
foxaxu_dev_lab Software End User License Agreement (EULA)
Effective Date: May 11, 2025
Copyright 2025 foxaxu_dev_lab

This End User License Agreement ("EULA") is a legal agreement between you (either an individual or a single entity) and foxaxu_dev_lab for the software product identified above ("Software"). By installing, copying, or otherwise using the Software, you agree to be bound by the terms of this agreement.

1. License Grant
1.1 foxaxu_dev_lab grants you a limited, non-exclusive, non-transferable, revocable license to use the Software for your personal or internal business purposes.

1.2 You may not:

Copy, modify, or create derivative works of the Software

Distribute, sublicense, lease, rent, or sell the Software

Reverse engineer, decompile, or disassemble the Software

Remove any proprietary notices or labels

2. Open Source Components
2.1 If the Software contains open-source components, such components are governed by their respective open-source licenses.

2.2 Your use of open-source components must comply with all applicable open-source license terms.

3. Community Contributions
3.1 foxaxu_dev_lab welcomes contributions to its open-source projects ("Projects") from community members.

3.2 Contributions to Projects are subject to separate contribution agreements.

3.3 foxaxu_dev_lab makes no commitment to provide ongoing maintenance or support for any Project.

4. Distribution Restrictions
4.1 You may not redistribute the Software or its installation media to third parties without express written permission.

4.2 Pre-release or beta versions ("Beta Software") are provided for testing purposes only and should not be used in production environments.

5. Disclaimer of Warranties
5.1 THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.

5.2 foxaxu_dev_lab does not warrant that the Software will meet your requirements or that its operation will be uninterrupted or error-free.

6. Limitation of Liability
6.1 TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL foxaxu_dev_lab BE LIABLE FOR ANY SPECIAL, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF OR INABILITY TO USE THE SOFTWARE.

7. Termination
7.1 This EULA is effective until terminated. Your rights under this license will terminate automatically without notice if you fail to comply with any term(s).

7.2 Upon termination, you must cease all use of the Software and destroy all copies in your possession.

8. General Provisions
8.1 This EULA constitutes the entire agreement between you and foxaxu_dev_lab regarding the Software.

8.2 If any provision of this EULA is held to be unenforceable, the remaining provisions will remain in full force and effect.

8.3 For more information about this EULA or the Software, please visit: [https://devlab.foxaxu.com/sources/natvc/eula.txt]

9. Acceptance
BY INSTALLING OR USING THE SOFTWARE, YOU ACKNOWLEDGE THAT YOU HAVE READ THIS AGREEMENT, UNDERSTAND IT, AND AGREE TO BE BOUND BY ITS TERMS AND CONDITIONS. IF YOU DO NOT AGREE TO THESE TERMS, DO NOT INSTALL OR USE THE SOFTWARE.
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-eula.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-explorer-help.txt);
=======================================================
               System Manager Commands
=======================================================

Command      : Description
-------------------------------------------------------
shutdown     : Close the system
restart      : Restart the system
logoff       : Log out current account
lock         : Lock current account
hiber        : Enter Hibernation Mode
.re          : Restart to Recovery Mode
.adv         : Restart to advanced boot options

=======================================================
                        Tools
=======================================================

Command      : Description
-------------------------------------------------------
linkmgr      : Open link manager
help         : Display help information
reload       : Reload explorer
menu         : Open user menu

=======================================================
Website: https://www.foxaxu.com/fwlink?linkid=ntvsys
=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-explorer-help.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-explorer.txt);
=======================================================
              👋 Welcome to Natvc System
=======================================================

   Hello, {NATVC_USERNAME}  
   We're glad to have you back.

-------------------------------------------------------

   📅 Date: {ntvue.logondate}  
   🕒 Time: {ntvue.logontime}

-------------------------------------------------------

   System Notices:                🔔 
   {NTVEXP_AD_4}  
   {NTVEXP_AD_5}

=======================================================
   Additional Information:        📢
   {NTVEXP_AD_1}  
   {NTVEXP_AD_2}  
   {NTVEXP_AD_3}
=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-explorer.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-fail-repair.txt);
=======================================================
                 🔧 Natvc Recovery Utility
=======================================================

⚠️ Automatic repair couldn't repair your PC  
🛠️ SystemImage is corrupted

-------------------------------------------------------
   Affected File:
   {SYSFIX_DIR}/{ReadCache}
-------------------------------------------------------

💡 Options:
   • Press Enter to run the System Fix Tool  
   • Or choose to Shutdown or Reinstall the System

=======================================================
                   🧩 System Recovery
=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-fail-repair.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-fail-startup.txt);
=======================================================
         ⚙️ Advanced Boot Options Menu
=======================================================

🖥️ System Boot Menu: {SystemStartupNotification}

🔽 Please select an option:

   [1] 🚀 Start up Normal (Default)  
   [s] 🛠️ Run System Repair  
   [2] 🔐 Load Safe Mode (Root Shell)  
   [3] 🔄 Restart & Select Boot Device  
   [4] ⏻ Shutdown  
   [5] 🧩 Load Recovery

💡 Type a number/key and press [ENTER] to select

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-fail-startup.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-loggin.txt);
=======================================================
                  🎉 Welcome to Natvc
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

👤 {USER_REQ_LOGON}

-------------------------------------------------------

✨ System Ready — Enjoy your session!

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-loggin.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-logoff.txt);
=======================================================
                  👋 Goodbye from Natvc
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

👤 {USER_REQ_LOGON}

-------------------------------------------------------

⏻ Logoff in progress — See you next time!

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-logoff.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-notype.txt);
=======================================================
                 🔐 Natvc Logon Interface
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

⚠️ You need to type a valid user ID to login

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-notype.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-nouser.txt);
=======================================================
                 ❌ Natvc Logon Interface
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

⚠️ This user is not exist  
🔐 Please check your ID and try again

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-nouser.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-req-passwd.txt);
=======================================================
                 🔐 Natvc Logon Interface
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

👤 {NATVC_WHOIS}  
🔑 Type your password to continue

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-req-passwd.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-req-wrong-passwd.txt);
=======================================================
                 🔐 Natvc Logon Interface
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

👤 {NATVC_WHOIS}  
❌ Password Wrong...

🔁 Please try again or login another user

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-req-wrong-passwd.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-restart.txt);
=======================================================
                 🔄 System Restarting...
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

⏳ Please wait while the system restarts...

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-restart.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-shutdown.txt);
=======================================================
                 ⏻ Natvc System Shutdown
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

🛑 Shutting Down ...

💤 Please wait while the system powers off

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-shutdown.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-updater.txt);
=======================================================
                 🔄 System Update Notification
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

📝 Update Title: {update_title}

⚙️ Preparing system update... Please wait

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-updater.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-userban.txt);
=======================================================
                 🔐 Natvc Logon Interface
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

👤 {NATVC_WHOIS}  
🚫 This user can't log in  
🔒 Reason: The account is currently disabled

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-userban.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue-wait.txt);
=======================================================
                 ⏳ Natvc System Status
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

⌛ Please wait ...

🔄 System is processing your request

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue-wait.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-ntvue.txt);
=======================================================
                 🔐 Natvc Logon Interface
=======================================================

📢 {NTVUE_AD_1}  
📢 {NTVUE_AD_2}  
📢 {NTVUE_AD_3}

-------------------------------------------------------

🕒 {ntvue.logontime}  
📅 {ntvue.logondate}

-------------------------------------------------------

💡 Please log in with your user credentials  
🔘 Or choose to shut down your device

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-ntvue.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-oobe-end.txt);
=======================================================
                  ✅ Setup Complete!
=======================================================

🎉 All system configurations have been finalized  
🖥️ Your device is now ready for use

-------------------------------------------------------

🙏 Thank you for choosing NATVC  
✨ We hope you enjoy the experience ahead

-------------------------------------------------------

📌 Next Step:  
Press [ENTER] to finish OOBE  
and begin using your system

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-oobe-end.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-oobe-start.txt);
=======================================================
                    ⏳ Please Wait...
=======================================================

📢 We are very happy to show you our work.  
✨ Preparing your experience with care and precision

-------------------------------------------------------

🔧 System is initializing...  
🖥️ Loading modules and resources...

🚀 This won't take long — thank you for your patience!

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-oobe-start.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-oobe-user.txt);
=======================================================
               👤 USER ACCOUNT SETUP
=======================================================

🛠️ Let's create your administrator account

This will be your primary login for the system,  
with full administrative rights and access privileges.

-------------------------------------------------------

🔐 Account Type: Administrator  
✅ Permissions: System Control  
📌 Purpose: Personal or Professional Use

-------------------------------------------------------

💡 Tip: Choose a secure username and password  
to protect your system and data.

=======================================================
Create your Own User to begin setup
=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-oobe-user.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-oobe-welcome.txt);
=======================================================
                   🎉 WELCOME TO
                     N  A  T  V  C
=======================================================

✨ It's an honor to welcome you to the system  
we've dedicated ourselves to perfecting.

🛠️ We'll guide you through configuration  
to ensure you get the most from this  
cutting-edge platform.

-------------------------------------------------------

© Copyright FoxaXu Dev Lab  
All rights reserved.

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-oobe-welcome.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-recovery-error.txt);
=======================================================
                   🧩 Recovery Mode
=======================================================

⚠️ System boot failed  
🗂️ Missing or corrupted file detected:  
   {REV_Missing_File}

-------------------------------------------------------

🔁 Press any key to restart  
💡 Your device needs recovery to continue

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-recovery-error.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-system-detail.txt);
=======================================================
              ████   ████   ████   ████   ████
              ████   ████   ████   ████   ████
                   W E L C O M E   T O   N A T V C
=======================================================

💧 Natvc 15 Liquid
Lightweight • AI-Enhanced • Secure • Fast

-------------------------------------------------------

🔧 System Summary:
• OEM: {MAF_OEM}  
• Calcium Version: {VersionID} ({CalciumL_FMV})  
• Platform: {Platform}  
• Firmware: {BootMethod}  
• Kernel: {SYS_KERNEL_VID}  
• OS: {SYS_NAME} {SYSNAME} {NATVC_EDITION}  
• Startup: {last_startup}  
• User: {NATVC_USERNAME} ({NATVC_WHOIS})

-------------------------------------------------------

📂 OS Directory: {NATVC_DISK}  
📘 EULA: {SYS_NROOT}/res/natvc-eula.txt

=======================================================
Powered by Calcium Script · Project BVM · Natvc_FDL
=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-system-detail.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-user-settings-main.txt);
=======================================================
                 👤 NATVC USER SETTINGS
=======================================================

⚠️ WARNING:  
Ensure you have an active administrator account  
before making changes. Proceed with caution.

-------------------------------------------------------

🔧 USER MANAGEMENT OPTIONS:

  [1] ➕ Create New User  
  [2] ❌ Delete User  
  [3] 🚫 Ban User Account  
  [4] 🛡️ Set Admin Privileges  
  [5] 🔁 Configure Auto-Login  [@ = Disable]

-------------------------------------------------------

💡 Usage Tip:  
Type "autorun" to configure user auto-run settings  
or select an option above.

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-user-settings-main.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/natvc-UserMenu.txt);
══════════════════════════════════════════════════════
👤 Welcome, {NATVC_USERNAME} ({NATVC_WHOIS})  
🖥️ System: {SYS_NAME} {SYSNAME}
══════════════════════════════════════════════════════

📂 EXPLORER COMMANDS
──────────────────────────────────────────────────────
• reload      → Refresh Explorer  
• logoff      → Logout current user  
• shutdown    → Shutdown device  
• restart     → Restart device  
• hiber       → Hibernate system  
• software    → Open software manager  

🛠️ SYSTEM COMMANDS
──────────────────────────────────────────────────────
• .rs         → Restart to Safe Mode  
• .re         → Restart to Recovery Mode  
• .bm         → Restart to Boot Menu  
• .adv        → Restart to Advanced Options  
• .shell      → Open Root Shell  
• linkmgr     → Manage Explorer Links  

🧰 TOOLS & UTILITIES
──────────────────────────────────────────────────────
• aboutsys    → View system information  
• update      → Check for updates  
• confedit    → Edit system configuration  
• usersetting → Manage user settings  
• sysfix      → Run system repair  
• filemgr     → Launch file manager  
• filepack    → Open file archive tool  

💡 Tip: Use `linkmgr` to manage program shortcuts and launcher links
══════════════════════════════════════════════════════
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/natvc-UserMenu.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/res/start-read.txt);
=======================================================
               💧 Welcome to Natvc 15 Liquid
=======================================================

🚀 Natvc 15 introduces the new **Liquid** experience —  
a smoother, faster, and more secure system environment  
designed for modern performance and reliability.

-------------------------------------------------------

🔒 Key Features of Liquid:
• Enhanced system fluidity and responsiveness  
• Reinforced security architecture  
• Optimized for real-time updates and low-latency tasks  
• Seamless integration with virtual hardware platforms

-------------------------------------------------------

🔄 Stay Updated:
We recommend checking for updates weekly  
to keep your system secure and up to date.

📘 Need help? Visit: https://devlab.foxaxu.com  
📂 Origin File Directory: {SYS_NROOT}/res/start-read.txt

-------------------------------------------------------

🙏 Thank you for choosing Natvc  
🎉 Enjoy the Liquid experience!

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/res/start-read.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Service/local_ntsh.nsv);
//Natvc Service Config

//PROGRAM
$Execute={SYS_ROOT}/nativeshell.ca;

//RUNAS USER
$UserID={NATVC_WHOIS};
$UserPassword={NATVC_USER_PASSWORD};

//Name ntvue_user_logon_interface

//DETECT SERVICE API  {NSV_SERVICE_MODE} return true;
//Natvc Service
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Service/local_ntsh.nsv);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Service/ntvue_user_logon_interface.nsv);
//Natvc Service Config

//PROGRAM
$Execute={SYS_ROOT}/ntvue.ca;

//RUNAS USER
$UserID=SYSTEM;
$UserPassword=@nopswd;

//Name ntvue_user_logon_interface

//DETECT SERVICE API  {NSV_SERVICE_MODE} return true;
//Natvc Service
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Service/ntvue_user_logon_interface.nsv);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Service/power_ntsh.nsv);
//Natvc Service Config

//PROGRAM
$Execute={SYS_ROOT}/nativeshell.ca;

//RUNAS USER
$UserID=SYSTEM;
$UserPassword=@nopswd;

//Name ntvue_user_logon_interface

//DETECT SERVICE API  {NSV_SERVICE_MODE} return true;
//Natvc Service
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Service/power_ntsh.nsv);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Service/user_local_explorer.nsv);
//Natvc Service Config

//PROGRAM
$Execute={SYS_ROOT}/explorer.ca;

//RUNAS USER
$UserID={NATVC_WHOIS};
$UserPassword={NATVC_USER_PASSWORD};

//Name ntvue_user_logon_interface

//DETECT SERVICE API  {NSV_SERVICE_MODE} return true;
//Natvc Service
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Service/user_local_explorer.nsv);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Service/{Template}.nsv);
//Natvc Service Config

//PROGRAM
$Execute=<Execute>;

//RUNAS USER
$UserID=<USERID>;
$UserPassword=<PASSWORD>;



//DETECT SERVICE API  {NSV_SERVICE_MODE} return true;
//Natvc Service
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Service/{Template}.nsv);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysboot/boot);
//Volume Loader
$DefaultLoader={BootVolume}/bootmgr.ca;
$DefaultOption=null;
$RollBackLoad=;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysboot/boot);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysboot/bootmgr.ca);
_$directmode;
_$nolog;

//New Boot Format
//LegacyEdition
//NBF Boot Manager

_var {BootLogFiles} = "{BootVolume}/BootLogFiles.log";

_if(_file_exist "{BootLogFiles}.old")|_file_del "{BootLogFiles}.old";

_if(_file_exist "{BootLogFiles}")|_file_rename ("{BootLogFiles}","{BootLogFiles}.old");

_file_open "{BootLogFiles}";

_file_write "@NBF System loader log file.   Time  %fulltime% ";

_file_write "[%time%][Boot] Boot Start";

_if(_cp("{NBFMenu}","true"))| _goto :BootSelect;

//Load Default Option
_file_write "[%time%][Boot] Load Default OS Loader";
_sipcfg.open "{BootVolume}/$BVM_VOL_LOAD";
_var {BootDefaultOption} = _sipcfg DefaultOption;
_var {BootSetDefault} = "{BootDefaultOption}";

_file_write "[%time%][Boot] Default BCD File:  {BootDefaultOption}";

:StartLoadingBootNBF

//LoadBCD
_file_write "[%time%][Boot] Checking Boot loader";
_if(!_file_exist "{BootVolume}/nbf/{BootDefaultOption}") | _goto :NoDefaultLoader;
_sipcfg.open "{BootVolume}/nbf/{BootDefaultOption}";

_file_write "[%time%][Boot] Read BCD Files ...";

_var {osvolume} = _sipcfg osvol;
_var {Boot_OSPATH} = _sipcfg ospath;
_var {NATVC_SYSLDR} = _sipcfg osload;
_var {BootSign} = _sipcfg bootsign;

_file_write "[%time%][Boot] OS Volume :  {osvolume}";
_file_write "[%time%][Boot] OS PATH :  {Boot_OSPATH}";
_file_write "[%time%][Boot] OS System loader :  {NATVC_SYSLDR}";
_file_write "[%time%][Boot] OS Sign :  {BootSign}";

//Config All Disks
_file_write "[%time%][Boot] Configuration Disk Device";

//Boot System
_var {NATVC_DISK} = "{osvolume}";

//Edit {boot_rsmode} to Manager System Boot

_file_write "[%time%][Boot] Configuration Boot loader";
//Core
_var {NATVC_BOOTLOAD} = "{NATVC_DISK}/{NATVC_SYSLDR}";

_file_write "[%time%][Boot] Check Boot loader";
_if(!_file_exist "{NATVC_BOOTLOAD}")| _goto :NATVC_MS_SL;

_file_write "[%time%][Boot] Check Boot Sign";
//Verify Boot loader is VALID
_sipcfg.open "{NATVC_BOOTLOAD}";
_var {LoadSign} = _sipcfg signload;
_if(!_cp("{BootSign}","{LoadSign}"))|_goto :SignInvalid;

_file_write "[%time%][Boot] Startup System";

_var {RE_ENV} = "false";
_var {OS_CALLBACK} = _script <"{NATVC_BOOTLOAD}"> "sysload";

_file_open "{BootLogFiles}";
_file_write "[%time%][Boot] System Callback :  {OS_CALLBACK}";
_if(_cp("{OS_CALLBACK}","$reboot"))|_return "$reboot";
_if(_cp("{OS_CALLBACK}","$shutdown"))|_return "$shutdown";
_file_write "[%time%][Boot][Error] Exception CALLBACK";
_goto :NATVC_MS_FL;

_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";

//ERRPAGE
:NATVC_MS_SL;
_file_write "[%time%][Boot][Error] Device Error :   Boot loader is missing";
_var {NBF_FILE} = "{NATVC_BOOTLOAD}";
_clear;
_typefile "{BootVolume}/res/filelost.txt";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";


:NATVC_MS_FL;
_file_write "[%time%][Boot][Error] Boot Fail :  OS CALLBACK =  {NBF_ErrorCode}";
_var {NBF_ErrorCode} = "{OS_CALLBACK}";
_clear;
_typefile "{BootVolume}/res/bootfail.txt";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";


//Boot Select Mode
:BootSelect;
_file_write "[%time%][Boot] Boot Menu";
_var {NBFMenu} = "false";
_clear;
_typefile "{BootVolume}/res/NBFshell.txt";
_prt "Select Boot load or type .exit shutdown $> ";
_var {BootDefaultOption} = _getline;

_if(_cp("{BootDefaultOption}",".exit"))|_return "$shutdown";
_if(_cp("{BootDefaultOption}",".list"))|_goto :ListBootLDR;
_if(!_file_exist "{BootVolume}/nbf/{BootDefaultOption}")|_goto :BootSelect;

_goto :StartLoadingBootNBF;



:NoDefaultLoader;
_file_write "[%time%][Boot] System No Default Loader";
_cout "No Default System Loader";
_sleep 2;
_goto :BootSelect;

:ListBootLDR;
_file_write "[%time%][Boot] List all boot loader";
_clear;
_cout "All Boot loader";
_cout "------------------------------------";
_dir_list ("script/tempNBF","{BootVolume}/NBF");

_file_replace "script/tempNBF" ("{BootVolume}/NBF/","");    

_textprint "script/tempNBF";
_cout "------------------------------------";
_cout "Default :  ({BootSetDefault})";
_cout "------------------------------------";
_file_del "script/tempNBF";
_pause;
_goto :BootSelect;




:SignInvalid;
_file_write "[%time%][Boot] Bootloader sign is invalid :  not trusted device";
_var {NBF_ErrorCode} = "Invalid Boot Loader :  {NATVC_BOOTLOAD}";
_clear;
_typefile "{BootVolume}/res/bootfail.txt";
//_cout "{LoadSign}";
//_cout "{BootSign}";
_pause;
_var {SysLocker} = "false";
_var {NBFMenu} = "true";
_var bvm_bm = "true";
_return "$reboot";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysboot/bootmgr.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysboot/NBF-Temple);
//Boot Config Data
//NBF File Loader
$osvol=;
$ospath=;
$osload=;
$bootsign=;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysboot/NBF-Temple);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysboot/res/bootfail.txt);
=======================================================
                 🧩 NATVC BOOT RECOVERY
=======================================================

❗ CRITICAL SYSTEM ERROR DETECTED

🔧 Error Code: {NBF_ErrorCode}  
📄 Description: Bootloader verification failed

-------------------------------------------------------

🛠️ Recovery Instructions:

  [1] Insert your system recovery media  
  [2] Select 'Repair startup files' option  
  [3] Run boot sector repair tool

-------------------------------------------------------

📌 Without recovery media:  
Please contact your device manufacturer support

   • OEM: {MAF_OEM}

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysboot/res/bootfail.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysboot/res/filelost.txt);
=======================================================
                 🧩 NATVC BOOT RECOVERY
=======================================================

❗ Missing Critical File Detected

📄 File: {NBF_FILE}  
📌 Status: Required for system startup

-------------------------------------------------------

🛠️ Recovery Instructions:

  [1] Insert your setup media  
  [2] Choose "Repair system files"  
  [3] Restore or replace the missing file

-------------------------------------------------------

📌 No recovery media available?

Please contact your device manufacturer support:  
   • OEM: {MAF_OEM}

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysboot/res/filelost.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysboot/res/nbfshell.txt);
=======================================================
               🖥️ Natvc BOOTMGR Shell
=======================================================

📂 Location: BootVolume/nbf/*.nbf  
⚠️ Legacy boot files are not supported

🔧 Default Boot Loader: {BootSetDefault}

-------------------------------------------------------

🛠️ Available Commands:

  • .list     — Show available boot loaders  
  • .exit     — Shutdown system  

-------------------------------------------------------

💡 Tip: Use `.list` to view all available loaders  
🔐 Secure boot is enforced under Liquid Core

=======================================================
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysboot/res/nbfshell.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/sysinfo.txt);
Welcome To Natvc
Copyright FDL 2025

This is Project Natvc

Based "Calcium Project" "Biato Core" "OCLT"
Thanks your support
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/sysinfo.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/aboutsys.ca);
//User Mgr
//Main Console
_$directmode;
_$nolog;

_clear;

::MAIN;
_typefile "{SYS_NROOT}/res/natvc-system-detail.txt";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/aboutsys.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/autobl.ca);
_$directmode;
_$nolog;

//System Load Fix

_cout "Auto Boot loader fix tools";

_var {select_boot_partion} = _getargs;

_if(!_dir_exist "{select_boot_partion}")|_goto :ListHelp;

_cout "Boot Volume :  {select_boot_partion}";

_cout "OS Load Hardware :  $BVM_VOL_LOAD";

_sipcfg.open "{select_boot_partion}/Natvc/config/SYSTEM";

_var {BootName} = _sipcfg SYS_REG_NAME;

//Check NBF or Legacy 

_if(_cp("$BVM_VOL_LOAD","nbfload"))|_goto :addNBFLoader;

_file_write "[%time%][Setup] System boot is recreate on {select_boot_partion}";

_var {FileLoadName} = "{BootName}";
_var {sysmaindrv} = "{select_boot_partion}";


/////////////////////LEG PARTITION
:addLegacyLoader;

_var {FileLoadName} = "{BootName}";
_var {sysmaindrv} = "{select_boot_partion}";

_if(!_file_exist "$sys_def_disk/sysboot/bootmgr.ca")|_goto :NewLegBootloader;

_file_copy("{SYS_NROOT}/sysboot/NBF-Temple","$sys_def_disk/sysboot/nbf/{FileLoadName}");

_sipcfg.open "$sys_def_disk/sysboot/nbf/{FileLoadName}";
_sipcfg osvol = "{sysmaindrv}";
_sipcfg ospath = "Natvc";
_sipcfg osload = "Natvc/System/ntvload.ca";

_var {GetBootSign} = _script<"{sysmaindrv}/Natvc/System/ntvload.ca"> "getsign";

_sipcfg bootsign = "{GetBootSign}";

_sipcfg.open "$sys_def_disk/sysboot/boot";
_sipcfg DefaultLoader = '{BootVolume}/bootmgr.ca';
_sipcfg DefaultOption = "{FileLoadName}";
_cout "Legacy Boot Create Succeed";
_return "OK";

//Add New Boot loader Core
:NewLegBootloader;

//_dir_remove "$sys_def_disk/sysboot";

_dir_make "$sys_def_disk/sysboot";
_dir_make "$sys_def_disk/sysboot/nbf";
_dir_make "$sys_def_disk/sysboot/res";

_file_copy ("{SYS_NROOT}/sysboot/boot","$sys_def_disk/sysboot/boot");
_file_copy ("{SYS_NROOT}/sysboot/bootmgr.ca","$sys_def_disk/sysboot/bootmgr.ca");

_file_copy ("{SYS_NROOT}/sysboot/res/bootfail.txt","$sys_def_disk/sysboot/res/bootfail.txt");
_file_copy ("{SYS_NROOT}/sysboot/res/filelost.txt","$sys_def_disk/sysboot/res/filelost.txt");
_file_copy ("{SYS_NROOT}/sysboot/res/nbfshell.txt","$sys_def_disk/sysboot/res/nbfshell.txt");

_goto :addLegacyLoader;



////////////////////// NBF PARTITION
//Use NBF Loader
:addNBFLoader;

_var {FileLoadName} = "{BootName}";
_var {sysmaindrv} = "{select_boot_partion}";

_if(!_file_exist "$sys_def_disk/nbf/bootmgr.nbf")|_goto :NewBootloader;

_file_copy("{SYS_NROOT}/nbf/NBF-Temple","$sys_def_disk/nbf/nbf/{FileLoadName}");

_sipcfg.open "$sys_def_disk/nbf/nbf/{FileLoadName}";
_sipcfg osvol = "{sysmaindrv}";
_sipcfg ospath = "Natvc";
_sipcfg osload = "Natvc/System/ntvload.nbf";

_var {GetBootSign} = _script<"{sysmaindrv}/Natvc/System/ntvload.nbf"> "getsign";

_sipcfg bootsign = "{GetBootSign}";

_sipcfg.open "$sys_def_disk/nbf/nbfload";
_sipcfg DefaultLoader = '{BootVolume}/bootmgr.nbf';
_sipcfg DefaultOption = "{FileLoadName}";
_cout "NBF Boot Create Succeed";
_return "OK";

//Add New Boot loader Core
:NewBootloader;

//_dir_remove "$sys_def_disk/nbf";

_dir_make "$sys_def_disk/nbf";
_dir_make "$sys_def_disk/nbf/nbf";
_dir_make "$sys_def_disk/nbf/res";

_file_copy ("{SYS_NROOT}/nbf/nbfload","$sys_def_disk/nbf/nbfload");
_file_copy ("{SYS_NROOT}/nbf/bootmgr.nbf","$sys_def_disk/nbf/bootmgr.nbf");

_file_copy ("{SYS_NROOT}/nbf/res/bootfail.txt","$sys_def_disk/nbf/res/bootfail.txt");
_file_copy ("{SYS_NROOT}/nbf/res/filelost.txt","$sys_def_disk/nbf/res/filelost.txt");
_file_copy ("{SYS_NROOT}/nbf/res/nbfshell.txt","$sys_def_disk/nbf/res/nbfshell.txt");

_goto :addNBFLoader;





:ListHelp;
_cout "Auto Bootloader Create tools";
_cout "Command : ";
_cout " autonewbl.ca | args: <System Volume>";
_cout "";
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/autobl.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/bcdmgr.ca);
//Natvc Boot Manager Tools
//Design By FoxaXu
_$directmode;
_$nolog;
_$no_err_report;

_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;

_clear;

_var {ToolsName} = "bcdmgr.ca";


//Load Main
:BACKMAINCONSOLE;
_clear;
_cout "sysboot Boot Manager ({SYSNAME}.{SYS_KERNEL_VID})";
_if(!_cp("$BVM_VOL_LOAD","boot"))|_cout "WARNING. this system not use sysboot to boot";
_cout "@--------------------------------------------------------@";
_cout "select mode ";
_cout "1. Create New Bootloader on device";
_cout "2. Edit old bootloader";
_cout "3. Delete Boot Loader";
_cout "";
_if(_cp("$BVM_VOL_LOAD","boot"))|_cout "Current Load file :  {BootVolume}/sysboot/{BootDefaultOption}";
_cout "use "bootopt" on explorer. to restart to sysboot Shell";
_cout "use .exit close this tool";
_cout "Copyright FoxaXu 2024 . Project NATVC";
_cout "@--------------------------------------------------------@";
_prts "select mode > ";
_var {useropt} = _getline;
_if(_cp("{useropt}","1"))|_goto :addblmode;
_if(_cp("{useropt}","2"))|_goto :editblmode;
_if(_cp("{useropt}","3"))|_goto :delblmode;
_if(_cp("{useropt}",".exit"))|_return "ok";
_goto :BACKMAINCONSOLE;



:addblmode;
_cout "Select System Disk";
_prts "SYSDRV> ";
_var {sysmaindrv} = _getline;
_if(!_file_exist "{sysmaindrv}/Natvc/System/ntvload.ca")|_goto :FailIndex;

_cout "Set Load File Name";
_prts "SYSDRV> ";
_var {FileLoadName} = _getline;

_cout "Please wait";

_if(!_file_exist "$sys_def_disk/sysboot/bootmgr.ca")|_goto :NewBootloader;

:BackCONADD;

_file_copy("{SYS_NROOT}/sysboot/nbf-Temple","$sys_def_disk/sysboot/nbf/{FileLoadName}");

_sipcfg.open "$sys_def_disk/sysboot/nbf/{FileLoadName}";
_sipcfg osvol = "{sysmaindrv}";
_sipcfg ospath = "Natvc";
_sipcfg osload = "Natvc/System/ntvload.ca";

_var {GetBootSign} = _script<"{sysmaindrv}/Natvc/System/ntvload.ca"> "getsign";

_sipcfg bootsign = "{GetBootSign}";

_sipcfg.open "$sys_def_disk/sysboot/boot";
_sipcfg DefaultLoader = '{BootVolume}/bootmgr.ca';
_sipcfg DefaultOption = "{FileLoadName}";

_cout "Complete";
_pause;
_goto :BACKMAINCONSOLE;



:NewBootloader;

_dir_remove "$sys_def_disk/sysboot";

_dir_make "$sys_def_disk/sysboot";
_dir_make "$sys_def_disk/sysboot/nbf";
_dir_make "$sys_def_disk/sysboot/res";

_file_copy ("{SYS_NROOT}/sysboot/boot","$sys_def_disk/sysboot/boot");
_file_copy ("{SYS_NROOT}/sysboot/bootmgr.ca","$sys_def_disk/sysboot/bootmgr.ca");

_file_copy ("{SYS_NROOT}/sysboot/res/bootfail.txt","$sys_def_disk/sysboot/res/bootfail.txt");
_file_copy ("{SYS_NROOT}/sysboot/res/filelost.txt","$sys_def_disk/sysboot/res/filelost.txt");
_file_copy ("{SYS_NROOT}/sysboot/res/nbfshell.txt","$sys_def_disk/sysboot/res/nbfshell.txt");

_goto :BackCONADD;




:editblmode;
_cout "Select Boot Disk";
_prts "Default open current system bootloader .  select boot Disk> ";
_var {bootloaderdrv} = _getline;
_if(!_file_exist "{bootloaderdrv}/boot")|_goto :FailIndex;

_prts "Select boot load file> ";
_var {FileLoadName} = _getline;
_if(!_file_exist "{bootloaderdrv}/nbf/{FileLoadName}")|_goto :FailIndex2;

_var {RegOpenFile} = "{bootloaderdrv}/nbf/{FileLoadName}";
_script <"{SYS_ROOT}/confedit.ca"> "openedit";
_goto :BACKMAINCONSOLE; 


:delblmode;
_cout "Select Boot Disk";
_prts "Default open current system bootloader .  select boot Disk> ";
_var {bootloaderdrv} = _getline;
_if(!_file_exist "{bootloaderdrv}/boot")|_goto :FailIndex;

_prts "Select boot load file> ";
_var {FileLoadName} = _getline;
_if(!_file_exist "{bootloaderdrv}/nbf/{FileLoadName}")|_goto :FailIndex2;

_var {RegOpenFile} = "{bootloaderdrv}/nbf/{FileLoadName}";

_if(_cp("{BootVolume}/sysboot/{BootDefaultOption}","{RegOpenFile}"))|_goto :DEF_WARNING;

:ApplyDeleteBL;
_file_del "{RegOpenFile}";
_goto :BACKMAINCONSOLE; 


//ErrPage
:FailIndex;
_cout "This Disk is invalid System. bcdmgr.ca cannot create a boot loader for this system";
_cout "Error : No load file on {bootloaderdrv}/boot";
_pause;
_goto :BACKMAINCONSOLE;


:FailIndex2;
_cout "This Disk is invalid boot data. bcdmgr.ca cannot Edit sysboot on here";
_cout "Error :  No sysboot CONFIG on {bootloaderdrv}/nbf/{FileLoadName}";
_pause;
_goto :BACKMAINCONSOLE;



:FAIL_DISALLOW;
_cout "Use Admin open this tools";
_cout "bcdmgr.ca.ca";
_return "fails";

:DEF_WARNING;
_cout "WARNING :  This boot loader is system now using boot load file";
_cout "           If you delete this boot file, Your device won't boot";
_cout "type y to Continue";
_prts "y/n (default n)>";
_var {DEFW_N} = _getline;

_if(_cp("{DEFW_N}","y"))|_goto :ApplyDeleteBL;

_goto :BACKMAINCONSOLE; 
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/bcdmgr.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/confedit.ca);
_$directmode;
_$nolog;
//Natvc Config Editor Tool
//Args use "openedit"

_var {ToolsName} = "CONFEDIT";
_var {CONFEDIT_TEMP_SIGN} = "false";
_if(_cp(_getargs,"openedit"))|_goto :OpenEditor;
_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;
_var {CONFEDIT_TEMP_SIGN} = "true";



//Natvc Config Editor
:BACKMAINCONSOLE;

_if(!_cp("{CONFEDIT_TEMP_SIGN}","true"))|_return "exitconsole";

_clear;

_cout "----------------------------------------------";
_cout "@ Natvc Config Edit   ({SYSNAME}.{SYS_KERNEL_VID}) ";
_cout "----------------------------------------------";
_cout "- NATVC Config Editor ";
_cout "-    Config:   ";
_cout "-";

_dir_list ("{temp}/confedit","{NATVC_CONFIG}");
_file_replace "{temp}/confedit" ("{NATVC_CONFIG}/","-  ");
_file_replace "{temp}/confedit" ("/{NATVC_CONFIG}/","-  ");
_file_replace "{temp}/confedit" ("/{NATVC_CONFIG}","-  ");

_textprint "{temp}/confedit";
_file_del "{temp}/confedit";
_cout "-";
_cout "-";
_cout "- Select and Settings.  use exit to back ";
_cout "- Mode (1 - edit/creat new reg .  2 - del reg)";
_cout "- You can open any Config Files";
_cout "----------------------------------------------";


_prts "Open File >";
_var {regmode} = _getline;
_if(_cp("{regmode}",".exit"))|_return "ok";
_if(_cp("{regmode}","exit"))|_return "ok";
_if(_cp("{regmode}","about"))|_goto :About;
//Check Files

_var {RegOpenFile} = "{regmode}";
_if(_file_exist "{RegOpenFile}")|_goto :OpenEditor;

_var {RegOpenFile} = "{NATVC_DISK}/{regmode}";
_if(_file_exist "{RegOpenFile}")|_goto :OpenEditor;

_var {RegOpenFile} = "{SYS_NROOT}/config/{regmode}";
_if(_file_exist "{RegOpenFile}")|_goto :OpenEditor;

_var {RegOpenFile} = "{NATVC_USERPROFILE}/{regmode}";
_if(_file_exist "{RegOpenFile}")|_goto :OpenEditor;

_goto :BACKMAINCONSOLE;




:OpenEditor;
_if(!_file_exist "{RegOpenFile}")|_return "failopen";
_sipcfg.open "{RegOpenFile}";
_clear;
_cout "Config Edit   ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "@--------------------------------------------------------@";
_cout "  File :  {RegOpenFile}";
_cout " --------------------------------------------------------";
_textprint "{RegOpenFile}";
_cout "@--------------------------------------------------------@";

_prts "Set add/edit(1) or delete(2) . use .exit back>";
_var {useropt} = _getline;
_if(_cp("{useropt}",".exit"))|_goto :BACKMAINCONSOLE;
_if(_cp("{useropt}","exit"))|_goto :BACKMAINCONSOLE;
_if(_cp("{useropt}","1"))|_goto :EditMode;
_if(_cp("{useropt}","2"))|_goto :DelMode;
_goto :OpenEditor;

:EditMode;
_prts "select edit module(add / edit) > ";
_var {useroptE} = _getline;
_if(_cp("{useroptE}",".exit"))|_goto :OpenEditor;

_prts "type new info > ";
_var {useroptY} = _getline;
_if(_cp("{useroptY}",".exit"))|_goto :OpenEditor;

_sipcfg {useroptE} = "{useroptY}";
_goto :OpenEditor;





:DelMode;
_prts "select edit module(Remove) > ";
_var {useroptE} = _getline;
_if(_cp("{useroptE}",".exit"))|_goto :OpenEditor;

_sipcfg.remove {useroptE};
_goto :OpenEditor;





:About;
_clear;
_typefile "{NATVC_ABOUTS_TEXT}";
_pause;
_goto :BACKMAINCONSOLE;




//ERRPAGE
:FAIL_DISALLOW;
_clear;
_cout "NATVC CONFIG EDIT";
_cout "For system security reasons, current users cannot run User Settings";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter ...";
_pause;
_return "user_noauth";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/confedit.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/confget.ca);
_$directmode;
_$nolog;
_$no_err_report;

//Natvc Config Get
//Get File

_free {callback_temp};

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(_cp(_sipcfg whitelist,"1"))|_goto :WL_Mode;


:Fallback_WL;
//_file_write "[%time%][OpenLibrary] config get :  "{CONFGET_WORD}" ";
//_file_write "[%time%][OpenLibrary] config get Origin File :  "{CONFGET_FILE}" ";

_if(!_file_exist "{CONFGET_FILE}") |_return "null";

//_file_write "[%time%][OpenLibrary] config get :  file exist";

_sipcfg.open "{CONFGET_FILE}";

//_file_write "[%time%][OpenLibrary] Try to Read Sipcfg Data";

_free {ConfGet_CALLBACK_PTR};

_var {ConfGet_CALLBACK_PTR} = _sipcfg {CONFGET_WORD};

//_file_write "[%time%][OpenLibrary] config get :  Return Value is "{CONFGET_WORD}" ";

_return "{ConfGet_CALLBACK_PTR}";


:WL_Mode;
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_var {VAILD_RUN} = _sipcfg whitelist_file;

_if(!_file_exist "{VAILD_RUN}")|_goto :Fallback_WL;

_sipcfg.open "{VAILD_RUN}";
_if(!_cp(_sipcfg {CONFGET_WORD},"true"))|_return "false";
_return "true";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/confget.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/del.ca);
_$directmode;
_$nolog;

//File Delete
//Check args

_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;

_var {file_delete_args} = _getargs;

_if(!_file_exist "{file_delete_args}")|_goto :userselect;
_file_del "{file_delete_args}";

_if(_file_exist "{file_delete_args}")|_goto :DeleteFail;
_return "delok";


:userselect;
_cout "Type File name";
_prts "file >";
_var {file_delete_args} = _getline;
_file_del "{file_delete_args}";

_if(_file_exist "{file_delete_args}")|_goto :DeleteFail;
_return "delok";

:DeleteFail;
_cout "Could not delete this file :  {file_delete_args}";
_cout "Access Is Denied";
_return "delfail";


//ERRPAGE
:FAIL_DISALLOW;
_clear;
_cout "NATVC DELETE";
_cout "For system security reasons, current users cannot run User Settings";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter ...";
_pause;
_return "user_noauth";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/del.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/devinfo.ca);
_$directmode;
_$nolog;

//NATVC DEVICE INFO
_clear;

_prts "Loading Device Info";
_ms_sleep 100;
_prts "\r                                    \r";

::MAIN;
_cout "";
_cout "           DEVICE INFORMATION - {SYS_NAME} {SYSNAME}";
_cout "";
_cout "   SYSTEM OVERVIEW                           ";
_cout "                ";
_cout "   Project: {SYS_NAME} {SYSNAME}.{SYS_KERNEL_VID}";
_cout "                                              ";
_cout "   BOOT CONFIGURATION                        ";
_cout "                ";
_cout "   System Loader: {OSLOADER_FILE}";
_cout "   Trust Sign: {RBootSign}";
_cout "   OS Directory: {NATVC_DISK}";
_cout "   User Profile: {NATVC_USERPROFILE}";
_cout "   Temp OS: {RE_ENV}";
_cout "                                              ";
_cout "   HARDWARE PLATFORM                         ";
_cout "                ";
_cout "   Firmware: {BootMethod}";
_cout "   Platform: {Platform}";
_cout "   Device OEM: {MAF_OEM}";
_cout "                                              ";
_cout "   USER SESSION                              ";
_cout "                ";
_cout "   User: {NATVC_USERNAME} ({NATVC_WHOIS})";
_cout "   Privilege: {NATVC_isAdmin}";
_cout "   System ID: {_NATVC_SYSID}";
_cout "";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/devinfo.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/diskclean.ca);
_$directmode;
_$nolog;

//Natvc Disk Clear;

_var {ToolsName} = "DISKCLEAN";
_var {DC_ModeA} = _getargs;

_if(_cp("{DC_ModeA}","auto"))|_goto :StartDiskClear;

:BACKMAINCONSOLE;
_clear;
_cout "";
_cout "Natvc Disk Clear    - {SYSNAME}.{SYS_KERNEL_VID}";
_cout "type y to start Clear";
_cout "";
_cout "";
_cout "Select y to start diskclean";
_prts "diskclean [y] ? (default n)>";
_var {user_select} = _getline;

_if(_cp("{user_select}","y"))|_goto :StartDiskClear;
_if(_cp("{user_select}","about"))|_goto :About;
_return "cancel";



:StartDiskClear;
_clear;
_cout "start disk clear";
_cout "";

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(!_cp(_sipcfg shutdown_execute,"noexec"))|_goto :SkipUpdateClean;

_cout "Clear  Update temp file";
_dir_remove "{SYS_NROOT}/SystemUpdate";

_cout "Clear  Old Update Pack";
_dir_remove "{NATVC_DISK}/NatvcUpdate";

_cout "Clear  Old System Backups";
_dir_remove "{NATVC_DISK}/Natvc.old";

_cout "Clear  System Crash Reports";
_dir_remove "{SYS_NROOT}/MiniRep";
_file_del "{SYS_NROOT}/VarSpace_Dump.txt";

_cout "Clear  System Fast boot dump";
_file_del "{NATVC_DISK}/hiberfile.txt";
_var {Next_startup_fast_boot} = "-1";

_cout "Delete Old Bootloader";
_file_del "{BootVolume}/ReplaceLoader.nbf";

_cout "Clear  System Login Cache Certificate";
_dir_remove "{SYS_NROOT}/SECURITY";


:SkipUpdateClean;


_cout "Clear  Clear system log file";
_dir_remove "{NATVC_DISK}/{SYS_LOG_PATH}";
_file_del "{SYS_NROOT}/SysRepairLogfile.log";

_cout "Clear Cache";
_dir_remove "{temp}";
_dir_make "{temp}";

_cout "Disk Clean Complete";

_sleep 2;

_return "ok";



//Other 
:About;
_clear;
_typefile "{NATVC_ABOUTS_TEXT}";
_pause;
_goto :BACKMAINCONSOLE;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/diskclean.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/envtype.ca);
_$directmode;
_$nolog;

//Type Env
:BackMainET;
_clear;
_file_open "{SYS_LOG}";
_cout "Environment Type Tool":
_cout "Type you want check System Environment";
_prt "Type Env>";
_var {GetEnvTyper} = _getline;

_if(_cp("{GetEnvTyper}","exit"))|_return "ok";

_var {Filiter_Env} = "{GetEnvTyper}";

_file_del "{temp}/envtypeTemp.ca";
_file_open "{temp}/envtypeTemp.ca";
_file_write "_return "{GetEnvTyper}";";

_var {GetEnvTyper} = _script <"{temp}/envtypeTemp.ca">;
_file_del "{temp}/envtypeTemp.ca";

_cout "Env:   {Filiter_Env} = {GetEnvTyper}";
_pause;
_goto :BackMainET;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/envtype.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/explorer.ca);
_$directmode;
_$nolog;

//Explorer Main

//Load Cache File Map

_var {ToolsName} = "EXPLORER";

_var {EXPLORER_WORK_DIR} = _getargs;

//Load Default Maps
_if(!_dir_exist "{EXPLORER_WORK_DIR}")|_var {EXPLORER_WORK_DIR} = "script/vdisk";

_var {USE_NUM_SELECT_FOLDER} = "0";
_if(_file_exist "{NATVC_USERPROFILE}/USE_NUM_SELECT_FOLDER")|_var {USE_NUM_SELECT_FOLDER} = "1";

_free {EXPLORER_WORK_DIR_LAST};
_free {EXPLORER_WORK_DIR_LAST_LAST};
_free {EXPLORER_WORK_DIR_LAST_LAST_LAST};

//Open File Manager
//CONSOLE

_var {CopyFileName_Cache} = "{noselect_files}";
_var {CopyFileNameTag_Cache} = "{ORGNAMEDIR}";
_var {CopyFileDelete_Cache} = "0";

_var {CopyDirName_Cache} = "{noselect_files}";
_var {CopyDirNameTag_Cache} = "{ORGNAMEDIR}";
_var {CopyDirDelete_Cache} = "0";

_var {EXPLORER_WORK_DIR_LAST} = "{nolastdir}";
_var {EXPLORER_WORK_DIR_LAST_LAST} = "{nolastdir}";
_var {EXPLORER_WORK_DIR_LAST_LAST_LAST} = "{nolastdir}";

:RELOADCONSOLE;
_var {NumTarget} = "0";
_file_del "{temp}/Explorer_cacheList.txt";
_if(!_dir_exist "{EXPLORER_WORK_DIR}")|_var {EXPLORER_WORK_DIR} = "script/vdisk";
_clear;
_cout "@---- File Explorer -------------------------------------------";
_cout "| DIR:  {EXPLORER_WORK_DIR}";
_cout "---------------------------------------------------------------";
_file_list ("{temp}/Explorer_cacheList.txt","{EXPLORER_WORK_DIR}");
_file_replace "{temp}/Explorer_cacheList.txt" ("{EXPLORER_WORK_DIR}/","");
_if(_file_exist "{temp}/Explorer_cacheList.txt")|_textprint "{temp}/Explorer_cacheList.txt";
_if(!_file_exist "{temp}/Explorer_cacheList.txt")|_cout "        No File at here";
_cout "---------------------------------------------------------------";
_cout "type dir name to opendir,type file name to edit file";
_cout "command :   "rmdir"  "mkdir"  "cpdir" "cutdir" "cd"  "paste"  "exit"  ";
_if(_cp("{USE_NUM_SELECT_FOLDER}","1"))|_cout "Number Select Folder/File is Enabled. You can type number to select";
_cout "";
_prt "Explorer >";
_var {UserTypeGet} = _getline;
//Process User Command
:ReProcessCommand
//_cout "Recyclic {UserTypeGet}";
//_goto :RELOADCONSOLE;
_if(_cp("{UserTypeGet}","LineError"))|_goto :RELOADCONSOLE;
_if(_cp("{UserTypeGet}","FileNotExist"))|_goto :RELOADCONSOLE;
_if(_cp("{UserTypeGet}","{varspace.null}"))|_cout "Refresh Explorer";
_if(_cp("{UserTypeGet}","{varspace.null}"))|_ms_sleep "100";
_if(_cp("{UserTypeGet}","{varspace.null}"))|_goto :RELOADCONSOLE;

_if(_cp("{UserTypeGet}",".."))|_goto :GotoLastDIR;
_if(_cp("{UserTypeGet}","..."))|_var {EXPLORER_WORK_DIR} = "{NODIR}";
_if(_cp("{UserTypeGet}","rmdir"))|_goto :RemoveDir;
_if(_cp("{UserTypeGet}","mkdir"))|_goto :MakeDir;
_if(_cp("{UserTypeGet}","cpdir"))|_goto :CopyDirMD;
_if(_cp("{UserTypeGet}","cutdir"))|_goto :CutDirMD;
_if(_cp("{UserTypeGet}","cd"))|_goto :CdDir;
_if(_cp("{UserTypeGet}","debug.levelprint"))|_goto :DEBUG_LVPTR;
//paste
_if(_cp("{UserTypeGet}","paste"))|_goto :PasteFileOrDir;

_if(_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_var {EXPLORER_WORK_DIR_LAST_LAST_LAST} = "{EXPLORER_WORK_DIR_LAST_LAST}";
_if(_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_var {EXPLORER_WORK_DIR_LAST_LAST} = "{EXPLORER_WORK_DIR_LAST}";
_if(_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_var {EXPLORER_WORK_DIR_LAST} = "{EXPLORER_WORK_DIR}";
_if(_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_var {EXPLORER_WORK_DIR} = "{EXPLORER_WORK_DIR}/{UserTypeGet}";

_if(_file_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_goto :FileEdit_Manager;


_if(_cp("{UserTypeGet}","exit"))|_return "ok";
_if(_cp("{UserTypeGet}",".exit"))|_return "ok";

_if(_cp("{USE_NUM_SELECT_FOLDER}","0"))|_goto :RELOADCONSOLE;

_if(_cp("{UserTypeGet}","overline"))|_goto :RELOADCONSOLE;

//Is Num
_if (_cp("{NumTarget}","1"))|_goto :RELOADCONSOLE;
_var {NumTarget} = "1";
_var {UserTypeGet} = _file_read ("{temp}/Explorer_cacheList.txt","{UserTypeGet}");
_goto :ReProcessCommand;


_goto :Explorer_Crash;



:Explorer_Crash;
_clear;
_cout "Natvc Explorer Error. stop working";
_cout "File Operate failed":
_pause;
_return "crash";


:CopyDirMD;
_cout "";
_cout "Type Dir you want Copy";
_prt "Copy Dir>";
_var {UserTypeGet} = _getline;

_if(!_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_cout "No This dir";
_if(!_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_pause;
_if(!_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_goto :RELOADCONSOLE;

_var {CopyDirName_Cache} = "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_var {CopyDirNameTag_Cache} = "{UserTypeGet}";
_var {CopyDirDelete_Cache} = "0";

_var {CopyFileName_Cache} = "{noselect_files}";
_var {CopyFileNameTag_Cache} = "{ORGNAMEDIR}";
_var {CopyFileDelete_Cache} = "0";

_goto :RELOADCONSOLE;


:CopyDirMD;
_cout "";
_cout "Type Dir you want Cut";
_prt "Cut Dir>";
_var {UserTypeGet} = _getline;

_if(!_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_cout "No This dir";
_if(!_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_pause;
_if(!_dir_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_goto :RELOADCONSOLE;

_var {CopyDirName_Cache} = "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_var {CopyDirNameTag_Cache} = "{UserTypeGet}";
_var {CopyDirDelete_Cache} = "1";

_goto :RELOADCONSOLE;




:GotoLastDIR;
_var {EXPLORER_WORK_DIR} = "{EXPLORER_WORK_DIR_LAST}";
_var {EXPLORER_WORK_DIR_LAST} = "{EXPLORER_WORK_DIR_LAST_LAST}";
_var {EXPLORER_WORK_DIR_LAST_LAST} = "{EXPLORER_WORK_DIR_LAST_LAST_LAST}";
_var {EXPLORER_WORK_DIR_LAST_LAST_LAST} = "{nolastdir}";
_goto :RELOADCONSOLE;

:RemoveDir;
_cout "";
_cout "Type Dir you want remove";
_prt "Remove Dir>";
_var {UserTypeGet} = _getline;
_dir_remove "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_goto :RELOADCONSOLE;

:MakeDir;
_cout "";
_cout "Type Dir you want Make";
_prt "Make Dir>";
_var {UserTypeGet} = _getline;
_dir_make "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_goto :RELOADCONSOLE;

:CdDir;
_cout "";
_cout "Type Dir";
_prt "Dir>";
_var {UserTypeGet} = _getline;
_var {EXPLORER_WORK_DIR} = "{UserTypeGet}";
_goto :RELOADCONSOLE;


:FileEdit_Manager;
_cout "";
_cout "What do you want do";
_cout "File {EXPLORER_WORK_DIR}/{UserTypeGet}";
_cout "command :  "copy" "del" "cut" "open"  "exit"   ";
_prt "file>";
_var {GETOPT} = _getline;
_if(_cp("{GETOPT}","copy"))|_var {CopyFileName_Cache} = "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_if(_cp("{GETOPT}","copy"))|_var {CopyFileNameTag_Cache} = "{UserTypeGet}";
_if(_cp("{GETOPT}","copy"))|_var {CopyFileDelete_Cache} = "0";

_if(_cp("{GETOPT}","copy"))|_var {CopyDirName_Cache} = "{noselect_files}";
_if(_cp("{GETOPT}","copy"))|_var {CopyDirDelete_Cache} = "0";

_if(_cp("{GETOPT}","copy"))|_cout "file is copy. use "paste" command to paste here  ";

_if(_cp("{GETOPT}","del"))|_goto :delMode;

_if(_cp("{GETOPT}","cut"))|_var {CopyFileName_Cache} = "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_if(_cp("{GETOPT}","cut"))|_var {CopyFileNameTag_Cache} = "{UserTypeGet}";
_if(_cp("{GETOPT}","cut"))|_var {CopyFileDelete_Cache} = "1";

_if(_cp("{GETOPT}","cut"))|_var {CopyDirName_Cache} = "{noselect_files}";
_if(_cp("{GETOPT}","cut"))|_var {CopyDirDelete_Cache} = "0";

_if(_cp("{GETOPT}","cut"))|_cout "file is cut. use "paste" command to paste here  ";

_if(_cp("{GETOPT}","open"))|_goto :OpenFileForOpeate;

_goto :RELOADCONSOLE;





:delMode;
_file_del "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_if(!_file_exist "{EXPLORER_WORK_DIR}/{UserTypeGet}")|_goto :RELOADCONSOLE;
_cout "Delete Fail";
_cout "This file is using ?.  or you haven`t auth to delete this file";
_pause;
_goto :RELOADCONSOLE;



:OpenFileForOpeate;


//Check EXP is allow?
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{UserTypeGet}";
_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_if(_cp("{callback_temp}","false")) | _goto :FailLoadProgram;


_clear;
_cout "How do you want open this file";
_cout "File :   {EXPLORER_WORK_DIR}/{UserTypeGet}";
_cout "";
_cout "     1. Run Calcium Application"; //OK
_cout "     2. Open with Text reader";  //OK
_cout "     3. Open with Config Editor";  //OK
_cout "     4. Exit";
_prt "Select Open Method >";
_var {OpenMethod} = _getline;

_var {ROOTSHELL_CALLBACK} = "Null";
_var {rs_pathexec} = "{EXPLORER_WORK_DIR}";

_if(_cp("{OpenMethod}","1"))|_var {ROOTSHELL_CALLBACK} = _script <"{SYS_ROOT}/run.ca"> "{EXPLORER_WORK_DIR}/{UserTypeGet}";

_if(_cp("{OpenMethod}","2"))|_script <"{SYS_ROOT}/textreader.ca"> "{EXPLORER_WORK_DIR}/{UserTypeGet}";

_if(_cp("{OpenMethod}","3"))|_var {RegOpenFile} = "{EXPLORER_WORK_DIR}/{UserTypeGet}";
_if(_cp("{OpenMethod}","3"))|_script <"{SYS_ROOT}/confedit.ca"> "openedit";

_if(_cp("{ROOTSHELL_CALLBACK}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{ROOTSHELL_CALLBACK}","user_restart"))|_return "user_restart";
_if(_cp("{ROOTSHELL_CALLBACK}","user_logoff"))|_return "user_logoff";
_if(_cp("{ROOTSHELL_CALLBACK}","shutdown"))|_return "user_shutdown";
_if(_cp("{ROOTSHELL_CALLBACK}","restart"))|_return "user_restart";
_if(_cp("{ROOTSHELL_CALLBACK}","logoff"))|_return "user_logoff";

_if(_cp("{ROOTSHELL_CALLBACK}","notworkonusermode"))|_cout "This Application cannot running on User Mode";
_if(_cp("{ROOTSHELL_CALLBACK}","noauth"))|_cout "This Application cannot running in current user";
_if(_cp("{ROOTSHELL_CALLBACK}","failuserauth"))|_cout "This Application cannot running in current user";

_if(!_cp("{ROOTSHELL_CALLBACK}","Null"))|_pause;

_goto :RELOADCONSOLE;



:FailLoadProgram;
_cout "For System Security. your device is not allowed run this program";
_pause;
_goto :RELOADCONSOLE;




:PasteFileOrDir;
_if(!_cp("{CopyDirName_Cache}","{noselect_files}"))|_goto :CopyDirMode;
_if(!_cp("{CopyFileName_Cache}","{noselect_files}"))|_goto :CopyFileMode;
_cout "No File/Dir on Paste Board";
_pause
_goto :RELOADCONSOLE;

:CopyDirMode;
_var {XCOPY_A} = "{CopyDirName_Cache}";
_var {XCOPY_B} = "{EXPLORER_WORK_DIR}/{CopyDirNameTag_Cache}";
_script <"{SYS_ROOT}/xcopy.ca">;
_free {XCOPY_A};
_free {XCOPY_B};

_if(_cp("{CopyDirDelete_Cache}","1"))|_dir_remove "{CopyDirName_Cache}";


_goto :RELOADCONSOLE;



:CopyFileMode;
_file_copy ("{CopyFileName_Cache}","{EXPLORER_WORK_DIR}/{CopyFileNameTag_Cache}");
_if(_cp("{CopyFileDelete_Cache}","1"))|_file_del "{CopyFileName_Cache}";

_if(!_file_exist "{EXPLORER_WORK_DIR}/{CopyFileNameTag_Cache}")|_cout "Copy Fail..";
_if(!_file_exist "{EXPLORER_WORK_DIR}/{CopyFileNameTag_Cache}")|_pause;

_goto :RELOADCONSOLE;



:DEBUG_LVPTR;
_clear;
_cout "Top :   {EXPLORER_WORK_DIR}";
_cout "2   :   {EXPLORER_WORK_DIR_LAST}";
_cout "3   :   {EXPLORER_WORK_DIR_LAST_LAST}";
_cout "4   :   {EXPLORER_WORK_DIR_LAST_LAST_LAST}";
_cout "Debug Toolkit";
_pause;
_goto :RELOADCONSOLE;

$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/explorer.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/filecstp.ca);
//NATVC File Cstp Tools
//Use _file_pack /  _file_unpack / _file_exist / _file_del  Exist API 
//Extract or PackFile
//Use NEW FORMAT

_$directmode;
_$nolog;

_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;

_var {ToolsName} = "FileCstp";

:MainFileExplorer;
_clear;
_cout "Natvc File Cstp Tools ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "----File Cstp and Extract tools--------------";
_cout "";
_cout "    1. Extract Mode";
_cout "    2. Pack Files";
_cout "";
_cout " Use New Cstp Format.";
_cout " Copyright foxaxu 2024";
_cout "---------------------------------------------";
_cout "select mode . (use .exit cancel)" 
_prts "$FileCstp >";
_var {UserExplorerConsole} = _getline;

_if(_cp("{UserExplorerConsole}","1"))|_goto :ExtractMode;
_if(_cp("{UserExplorerConsole}","2"))|_goto :PackFileMode;
_if(_cp("{UserExplorerConsole}",".exit"))|_return "ok";
_goto :MainFileExplorer;



:ExtractMode;
_cout "Extract File.   Select File (use .exit cancel)";
_prts "$FilePack >";
_var {packfile} = _getline;
_if(_cp("{packfile}",".exit")) |_goto :MainFileExplorer;
_if(!_file_exist "{packfile}")  |_goto :ExtractMode;

_prts "$Extract Directory >";
_var {extractdir} = _getline;
_if(_cp("{extractdir}",".exit")) |_goto :MainFileExplorer;

_dir_remove "{extractdir}";
_file_uncstp ("{packfile}","{extractdir}");

_cout "Complete";
_pause;
_goto :MainFileExplorer;




:PackFileMode;
_cout "Pack File.   Select Dir";
_prts "$Dir >";
_var {extractdir} = _getline;
_if(_cp("{extractdir}",".exit")) |_goto :MainFileExplorer;

_if(!_dir_exist "{extractdir}")   |_goto :PackFileMode;

_prts "$Pack File Name >";
_var {packfile} = _getline;
_if(_cp("{packfile}",".exit")) |_goto :MainFileExplorer;

_dir_remove "{packfile}";
_file_cstp ("{extractdir}","{packfile}");

_cout "Complete";
_pause;
_goto :MainFileExplorer;



//ERRPAGE
:FAIL_DISALLOW;
_clear;
_cout "NATVC FILE CSTP";
_cout "For system security reasons, current users cannot run User Settings";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter ...";
_pause;
_return "user_noauth";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/filecstp.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/filemgr.ca);
//NATVC File Manager
//Use _file_pack /  _file_unpack / _file_exist / _file_del / _file_copy / _dir_exist / _dir_make / _dir_remove / _dir_make  Exist API 
_$directmode;
_$nolog;

_$req_cl_fmv 1502;

_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;

_var {ToolsName} = "FILEMGR";

_var {FileExpAddr} = "$sys_def_disk";


:MainFileExplorer;
_clear;
_cout "";
_cout "Natvc File Manager ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "----File Explorer -------------------------------";
_cout "{FileExpAddr}";
_cout "-------------------------------------------------";
_cout "type folder or select file ." 
_cout "use #make - to make dir ,use .exit to close file manager";
_prts "$FileExp >";
_var {UserExplorerConsole} = _getline;
_if(_dir_exist "{UserExplorerConsole}")|_goto :FolderMode;
_if(_file_exist "{UserExplorerConsole}")|_goto :FileMode;
_if(_cp("{UserExplorerConsole}","#make"))|_goto :MakeFolder;
_if(_cp("{UserExplorerConsole}",".exit"))|_return "ok";
_goto :MainFileExplorer;



:FolderMode;
_cout "";
_cout "Select Remove(type "r") or Cancel(Enter)"; 
_prts "${UserExplorerConsole} >";
_var {UserSelectMode} = _getline;
_if(_cp("{UserSelectMode}",".exit"))|_goto :MainFileExplorer;
_if(_cp("{UserSelectMode}","r"))|_dir_remove "{UserExplorerConsole}";
_goto :MainFileExplorer;



:FileMode;
_cout "";
_cout "Select Remove(type "r") or Rename(n) or Copy(c) . Cancel (Enter)";
_prts "${UserExplorerConsole} - ";
_var {UserSelectMode} = _getline;
_if(_cp("{UserSelectMode}",".exit"))|_goto :MainFileExplorer;
_if(_cp("{UserSelectMode}","r"))|_file_del "{UserExplorerConsole}";
_if(_cp("{UserSelectMode}","n"))|_goto :FileMode_ReName;
_if(_cp("{UserSelectMode}","c"))|_goto :FileMode_Copy;
_goto :MainFileExplorer;



:FileMode_ReName;
_cout "";
_cout "New Name (TypeFullPath) >";
_prts "${UserExplorerConsole} - ";
_var {UserSelectMode} = _getline;
_if(_cp("{UserSelectMode}",".exit"))|_goto :MainFileExplorer;
_file_rename ("{UserExplorerConsole}","{UserSelectMode}");
_goto :MainFileExplorer;



:FileMode_Copy;
_cout "";
_cout "Copy Path and New Name >";
_prts "${UserExplorerConsole} - ";
_var {UserSelectMode} = _getline;
_if(_cp("{UserSelectMode}",".exit"))|_goto :MainFileExplorer;
_file_rename ("{UserExplorerConsole}","{UserSelectMode}");
_goto :MainFileExplorer;



:MakeFolder;
_cout "";
_cout "Make New Folder >";
_prts "Path - ";
_var {UserSelectMode} = _getline;
_if(_cp("{UserSelectMode}",".exit"))|_goto :MainFileExplorer;
_dir_make "{UserSelectMode}";
_goto :MainFileExplorer;


//ERRPAGE
:FAIL_DISALLOW;
_clear;
_cout "NATVC File Manager";
_cout "For system security reasons, current users cannot run User Settings";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter ...";
_pause;
_return "user_noauth";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/filemgr.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/filepack.ca);
//NATVC File Pack Tools
//Use _file_pack /  _file_unpack / _file_exist / _file_del  Exist API 
//Extract or PackFile
_$directmode;
_$nolog;

_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;

_var {ToolsName} = "FILEPACK";



:MainFileExplorer;
_clear;
_cout "Natvc File Pack Tools ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "----File Pack and Extract tools--------------";
_cout "";
_cout "    1. Extract Mode";
_cout "    2. Pack Files";
_cout "";
_cout " Legacy Format will not support on future";
_cout " Copyright foxaxu 2024";
_cout "---------------------------------------------";
_cout "select mode . (use .exit cancel)" 
_prts "$FilePack >";
_var {UserExplorerConsole} = _getline;

_if(_cp("{UserExplorerConsole}","1"))|_goto :ExtractMode;
_if(_cp("{UserExplorerConsole}","2"))|_goto :PackFileMode;
_if(_cp("{UserExplorerConsole}",".exit"))|_return "ok";
_goto :MainFileExplorer;



:ExtractMode;
_cout "Extract File.   Select File (use .exit cancel)";
_prts "$FilePack >";
_var {packfile} = _getline;
_if(_cp("{packfile}",".exit")) |_goto :MainFileExplorer;
_if(!_file_exist "{packfile}")  |_goto :ExtractMode;

_prts "$Extract Directory >";
_var {extractdir} = _getline;
_if(_cp("{extractdir}",".exit")) |_goto :MainFileExplorer;

_dir_remove "{extractdir}";
_file_unpack ("{packfile}","{extractdir}");

_cout "Complete";
_pause;
_goto :MainFileExplorer;




:PackFileMode;
_cout "Pack File.   Select Dir";
_prts "$Dir >";
_var {extractdir} = _getline;
_if(_cp("{extractdir}",".exit")) |_goto :MainFileExplorer;

_if(!_dir_exist "{extractdir}")   |_goto :PackFileMode;

_prts "$Pack File Name >";
_var {packfile} = _getline;
_if(_cp("{packfile}",".exit")) |_goto :MainFileExplorer;

_dir_remove "{packfile}";
_file_pack ("{extractdir}","{packfile}");

_cout "Complete";
_pause;
_goto :MainFileExplorer;


//ERRPAGE
:FAIL_DISALLOW;
_clear;
_cout "NATVC FILE PACK";
_cout "For system security reasons, current users cannot run User Settings";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter ...";
_pause;
_return "user_noauth";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/filepack.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/krnlrep.ca);
_$directmode;
_$nolog;

_var {args_prep} = _getargs;
_if(!_cp("{args_prep}","kernelmode"))|_return "notworkonusermode";

//Collect System Bug Report
_prts "Please Wait...  Kernel Report Service is Collecting Error Report";

_envsave "{SYS_NROOT}/VarSpace_Dump.txt";

_if(!_dir_exist "{SYS_NROOT}/MiniRep")|_dir_make "{SYS_NROOT}/MiniRep";

_var {LOG_REPSTR} = _getclock;
_var {LOG_REPSTR} = _str_replace "{LOG_REPSTR}" (":","_");
_var {LOG_REPSTR} = _str_replace "{LOG_REPSTR}" ("\","");
_var {LOG_REPSTR} = _str_replace "{LOG_REPSTR}" ("/","");

_var {CurrentDate} = _getdate;
_var {CurrentDate} = _str_replace "{CurrentDate}" (":","_");
_var {CurrentDate} = _str_replace "{CurrentDate}" ("\","");
_var {CurrentDate} = _str_replace "{CurrentDate}" ("/","");

_file_open "{SYS_NROOT}/MiniRep/CrashReport-{CurrentDate}-{LOG_REPSTR}.txt";

_file_write "=========================================================================";
_file_write ":: Natvc Crash Report";
_file_write "Dump Collect time :  {LOG_REPSTR} - {CurrentDate}";
_file_write "//Your system is crash.  here is crash report";
_file_write "";
_file_write "System Version :  {SYSNAME}.{SYS_KERNEL_VID}";
_file_write "Error Code :  {NATVC_CRASH_CODE}";
_file_write "Error Message :  {NATVC_CRASH_MESSAGE}";
_file_write "";
_file_write "What failed :  {ToolsName}";
_file_write "";
_file_write "BUG REPORT By :  {BUG_REPORT}";
_file_write "OS Name :  {SYSNAME}      OS Build:   {SYS_RELEASE_Channel}";
_file_write "";
_file_write " hardware info : ";
_file_write "    System Loader :   {OSLOADER_FILE}";
_file_write "    Trust Sign    :   {RBootSign}";
_file_write "    OS DIR        :   {NATVC_DISK}";
_file_write "    USER PATH     :   {NATVC_USERPROFILE}";
_file_write "    Temp OS       :   {RE_ENV}";
_file_write "    is System Running on safe mode :  {boot_rsmode}";
_file_write "";
_file_write "   Firmware   :   {BootMethod}";
_file_write "   Platform   :   {Platform}";
_file_write "   User       :   {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_file_write "   SID        :   {_NATVC_SYSID}";
_file_write "";
_file_write "     Device OEM :  {MAF_OEM}   ";
_file_write "";
_file_write " Copyright foxaxu_dev_lab 2025. kernel report service";
_file_write "=========================================================================";
_ms_sleep 500;
_prts "\r                                                                 \r Collect Complete . . . ";
_cout "";
//Reset Default Log File
_file_open "{SYS_LOG}";
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/krnlrep.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/linkmgr.ca);
_$directmode;
_$nolog;

//NATVC User Explorer Link Manager
_if(!_file_exist "{NATVC_USER_INDEX}")|_goto :failfoundindex;



:OpenEditor;
_sipcfg.open "{NATVC_USER_INDEX}";
_clear;
_cout "Explorer Index Edit   ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})";
_cout "@--------------------------------------------------------@";
_textprint "{NATVC_USER_INDEX}";
_cout "@--------------------------------------------------------@";
_cout "";
_prts "Set add/edit(1) or delete(2) . use .exit back>";
_var {useropt} = _getline;
_if(_cp("{useropt}",".exit"))|_return "editok";
_if(_cp("{useropt}","exit"))|_return "editok";
_if(_cp("{useropt}","1"))|_goto :EditMode;
_if(_cp("{useropt}","2"))|_goto :DelMode;
_goto :OpenEditor;



:EditMode;
_prts "type link(add / edit) > ";
_var {useroptE} = _getline;
_if(_cp("{useroptE}",".exit"))|_goto :OpenEditor;



:EditMode2;
_prts "Link Point file > ";
_var {useroptY} = _getline;


_var {AskForCheckExistMNA} = _script <"{SYS_NROOT}/mnacore/checkexist.ca"> "{useroptY}";

_if(_cp("{useroptY}",".exit"))|_goto :OpenEditor;
_if (_cp("{AskForCheckExistMNA}","true"))|_goto :ADDmnaPATH;
_if (!_file_exist "{useroptY}")|_goto :EditMode2;

:ADDmnaPATH;

_sipcfg {useroptE} = "{useroptY}";
_cout "succeed";
_pause
_goto :OpenEditor;



:DelMode;
_prts "select edit module(Remove) > ";
_var {useroptE} = _getline;
_if(_cp("{useroptE}",".exit"))|_goto :OpenEditor;

_sipcfg.remove {useroptE};

_cout "succeed";
_pause
_goto :OpenEditor;



//ErrorPage
:failfoundindex;
_cout "LinkMgr :  File Not Found. ";
_cout "File :  {NATVC_USER_INDEX}";
_cout "Please run ntvexp.ca first";
_pause;
_return "failexp";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/linkmgr.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/logoff.ca);
_$directmode;
_$nolog;

_return "logoff";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/logoff.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ls.ca);
_$directmode;
_$nolog;

_file_list ("{temp}/lstool.txt","{rs_pathexec}");

_file_replace "{temp}/lstool.txt" ("{rs_pathexec}","");    

_cout "";
_cout "List all files";
_cout "Directory :   {rs_pathexec}";
_cout "";

_textprint "{temp}/lstool.txt";

_file_del "{temp}/lstool.txt";

_cout "";
_cout "List All File";
_cout "{SYSNAME}.{SYS_KERNEL_VID}";
_cout "";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ls.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/mnaload.ca);
_$directmode;
_$nolog;

//Detect This system is installed mna service
//Forward Service

_if(!_file_exist "{SYS_NROOT}/mnacore/mnaload.ca")|_goto :FailDetMNA;

_var {ttpFrwd_mna} = _getargs;

_cover <"{SYS_NROOT}/mnacore/mnaload.ca"> "{ttpFrwd_mna}";


:FailDetMNA;
_cout "This system has no mna app run lib";
_cout "fail load mna application";
_pause;
_exit;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/mnaload.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/mnapath.ca);
_$directmode;
_$nolog;

_var {rs_pathexec} = "{SYS_NROOT}/mnacore";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/mnapath.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/mnareset.ca);
_$directmode;
_$nolog;

_cout "";
_cout "Please wait all mna apps is trying to restore";

_var {GetAdvProc} = _getargs;

_var {IntLoad_ForMNA_R} = "1";

//Add New Package list files
_file_del "{NATVC_CONFIG}/mnalist";

_dir_list ("{NATVC_CONFIG}/mnalist","{SYS_NROOT}/SystemPackage");
_file_replace "{NATVC_CONFIG}/mnalist" ("{SYS_NROOT}/SystemPackage/","");


:MNARESETRESCAN;
_var {ReadCache} = _file_read ("{NATVC_CONFIG}/mnalist","{IntLoad_ForMNA_R}");

_if(_cp("{ReadCache}","FileNotExist"))|_goto :FailAddsPkgList;

_if(_cp("{ReadCache}","overline")) | _goto :MNARESETRESCAN_OK;

//Verify
_file_write "[RestoreMNA] Restore Package :  {ReadCache}";

//_cout "Restore package {SYS_NROOT}/SystemPackage/{ReadCache}";
_cout "";
_cout "Progress Restore... {IntLoad_ForMNA_R}    Please wait";

_if(!_file_exist "{SYS_NROOT}/SystemPackage/{ReadCache}")|_goto :MNA_NullPackRestore;

_if(!_cp("{GetAdvProc}","installonly"))|_script <"{SYS_NROOT}/mnacore/uninstall.ca"> "{ReadCache}";
_if(!_cp("{GetAdvProc}","uninstallonly"))|_script <"{SYS_NROOT}/mnacore/install.ca"> "{SYS_NROOT}/SystemPackage/{ReadCache}";

:BACKCTRESTORE;

_var {IntLoad_ForMNA_R} = _+("{IntLoad_ForMNA_R}","1");
_goto :MNARESETRESCAN;

:MNARESETRESCAN_OK;
//complete MNA Restore
_cout "";
_cout "";
_cout "All Modern App Restore Complete..";
_cout "We recommand restart your device now";
_file_del "{NATVC_CONFIG}/mnalist";
_return "ok";

:FailAddsPkgList;
_cout "";
_cout "App cannot installed because package list is missing";
_cout "";
_return "ok";

:MNA_NullPackRestore;
_cout "";
_cout "App cannot be installed because package {ReadCache} not found";
_goto :BACKCTRESTORE;

//LL
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/mnareset.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/nativeshell.ca);
_$directmode;
_$nolog;

//Data int

_var {ntsh_version} = "2107";
_var {ntsh_revision} = "103";

//GET DIRECT 

//Load Config
_if(!_file_exist "{NATVC_CONFIG}/NativeConf") | _goto :FailConfig;
_sipcfg.open "{NATVC_CONFIG}/NativeConf";
_var {StartPath} = _sipcfg StartPath;
_var {SecondPath} = _sipcfg SecondPath;
_clear;

_var {rs_pathexec} = "{StartPath}";
_if (!_dir_exist "{rs_pathexec}")|_cout "Config Error:  StartPath is not accessable. Reset to SYS_ROOT";
_if (!_dir_exist "{rs_pathexec}")|_sipcfg StartPath = '{SYS_ROOT}';
_if (!_dir_exist "{rs_pathexec}")|_var {rs_pathexec} = "{SYS_ROOT}";

_if (!_dir_exist "{SecondPath}")|_cout "Config Error:  SecondPath is not accessable. Reset to SYS_ROOT";
_if (!_dir_exist "{SecondPath}")|_sipcfg SecondPath = '{SYS_ROOT}';
_if (!_dir_exist "{SecondPath}")|_var {SecondPath} = "{SYS_ROOT}";


//Main ntsh
_cout "Natvc NativeShell.  User:{NATVC_WHOIS} ({NATVC_isAdmin})  Profile: {NATVC_USERPROFILE}";
_cout "Copyright FoxaXu_Dev_Lab (c).  All Rights Reserved.";
_cout "";
_cout "Install latest version of Natvc to get latest function. https://dev.foxaxu.com/Software/P_Natvc/";
_cout "NativeShell Config file :   {NATVC_CONFIG}/NativeConf";
:TypeNewShell;
_cout "";
_prt "NS {rs_pathexec}>";
_var {ns_type} = _getline;
_if(_cp("{ns_type}","exit"))|_return "ok";
_if(_cp("{ns_type}","system"))|_goto :exec_system_commander;
_if(_cp("{ns_type}","help"))|_goto :TypeNTSH_Helper;
_if(_cp("{ns_type}","cd"))|_goto :PathSet;
_if(_cp("{ns_type}","args"))|_goto :SetArgs;
_if(_cp("{ns_type}","version"))|_goto :VersionINFO;
_if(_cp("{ns_type}",'{varspace.null}'))|_goto :TypeNewShell;

_if(_cp("{ns_type}","clear"))| _clear;
_if(_cp("{ns_type}","clear"))| _goto :TypeNewShell;

_if(_cp("{ns_type}","clear"))| _clear;
_if(_cp("{ns_type}","clear"))| _goto :TypeNewShell;

//EXECUTE PROGRAM
_var {ns_fnd_exec} = "{ns_type}";
_if(_file_exist "{rs_pathexec}/{ns_fnd_exec}")|_goto :TYPESHELL_EXE;
_if(_file_exist "{rs_pathexec}/{ns_fnd_exec}.ca")|_var {ns_fnd_exec} = "{ns_fnd_exec}.ca";
_if(_file_exist "{rs_pathexec}/{ns_fnd_exec}")|_goto :TYPESHELL_EXE;

_var {ns_fnd_exec} = "{ns_type}";
_if(_file_exist "{SecondPath}/{ns_fnd_exec}")|_goto :S_TYPESHELL_EXE;
_if(_file_exist "{SecondPath}/{ns_fnd_exec}.ca")|_var {ns_fnd_exec} = "{ns_fnd_exec}.ca";
_if(_file_exist "{SecondPath}/{ns_fnd_exec}")|_goto :S_TYPESHELL_EXE;

_cout "";
_cout "Cannot Explain Command or not found any exist Executable file";
_cout "{ns_type} : is invaild";
_goto :TypeNewShell;



:TYPESHELL_EXE;
_var {ns_exec_back} = _script <"{rs_pathexec}/{ns_fnd_exec}"> "{RunArgs}";
_file_write "[%time%][RootShell] Root Shell Return -->  {ns_exec_back}";
_if(_cp("{ns_exec_back}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{ns_exec_back}","user_restart"))|_return "user_restart";
_if(_cp("{ns_exec_back}","user_logoff"))|_return "user_logoff";
_if(_cp("{ns_exec_back}","lock"))|_return "lock";
_if(_cp("{ns_exec_back}","shutdown"))|_return "user_shutdown";
_if(_cp("{ns_exec_back}","restart"))|_return "user_restart";
_if(_cp("{ns_exec_back}","logoff"))|_return "user_logoff";

_goto :TypeNewShell;

:S_TYPESHELL_EXE;
_var {ns_exec_back} = _script <"{SecondPath}/{ns_fnd_exec}"> "{RunArgs}";
_file_write "[%time%][RootShell] Root Shell Return -->  {ns_exec_back}";
_if(_cp("{ns_exec_back}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{ns_exec_back}","user_restart"))|_return "user_restart";
_if(_cp("{ns_exec_back}","user_logoff"))|_return "user_logoff";
_if(_cp("{ns_exec_back}","lock"))|_return "lock";
_if(_cp("{ns_exec_back}","shutdown"))|_return "user_shutdown";
_if(_cp("{ns_exec_back}","restart"))|_return "user_restart";
_if(_cp("{ns_exec_back}","logoff"))|_return "user_logoff";

_goto :TypeNewShell;


:PathSet;
_prts "Set Directory>";
_var {rs_pathexec_cache} = _getline;
_if(!_dir_exist "{rs_pathexec_cache}")|_goto :TryAdvancedSet;
_var {rs_pathexec} = "{rs_pathexec_cache}";
_goto :TypeNewShell;

:TryAdvancedSet;
_var {rs_pathexec_cache} = "{rs_pathexec}/{rs_pathexec_cache}";
_if(!_dir_exist "{rs_pathexec_cache}")|_goto :NULLPATHSET;
_var {rs_pathexec} = "{rs_pathexec_cache}";
_goto :TypeNewShell;


:NULLPATHSET;
_cout "Cannot found directory "{rs_pathexec_cache}" , this directory is not exist or acceess denind";
_cout "Set Location Failed";
_goto :TypeNewShell;


:SetArgs;
_prts "Type Execute Arguments >";
_var {RunArgs} = _getline;
_goto :TypeNewShell;


:exec_system_commander;
_cout "";
_prt "{path}>";
_var {TargetCommand} = _getline;
_if(_cp("{TargetCommand}","exit"))|_goto :TypeNewShell;
_system "{TargetCommand}";
_pause;
_goto :exec_system_commander;


:TypeNTSH_Helper;
//_cout "";
_cout "Themes:";
_cout "Natvc NativeShell Help Center";
_cout "";
_cout "What is NativeShell:";
_cout "NativeShell is a new shell console for Natvc. to improve legacy console rootshell.";
_cout "NativeShell support much new function. some function is some software was required";
_cout "Thanks your support";
_cout "";
_cout "This Help Center cannot tell you how to use nativeshell. but you can view more info";
_cout "on internet. open link https://dev.foxaxu.com/Software/P_Natvc/NTSH";
_cout "NativeShell is new project. if you have some problem. report to us. hello@foxaxu.com";
_cout "";
_cout "Online Help";
_cout "You can find some message on Developer FoxaXu. link:  https://dev.foxaxu.com";
_cout "Some command need you have administrator. make sure run nativeshell as administrator";
_cout "";
_pause;
_cout "";
_goto :TypeNewShell;


:VersionINFO;
_cout "";
_cout "NativeShell Version";
_cout "NTSH Version :   {ntsh_version}";
_cout "REVISION:  {ntsh_revision}";
_cout "";
_cout "Work System";
_cout "System :   {SYS_NAME} {SYSNAME}.{SYS_KERNEL_VID}";
_cout "Code Name:  {SYS_KERNEL_CODENAME}";
_cout "RC:  {SYS_RELEASE_Channel}";
_cout "";
_goto :TypeNewShell;


:FailConfig;
_cout "Native Shell could not start";
_cout "Your Config file is missing";
_pause;
_return "false";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/nativeshell.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/nbfmgr.ca);
//Natvc Boot Manager Tools
//Design By FoxaXu
_$directmode;
_$nolog;
_$no_err_report;

_if(_cp("{NATVC_isAdmin}","0"))|_goto :FAIL_DISALLOW;

_clear;

_var {ToolsName} = "NBFMGR";


//Load Main
:BACKMAINCONSOLE;
_clear;
_cout "NBF Boot Manager ({SYSNAME}.{SYS_KERNEL_VID})";
_if(!_cp("$BVM_VOL_LOAD","nbfload"))|_cout "WARNING. this system not use NBF to boot";
_cout "@--------------------------------------------------------@";
_cout "select mode ";
_cout "1. Create New Bootloader on device";
_cout "2. Edit old bootloader";
_cout "3. Delete Boot Loader";
_cout "";
_if(_cp("$BVM_VOL_LOAD","nbfload"))|_cout "Current Load file :  {BootVolume}/nbf/{BootDefaultOption}";
_cout "use "bootopt" on explorer. to restart to NBF Shell";
_cout "use .exit close this tool";
_cout "Copyright FoxaXu 2024 . Project NATVC";
_cout "@--------------------------------------------------------@";
_prts "select mode > ";
_var {useropt} = _getline;
_if(_cp("{useropt}","1"))|_goto :addblmode;
_if(_cp("{useropt}","2"))|_goto :editblmode;
_if(_cp("{useropt}","3"))|_goto :delblmode;
_if(_cp("{useropt}",".exit"))|_return "ok";
_goto :BACKMAINCONSOLE;



:addblmode;
_cout "Select System Disk";
_prts "SYSDRV> ";
_var {sysmaindrv} = _getline;
_if(!_file_exist "{sysmaindrv}/Natvc/System/ntvload.nbf")|_goto :FailIndex;

_cout "Set Load File Name";
_prts "SYSDRV> ";
_var {FileLoadName} = _getline;

_cout "Please wait";

_if(!_file_exist "$sys_def_disk/nbf/bootmgr.nbf")|_goto :NewBootloader;

:BackCONADD;

_file_copy("{SYS_NROOT}/nbf/NBF-Temple","$sys_def_disk/nbf/nbf/{FileLoadName}");

_sipcfg.open "$sys_def_disk/nbf/nbf/{FileLoadName}";
_sipcfg osvol = "{sysmaindrv}";
_sipcfg ospath = "Natvc";
_sipcfg osload = "Natvc/System/ntvload.nbf";

_var {GetBootSign} = _script<"{sysmaindrv}/Natvc/System/ntvload.nbf"> "getsign";

_sipcfg bootsign = "{GetBootSign}";

_sipcfg.open "$sys_def_disk/nbf/nbfload";
_sipcfg DefaultLoader = '{BootVolume}/bootmgr.nbf';
_sipcfg DefaultOption = "{FileLoadName}";

_cout "Complete";
_pause;
_goto :BACKMAINCONSOLE;



:NewBootloader;

_dir_remove "$sys_def_disk/nbf";

_dir_make "$sys_def_disk/nbf";
_dir_make "$sys_def_disk/nbf/nbf";
_dir_make "$sys_def_disk/nbf/res";

_file_copy ("{SYS_NROOT}/nbf/nbfload","$sys_def_disk/nbf/nbfload");
_file_copy ("{SYS_NROOT}/nbf/bootmgr.nbf","$sys_def_disk/nbf/bootmgr.nbf");

_file_copy ("{SYS_NROOT}/nbf/res/bootfail.txt","$sys_def_disk/nbf/res/bootfail.txt");
_file_copy ("{SYS_NROOT}/nbf/res/filelost.txt","$sys_def_disk/nbf/res/filelost.txt");
_file_copy ("{SYS_NROOT}/nbf/res/nbfshell.txt","$sys_def_disk/nbf/res/nbfshell.txt");

_goto :BackCONADD;




:editblmode;
_cout "Select Boot Disk";
_prts "Default open current system bootloader .  select boot Disk> ";
_var {bootloaderdrv} = _getline;
_if(!_file_exist "{bootloaderdrv}/nbfload")|_goto :FailIndex;

_prts "Select boot load file> ";
_var {FileLoadName} = _getline;
_if(!_file_exist "{bootloaderdrv}/nbf/{FileLoadName}")|_goto :FailIndex2;

_var {RegOpenFile} = "{bootloaderdrv}/nbf/{FileLoadName}";
_script <"{SYS_ROOT}/confedit.ca"> "openedit";
_goto :BACKMAINCONSOLE; 


:delblmode;
_cout "Select Boot Disk";
_prts "Default open current system bootloader .  select boot Disk> ";
_var {bootloaderdrv} = _getline;
_if(!_file_exist "{bootloaderdrv}/nbfload")|_goto :FailIndex;

_prts "Select boot load file> ";
_var {FileLoadName} = _getline;
_if(!_file_exist "{bootloaderdrv}/nbf/{FileLoadName}")|_goto :FailIndex2;

_var {RegOpenFile} = "{bootloaderdrv}/nbf/{FileLoadName}";

_if(_cp("{BootVolume}/nbf/{BootDefaultOption}","{RegOpenFile}"))|_goto :DEF_WARNING;

:ApplyDeleteBL;
_file_del "{RegOpenFile}";
_goto :BACKMAINCONSOLE; 


//ErrPage
:FailIndex;
_cout "This Disk is invalid System. nbfmgr cannot create a boot loader for this system";
_cout "Error : No load file on {bootloaderdrv}/nbfload";
_pause;
_goto :BACKMAINCONSOLE;


:FailIndex2;
_cout "This Disk is invalid boot data. nbfmgr cannot Edit NBF on here";
_cout "Error :  No NBF CONFIG {bootloaderdrv}/nbf/{FileLoadName} ";
_pause;
_goto :BACKMAINCONSOLE;



:FAIL_DISALLOW;
_cout "Use Admin open this tools";
_cout "nbfmgr.ca";
_return "fails";

:DEF_WARNING;
_cout "WARNING :  This boot loader is system now using boot load file";
_cout "           If you delete this boot file, Your device won't boot";
_cout "type y to Continue";
_prts "y/n (default n)>";
_var {DEFW_N} = _getline;

_if(_cp("{DEFW_N}","y"))|_goto :ApplyDeleteBL;

_goto :BACKMAINCONSOLE; 
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/nbfmgr.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvani.ca);
_$directmode;
_$nolog;

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(_cp(_sipcfg offani,"true"))|_return "ani is disabled";

_var {PlayRate} = _getargs;

_var {PLAYAVGTIME} = "70";

_if(_cp("{PlayRate}","empty"))|_var {PlayRate} = "1";

:REPLAY ANI;

_var {PlayRate} = _-("{PlayRate}","1");

_if(_<=("{PlayRate}","0"))|_goto :NullRequest;

//Play Again
_prts "\r                                          \r        █                            ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r        ████                         ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r        ████████                     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r        ████████████                 ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r        ████████████████             ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r        ████████████████████         ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r            ████████████████████     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r                ████████████████     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r                    ████████████     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r                        ████████     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r                            ████     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r                               █     ";
_ms_sleep {PLAYAVGTIME};

_prts "\r                                          \r                                     ";
_prts "\r";
_ms_sleep "200";

_if(_cp("{PlayRate}","0"))|_goto :END PLAY ANI;

_goto :REPLAY ANI;

:END PLAY ANI;
_return "playOK";


:NullRequest;
_cout "NATVC ANI Error";
_cout "Null Request :  {PlayRate}";
_return "fail play";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvani.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvd.ca);
_$directmode;
_$nolog;

_var {ntvd_playpath} = _getargs;

//UI_Play
_var _PlayCount = "0";



:start;
_var _PlayCount = _+("_PlayCount","1");
_if(!_file_exist "{ntvd_playpath}/_PlayCount")|_return "playok";
_clear;
_typefile "{ntvd_playpath}/_PlayCount";
_ms_sleep {PlaySecond};
_goto :start;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvd.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvdeploy.ca);
_$directmode;
_$nolog;

//Natvc System Deploy Toolkit

_clear;
_var {update_title} = "Starting Deploy Service";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";

_sipcfg.open "{SYS_NROOT}/config/DeploySettings";

_file_write "[%time%][NatvcDeploy] System need load OOBE Service";
_file_write "[%time%][NatvcDeploy] Prepare OOBE Service";

_var {DepResult} = _sipcfg AllowAdminUserDebug;
_if(_cp("{DepResult}","true"))|_goto :SkipDetectUserAuth;

_if(!_cp("{NATVC_isAdmin}","2"))|_goto :AuthError;
:SkipDetectUserAuth;

_var {DepResult} = _sipcfg DeployModernNatvcApps;
_if(_cp("{DepResult}","false"))|_goto :SkipInstallSystemMNA;

_clear;
_var {update_title} = "Deploy System Apps";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";
_ms_sleep "300";

_clear;
_cout "System is Deploy MNA Apps    Please wait...";
_script <"{SYS_ROOT}/mnareset.ca"> "installonly";

:SkipInstallSystemMNA;

_sipcfg.open "{SYS_NROOT}/config/DeploySettings";
_var {DepResult} = _sipcfg AutoUnlockAdminUser;
_if(_cp("{DepResult}","true"))|_clear;
_if(_cp("{DepResult}","true"))|_cout "Unlocker Administrator User...";
_if(_cp("{DepResult}","true"))|_sipcfg.open "{SYS_USERPATH}/admin/userconfig";
_if(_cp("{DepResult}","true"))|_sipcfg DisableUser = "0";

_if(_cp("{DepResult}","true"))|_sipcfg.open "{NATVC_CONFIG_USERS}";
_if(_cp("{DepResult}","true"))|_sipcfg default = "admin";
_if(_cp("{DepResult}","true"))|_cout "Complete";

_sipcfg.open "{SYS_NROOT}/config/DeploySettings";

_var {DepResult} = _sipcfg CreateUserOOBE;
_if(_cp("{DepResult}","false"))|_goto :SkipRunOOBEService;

_clear;
_var {update_title} = "Preparing OOBE User";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";
_ms_sleep "300";

_file_write "[%time%][NatvcDeploy] Load OOBE Prep";
_var _ARGS_NU_FULLNAME = "NATVC User Out of box Experience";
_var _ARGS_NU_ID = "oobe";
_var _ARGS_NU_PSWD = "@rtoobe";
_var _ARGS_NU_ADMIN = "1";

_sleep 1;
_script <"{SYS_ROOT}/usermgr.ca">"newuser";
_file_write "[%time%][NatvcDeploy] Creating OOBE User";

_file_copy ("{SYS_USERPATH}/default/autorun","{SYS_USERPATH}/oobe/autorun");
_sipcfg.open "{SYS_USERPATH}/oobe/autorun";
_sipcfg task = "{SYS_ROOT}/oobe.ca";

_sipcfg.open "{SYS_NROOT}/config/DeploySettings";

_clear;

_var {PRE_AUTOENTRY_PASSWORD} = "@rtoobe";

_file_write "[%time%][NatvcDeploy] Load OOBE Main";

_var {OOBEDEGBUG} = _script <"{NATVC_USERSVC}"> "oobe";

_file_write "[%time%][NatvcDeploy] OOBE User Logoff .  status code :  {OOBEDEGBUG}";
_file_write "[%time%][NatvcDeploy] OOBE Page Status  : {OOBE_PAGE_STATUS}";

_if(_cp("{OOBE_PAGE_STATUS}","oobe_shutdown"))|_goto :OOBE_CANCEL_PREP;
_if(_cp("{OOBEDEGBUG}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{OOBEDEGBUG}","user_restart"))|_return "user_restart";

_file_write "[%time%][NatvcDeploy] OOBE Service Closed";

:SkipRunOOBEService;

:EndPageOOBE;
_sipcfg.open "{SYS_NROOT}/config/DeploySettings";
_var {DepResult_A} = _sipcfg ModifySetupOOBEtoZero;
_var {DepResult_B} = _sipcfg EnableFastBoot;

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(_cp("{DepResult_A}","true"))|_sipcfg oobe = "0";
_if(_cp("{DepResult_B}","true"))|_sipcfg FastBoot = "1";

_free {DepResult};
_free {DepResult_A};
_free {DepResult_B};

_return "Complete";

:OOBE_CANCEL_PREP;
//Delete OOBE
_file_write "[%time%][NatvcDeploy] User Select Cancel :  OOBE Prep";
_var _ARGS_NU_FULLNAME = "NATVC User Out of box Experience";
_var _ARGS_NU_ID = "oobe";
_var _ARGS_NU_PSWD = "@rtoobe";
_var _ARGS_NU_ADMIN = "1";

_script<"{SYS_ROOT}/usermgr.ca"> "deluser";
_script<"{SYS_ROOT}/sysreset.ca"> "auto";
_cout "Close console.";
_pause;
_file_write "[%time%][NatvcDeploy] Request Shutdown Service";
_return "user_shutdown";


:AuthError;
_file_write "[%time%][NatvcDeploy][ERROR] No auth to run this service.";
_clear;
_cout "Natvc Deploy could not continue";
_cout "System Config Error:  Current User is not enough auth to run this service";
_cout "Please Try to reinstall Natvc.";
_cout "ERROR :  DEPLOY_NO_AUTH";
_file_write "[%time%][NatvcDeploy] Service Unexpected Terminate.";
_pause;
_return "user_restart";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvdeploy.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvexp.ca);
//NATVC Explorer
//Enter User Experience
_$directmode;
_$nolog;
_$no_err_report;

_var {bool_isAutoRunExec} = "0";

_file_write "[%time%][SystemExplorer] Load Explorer";
_sipcfg.open "{NATVC_CONFIG_SETUP}";

_var {Explorer_Title} = _sipcfg explorer_title;

_if(_cp("{NATVC_EXPLORER}","{NATVC_ROOTSHELL}"))|_goto :SAFEMODE_Notifications;
:SafeMode_Apply;

_var {NATVC_USER_MENU_CONFIG} = "{NATVC_USERPROFILE}/usermenu";
_var {NATVC_USER_INDEX} = "{NATVC_USERPROFILE}/userindex";
_if(!_file_exist "{NATVC_USER_INDEX}") | _file_copy ("{SYS_USERPATH}/default/userindex","{NATVC_USER_INDEX}");

//MAIN UI EXP

_file_write "[%time%][SystemExplorer] Check user status";

_if(_cp("{bool_isAutoRunExec}","1"))|_goto :SkipDetectAutoRun;
_if(_file_exist "{NATVC_USERPROFILE}/autorun")|_goto :PROCE_AutoRun;

:SkipDetectAutoRun;
_if(!_file_exist "{NATVC_USERPROFILE}/startcomplete")|_goto :LOAD_STARTREADER;


//Detect Start Reader

:ReloadExplorer;
_var {ToolsName} = "NATVC Explorer";
_free {varspace.null};


_sipcfg.open "{SYS_NROOT}/Themes/NtvexpThemes.txt";

_var {NTVEXP_AD_1} = _sipcfg TitleA;
_var {NTVEXP_AD_2} = _sipcfg TitleB;
_var {NTVEXP_AD_3} = _sipcfg TitleC;
_var {NTVEXP_AD_4} = _sipcfg TitleD;
_var {NTVEXP_AD_5} = _sipcfg TitleE;


_file_write "[%time%][SystemExplorer] Load Main";

_clear;
_if(_file_exist "{SYS_NROOT}/res/natvc-explorer.txt")|_typefile "{SYS_NROOT}/res/natvc-explorer.txt";

_if(!_file_exist "{SYS_NROOT}/res/natvc-explorer.txt")|_cout "Explorer Resources load fail";
_if(!_file_exist "{SYS_NROOT}/res/natvc-explorer.txt")|_cout "Fail load user interface {SYS_NROOT}/res/natvc-explorer.txt";
_if(!_file_exist "{SYS_NROOT}/res/natvc-explorer.txt")|_cout "";

:BACKMAINCONSOLE;
_var {ntvue.logontime} = _getclock;
_var {ntvue.logondate} = _getdate;
_var {rs_pathexec} = "{SYS_ROOT}";
_file_open "{SYS_LOG}";
_cout "";
_prt "{Explorer_Title}";
_var {NATVC_USEREXP_GET} = _getline;

_file_write "[%time%][SystemExplorer] User Execute Command -->  {NATVC_USEREXP_GET}";

//Check EXP is allow?
_if(!_file_exist "{NATVC_USERPROFILE}/useroptban")|_file_copy("{SYS_USERPATH}/default/useroptban","{NATVC_USERPROFILE}/useroptban")
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{NATVC_USEREXP_GET}";
_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_if(_cp("{callback_temp}","false")) | _goto :bancmd;

//Other
_if(_cp("{NATVC_USEREXP_GET}",'{varspace.null}'))|_goto :ReloadExplorer;
_if(_cp("{NATVC_USEREXP_GET}",".rs"))|_goto :rs_restart;
_if(_cp("{NATVC_USEREXP_GET}",".bm"))|_goto :bm_restart;
_if(_cp("{NATVC_USEREXP_GET}",".re"))|_goto :GORECOVERY;
_if(_cp("{NATVC_USEREXP_GET}",".adv"))|_goto :LoadAdvancedBootOpt;
_if(_cp("{NATVC_USEREXP_GET}",".shell")) | _goto :Open_RootShellCon;
_if(_cp("{NATVC_USEREXP_GET}","reload"))|_goto :ReloadExplorer;
_if(_cp("{NATVC_USEREXP_GET}","logoff"))|_return "user_logoff";
_if(_cp("{NATVC_USEREXP_GET}","shutdown"))|_return "user_shutdown";

_if(_cp("{NATVC_USEREXP_GET}","@shutdown"))|_var {Next_startup_fast_boot} = "-1";
_if(_cp("{NATVC_USEREXP_GET}","@shutdown"))|_return "user_shutdown";

_if(_cp("{NATVC_USEREXP_GET}","restart"))|_return "user_restart";
_if(_cp("{NATVC_USEREXP_GET}","user_logoff"))|_return "user_logoff";
_if(_cp("{NATVC_USEREXP_GET}","lock"))|_return "user_lock";
_if(_cp("{NATVC_USEREXP_GET}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{NATVC_USEREXP_GET}","user_restart"))|_return "user_restart";
_if(_cp("{NATVC_USEREXP_GET}","hiber"))|_return "user_hiber";
_if(_cp("{NATVC_USEREXP_GET}","sysfix"))|_goto :RunSysFixMode;
_if(_cp("{NATVC_USEREXP_GET}","bootopt"))|_goto :RunBootOPT;
_if(_cp("{NATVC_USEREXP_GET}","menu")) | _goto :Open_Menu;
_if(_cp("{NATVC_USEREXP_GET}","software")) | _goto :Open_Software;
_if(_cp("{NATVC_USEREXP_GET}","linkmgr"))|_goto :LinkManager;
_if(_cp("{NATVC_USEREXP_GET}","about"))|_goto :About;
_if(_cp("{NATVC_USEREXP_GET}","help")) | _goto :ListHelper;
_if(_cp("{NATVC_USEREXP_GET}","fdl_debug.crashtest")) | _goto :CrashTest;

//Detect Direct Run MNA
_var {mna_Result} = _script<"{SYS_NROOT}/mnacore/quickload.ca"> "{NATVC_USEREXP_GET}";
_if(_cp("{mna_Result}","noapp"))|_goto :CheckIndexMode;
_file_write "[System Explorer] QL Exit Result :  {mna_Result}";
_var {NATVC_USEREXP_RUN_CALLBACK} = "{mna_Result}";
_goto :Run Command;


:CheckIndexMode;
_sipcfg.open "{NATVC_USER_INDEX}";
_var {NATVC_Execute_Program} = _sipcfg {NATVC_USEREXP_GET};
_if(_cp("{NATVC_Execute_Program}",'{varspace.null}')) | _goto :SkipTestSOFTWARE;
_if(_file_exist "{NATVC_Execute_Program}") | _goto :Exec_Script;
_if(!_file_exist "{NATVC_Execute_Program}") | _goto :TestMNAWork;


:TestMNAWork;
_var {mna_Result} = _script<"{SYS_NROOT}/mnacore/quickload.ca"> "{NATVC_Execute_Program}";
_file_write "[System Explorer] QL Exit Result :  {mna_Result}";
_if(_cp("{mna_Result}","noapp"))|_goto :SkipTestSOFTWARE;
//RunOKStatus
_var {NATVC_USEREXP_RUN_CALLBACK} = "{mna_Result}";
_goto :Run Command;


:SkipTestSOFTWARE;
_file_write "[%time%][SystemExplorer][Error] userLink Return a Error -->  Unknown Command";
_cout "{NATVC_USEREXP_GET} :  Not Command or execute tool.";
_goto :BACKMAINCONSOLE;

:ListHelper;
_clear
_cout "";
_typefile "{SYS_NROOT}/res/natvc-explorer-help.txt";
_goto :BACKMAINCONSOLE;



//Function
:About;
_clear;
_typefile "{NATVC_ABOUTS_TEXT}";
_pause;
_goto :BACKMAINCONSOLE;



:LinkManager;
_file_write "[%time%][SystemExplorer] Open Link Manager";
_var {NATVC_USEREXP_RUN_CALLBACK} = _script<"{SYS_ROOT}/linkmgr.ca">;
_goto :BACKMAINCONSOLE;



:Open_RootShellCon;
_file_write "[%time%][SystemExplorer] Open Root Shell Mode";
_var {NATVC_USEREXP_RUN_CALLBACK} = _script<"{SYS_ROOT}/rootshell.ca">;

_goto :Run Command;


:Open_Software;
_prt "Open Software Link > ";
_var {NATVC_USEREXP_GET} = _getline;
_sipcfg.open "{NATVC_CONFIG_SOFTWARE}";
_var {NATVC_Execute_Program} = _sipcfg {NATVC_USEREXP_GET};
_if(_cp("{NATVC_Execute_Program}",'{varspace.null}')) | _goto :SkipTestSOFTWARE;

_if(_file_exist "{NATVC_Execute_Program}") | _goto :Exec_Script;
_if(!_file_exist "{NATVC_Execute_Program}") | _goto :SoftwareErrorNotFound;

_goto :BACKMAINCONSOLE;



:IndexNotWork;
_cout "This Index :  {NATVC_USEREXP_GET} seems not work";
_cout "Execute File Not Found";
_cout "Index Link :  "{NATVC_USEREXP_GET}" .";
_cout "File Address  :  "{NATVC_Execute_Program}" .";
_goto :BACKMAINCONSOLE;



:SoftwareErrorNotFound;
_cout "Software Error";
_cout "Execute File Not Found";
_cout "on config/SOFTWARE ... ";
_cout "Software Link :  {NATVC_USEREXP_GET} .";
_cout "File Address  :  {NATVC_Execute_Program} .";
_goto :BACKMAINCONSOLE;



:Exec_Script;
//AutoConfig Load;
_file_write "[%time%][SystemExplorer] Execute Script {NATVC_Execute_Program}";
_var {NATVC_USEREXP_RUN_CALLBACK} = _script<"{NATVC_Execute_Program}">;
_file_write "[%time%][SystemExplorer] Program is exit. callback is :  "{NATVC_USEREXP_RUN_CALLBACK}"  ";
_cout "";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","reload"))|_goto :ReloadExplorer;

:Run Command;

_file_write "[%time%][SystemExplorer] check callback operate";

//Check EXP is allow?
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{NATVC_USEREXP_RUN_CALLBACK}";

_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_file_write "[%time%][SystemExplorer] OpenLibrary(Config Get) Return value is "{callback_temp}" ";

_if(_cp("{callback_temp}","false")) | _goto :bancmd;

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".rs"))|_goto :rs_restart;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".bm"))|_goto :bm_restart;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".re"))|_goto :GORECOVERY;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".shell")) | _goto :Open_RootShellCon;

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","reload"))|_goto :ReloadExplorer;

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","logoff"))|_return "user_logoff";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","shutdown"))|_return "user_shutdown";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","restart"))|_return "user_restart";

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","lock"))|_return "user_lock";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","user_logoff"))|_return "user_logoff";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","user_restart"))|_return "user_restart";

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","hiber"))|_return "user_hiber";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","sysfix"))|_goto :RunSysFixMode;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","bootopt"))|_goto :RunBootOPT;

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","menu")) | _goto :Open_Menu;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","software")) | _goto :Open_Software;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","linkmgr"))|_goto :LinkManager;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","about"))|_goto :About;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","help")) | _goto :ListHelper;

_file_write "[%time%][SystemExplorer] No Operate need execute. back main console";

_goto :BACKMAINCONSOLE;



:Open_Menu;
//Exec Open Menu
_file_write "[%time%][SystemExplorer] Open User Menu";
_if(_cp("{NATVC_USERMENU}","0"))|_goto :FAIL_MENULOST;

_var {NATVC_USEREXP_RUN_CALLBACK} = _script<"{NATVC_USERMENU}">;

_file_write "[%time%][SystemExplorer] User Menu Callback -->  {NATVC_USEREXP_RUN_CALLBACK}";

//Check EXP is allow?
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{NATVC_USEREXP_RUN_CALLBACK}";
_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_if(_cp("{callback_temp}","false")) | _goto :bancmd;

//_cout "{NATVC_USEREXP_RUN_CALLBACK}";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","reload"))|_goto :ReloadExplorer;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","logoff"))|_return "user_logoff";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","shutdown"))|_return "user_shutdown";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","restart"))|_return "user_restart";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","hiber"))|_return "user_hiber";
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","sysfix"))|_goto :RunSysFixMode;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","bootopt"))|_goto :RunBootOPT;

_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","cmenu"))|_goto :BACKMAINCONSOLE;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".rs"))|_goto :rs_restart;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".bm"))|_goto :bm_restart;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".re"))|_goto :GORECOVERY;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}",".shell")) | _goto :Open_RootShellCon;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","software"))| _goto :Open_Software;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","about"))| _goto :About;
_if(_cp("{NATVC_USEREXP_RUN_CALLBACK}","linkmgr"))|_goto :LinkManager;
_goto :CheckIndexMode;




//Restart Device
:rs_restart;
//Restart and Open Root Shell
_file_write "[%time%][SystemExplorer] Execute -->  Restart and boot with rootshell";
_var {boot_rsmode} = "true";
_return "user_restart";



:bm_restart;
//Restart and Open Root Shell
_file_write "[%time%][SystemExplorer] Execute -->  Restart and boot with rootshell";
_var bvm_bm = "true";
_return "user_restart";


:RunBootOPT;
//Restart and Open Root Shell
_file_write "[%time%][SystemExplorer] Execute -->  Restart and Load System boot Option";
_var {NBFMenu} = "true";
_return "user_restart";


:RunSysFixMode;
//Restart and Check system 
_file_write "[%time%][SystemExplorer] Execute -->  Restart and run system automatic repair";
_var {checksysfix} = "true";
_return "user_restart";


//ERRPAGE
:FAIL_CRASH;
_clear;
_file_write "[%time%][SystemExplorer][Error] AppCrash on {NATVC_USEREXP_GET}";
_cout "NATVC Explorer Console";
_cout "APPCRASH. Last Command :  {NATVC_USEREXP_GET}";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to logoff";
_pause;
_return "user_logoff";



:NoRightCMD;
_var {NATVC_USEREXP_GET} = "NOTSET";
_goto :BACKMAINCONSOLE;



:FAIL_MENULOST;
_file_write "[%time%][SystemExplorer][Error] Load UserMenu failed :  FAIL_MENULOST";
_clear;
_cout "NATVC Explorer Console";
_cout "User Menu Error";
_cout "File Missing : {NATVC_USERMENU}";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to Back";
_pause;
_goto :BACKMAINCONSOLE;


:ERRARFileMis;
_clear;
_cout "Cannot Load Explorer auto run";
_cout "file missing :   {Explorer_AutoRun}";
_cout "press enter to back CLI";
_pause;
_goto :BACKMAINCONSOLE;


:bancmd;
_file_write "[%time%][SystemExplorer] Command is disabled by administrator";
_cout "This command is disabled by administrator";
_cout "";
_goto :BACKMAINCONSOLE;

:GORECOVERY;

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if (_cp(_sipcfg SystemRE_Status,"false"))|_goto :NORENOTICE;

_script <"{NATVC_DISK}/{Boot_OSPATH}/System/ntvrebl.ca">;

_return "user_restart";


:LoadAdvancedBootOpt;
_var {NATVC_A_RE} = "true";
_return "user_restart";


:NORENOTICE;
_cout "System no recovery environment";
_cout "Please try to use "refix" to repair";
_goto :BACKMAINCONSOLE;

:PROCE_AutoRun;
//Process Task
_var {bool_isAutoRunExec} = "1";
_sipcfg.open "{NATVC_USERPROFILE}/autorun";
_var {Explorer_AutoRun} = _sipcfg task;
_clear;
_if(!_file_exist "{Explorer_AutoRun}")|_goto :ERRARFileMis;
_var {NATVC_Execute_Program} = "{Explorer_AutoRun}";
_goto :Exec_Script;

:CrashTest;
_return "failsys";


:SAFEMODE_Notifications;
_clear;
_cout "----------------------------------------------------";
_cout "  Natvc is running on safe mode.";
_cout "  By default, the explorer will not run automatically.";
_cout "  The explorer allows the configuration of programs that start automatically.";
_cout "  We do not recommend running Explorer in safe mode.";
_cout "";
_cout "  If you want to continue running in safe mode, please enter:  runassafemode";
_cout "----------------------------------------------------";
_prts "Explorer Notification >";
_var {APPLY_SAFE} = _getline;

_if(!_cp("{APPLY_SAFE}","runassafemode"))|_return "cancel";

_goto :SafeMode_Apply;


:LOAD_STARTREADER;
_if(_file_exist "{NATVC_USERPROFILE}/autorun")|_goto :SkipDisplayStartRead;

_clear;
_typefile "{SYS_NROOT}/res/start-read.txt";
_cout "";
_pause;
:SkipDisplayStartRead;

_sipcfg.open "{NATVC_USERPROFILE}/startcomplete"
_sipcfg SNA = "true";
_goto :ReloadExplorer;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvexp.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvkernel.ca);
_$directmode;
_$nolog;

//NATVC KERNEL
//NATVC LOAD

//Test Hiber Mode
_if(_cp("{HiberMode}","1"))|_file_open "{SYS_LOG}";
_if(_cp("{HiberMode}","1"))|_typefile "{NATVC_BOOTUI}";
_if(_cp("{HiberMode}","1"))|_goto :LoadSystemMain;

//Load ENV

_if(_cp("{SysLocker}","true"))|_return "ntvkernel.ca - session fail. Try Restart your device";

_var {SysLocker} = "true";

_var {NATVC_BOOTUI} = "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-bootui.txt";
_var {NATVC_Compiler_Warning} = "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-cpw.txt";
_var {NATVC_Fail_Startup} = "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-fail-startup.txt";

_var {NATVC_FMV_REQ} = "1957";

_var {NATVC_CONFIG} = "{NATVC_DISK}/{Boot_OSPATH}/config/";

//CONFIG DIR
_var {NATVC_CONFIG_SYS}      = "{NATVC_CONFIG}/SYSTEM";
_var {NATVC_CONFIG_SOFTWARE} = "{NATVC_CONFIG}/SOFTWARE";
_var {NATVC_CONFIG_USERS}    = "{NATVC_CONFIG}/USERS";
_var {NATVC_CONFIG_SETUP}    = "{NATVC_CONFIG}/SETUP";

_var {StopStartup} = "true";
_if(!_file_exist "{NATVC_CONFIG_SYS}") | _goto :SysBootFallbackConfig;
_if(!_file_exist "{NATVC_CONFIG_USERS}") | _goto :SysBootFallbackConfig;
_if(!_file_exist "{NATVC_CONFIG_SETUP}") | _goto :SysBootFallbackConfig;
_var {StopStartup} = "false";

_sipcfg.open "{NATVC_CONFIG_SYS}";

_var {GET_SYSTIMEL} = _getdate;
_var {GET_SYSTIMEL} = _str_replace "{GET_SYSTIMEL}" ("\","");
_var {GET_SYSTIMEL} = _str_replace "{GET_SYSTIMEL}" ("/","");

_var {SYS_LOG_PATH} = _sipcfg NATVC_SYS_LOG;
_dir_full "{NATVC_DISK}/{SYS_LOG_PATH}/{GET_SYSTIMEL}/A";

//TimeBd
_var {LOG_TIMESTR} = _getclock;

_var {LOG_TIMESTR} = _str_replace "{LOG_TIMESTR}" (":","_");

_var {SYS_LOG} = "{NATVC_DISK}/{SYS_LOG_PATH}/{GET_SYSTIMEL}/StartupTime-{LOG_TIMESTR}.log";

_var {NoGUIBootOpt} = _sipcfg DebugNoGUIBoot;

_if(_cp("{NoGUIBootOpt}","1"))|_clear;

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Startup Debug is Enabled";

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Prepare System Startup Logfile";

_file_open "{SYS_LOG}";

_file_write "@ NATVC is a simulation system. based on Calcium_Project(EXE) and BVM_Project(Script). Copyright FoxaXu 2024";

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Checking System FMV";

// Check Hardware Complier
_if(!_=>("{CalciumL_FMV}","{NATVC_FMV_REQ}"))|_goto :CompilerWarning;
:BackToTryBoot;

//Check last startup;
_sipcfg.open "{NATVC_CONFIG_SETUP}";

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Detect System Status";

_var {last_startup} = _sipcfg last_startup;
_var {last_shutdown} = _sipcfg last_shutdown;

_if(!_file_exist "{BootVolume}/nbf/recovery") | _sipcfg SystemRE_Status = "false";
_if(_cp(_sipcfg SystemRE_Status,"false"))| _sipcfg SystemRE_Dir = "{NoReEnv}";

_if(_cp(_sipcfg shutdown_record,"0")) | _goto :BackToNormalBoot;
_var {Shutdown_Data} = _sipcfg shutdown;
_if(_cp("{Shutdown_Data}","1")) | _goto :failbootRecovery;

_if(_cp("{NATVC_A_RE}","true")) | _goto :failbootRecovery;

_file_write "[%time%][NATVC Boot Loader] Last shutdown is normal.";

_sipcfg shutdown = "1";

:BackToNormalBoot;

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Starting Natvc...";

//Check Is Kernel Need Update
_if(!_cp(_sipcfg startup_execute,"noexec")) | _goto :UpdateKernel;
:backUpdateKernel;

_var {temp_record_time} = _getfulltime;
_sipcfg last_startup = "{temp_record_time}";

//Display

_file_write "@ [%time%][SYSTEM] System is Startup on %fulltime%";

//Load System
_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loading {NATVC_CONFIG_SYS}";
_sipcfg.open "{NATVC_CONFIG_SYS}";

//Type Record Time

_file_write "[%time%][NATVC Boot Loader] Last Startup (Normal)  :  {last_startup} ";
_file_write "[%time%][NATVC Boot Loader] Last Shutdown (Normal) :  {last_shutdown} ";

//Check Hardware
_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loading Hardware Platform...";
_file_write "[%time%][Hardware]System Hardware :   {Hardware}";
_file_write "[%time%][Hardware]System Platform :   {Platform}";
_file_write "[%time%][Hardware]System Firmware :   {BootMethod}";
_file_write "[%time%][Hardware]System Original Equipment Manufacturer :   {MAF_OEM}";
_file_write "[%time%][Kernel][Boot] Load config/SYSTEM";

//Set System Path

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Free Memory Environment";

_free {SYS_ROOT};
_free {SYS_NROOT};
_free {PROG_PATH};
_free {SYS_USERPATH};
_free {SYS_USERDIR};

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loading System Root ...";

_var {SYS_ROOT} = _sipcfg SYS_ROOT;
_var {SYS_ROOT} = "{NATVC_DISK}/{SYS_ROOT}";
_file_write "[%time%][Kernel][Boot] System Root :  {SYS_ROOT}";
_if(!_dir_exist "{SYS_ROOT}") | _goto :SysBootFallbackConfig;


_if(_cp("{NoGUIBootOpt}","1"))| _cout "System Root : {SYS_ROOT}";

_var {SYS_NROOT} = _sipcfg SYS_NROOT;
_var {SYS_NROOT} = "{NATVC_DISK}/{SYS_NROOT}";
_if(!_dir_exist "{SYS_NROOT}") | _goto :SysBootFallbackConfig;

_var {PROG_PATH} = _sipcfg PROG_PATH;
_var {PROG_PATH} = "{NATVC_DISK}/{PROG_PATH}";

_var {SYS_USERDIR} = _sipcfg SYS_USERDIR;
_var {SYS_USERPATH} =  "{NATVC_DISK}/{SYS_USERDIR}";

_file_write "[%time%][Kernel][Boot] System Native Root :  {SYS_NROOT}";
_file_write "[%time%][Kernel][Boot] System Program Root :  {PROG_PATH}";
_file_write "[%time%][Kernel][Boot] System User Root :  {SYS_USERPATH}";

//Check Bootloader is Trusted
//Config Boot Check Files

_free {BL_Verify_F};

_if(_cp("{BootMethod}","nbfload"))   | _var {BL_Verify_F} = "{SYS_NROOT}/nbf/bootmgr.nbf";
_if(_cp("{BootMethod}","boot"))      | _var {BL_Verify_F} = "{SYS_NROOT}/sysboot/bootmgr.ca";

_file_write "[%time%][Kernel][Boot] BL Verify : {BL_Verify_F}";
_file_write "[%time%][Kernel][Boot] BL Current :  {BVM_OSBOOT}";

_if(_cp(_sipcfg BL_TrustCheck,"false"))|_goto :SkipBLTrustCheck;

_if(!_file_cp("{BVM_OSBOOT}","{BL_Verify_F}"))|_goto :BLFail_Repair;

_file_write "[%time%][Kernel][Boot] Bootloader is trusted";
_file_write "[%time%][Kernel][Boot] BL File :  {BVM_OSBOOT}";
:SkipBLTrustCheck;



//Load System Data

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loading System Data...";

_var {NATVC_EDITION} = _sipcfg Edition;

_file_write "[%time%][Kernel][Boot] System Edition :  {NATVC_EDITION}";

_var {DEF_Title} = " ";

_file_write "[%time%][Kernel][Boot] System Root (System Folder) :  {SYS_NROOT}";

_var {SYS_NAME} = _sipcfg SYS_NAME;

_var {SYS_KERNEL_VID} = _sipcfg SYS_KERNEL_VID;

_file_write "[%time%][Kernel][Boot] System Inside Version :  {SYS_KERNEL_VID}";

_var {SYSNAME} = _sipcfg SYS_REG_NAME;

_if(_cp("{NoGUIBootOpt}","1"))| _cout "System VID :  {SYSNAME} {NATVC_EDITION} ({SYS_KERNEL_VID})";

_file_write "[%time%][Kernel][Boot] System Register Name :  {SYSNAME}";

_var {SYS_KERNEL_CODENAME} = _sipcfg SYS_KERNEL_CODENAME;

_file_write "[%time%][Kernel][Boot] System Kernel CodeName :  {SYS_KERNEL_CODENAME}";

_var {SYS_RELEASE_Channel} = _sipcfg SYS_RELEASE_Channel;

_file_write "[%time%][Kernel][Boot] System Kernel Release Channel :  {SYS_RELEASE_Channel}";

_var {_NATVC_SYSID} = "natvc_sys@{SYS_KERNEL_CODENAME}_{SYS_KERNEL_VID}:{SYS_RELEASE_Channel}@Path:{SYS_NROOT}@calcium:{cav}@_FMV:{CalciumL_FMV}";

_file_write "[%time%][Kernel][Boot] User Directory is bind on :  {SYS_USERDIR}";

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loading System Services ...";

_var {NATVC_USERSVC} = _sipcfg NATVC_USERSVC;
_var {NATVC_USERSVC} = "{SYS_ROOT}/{NATVC_USERSVC}";

_var {NATVC_USERMENU} = _sipcfg NATVC_USERMENU;
_var {NATVC_USERMENU} = "{SYS_ROOT}/{NATVC_USERMENU}";

_var {NATVC_ROOTSHELL} = _sipcfg NATVC_ROOTSHELL;
_var {NATVC_ROOTSHELL} = "{SYS_ROOT}/{NATVC_ROOTSHELL}";

_var {NATVC_EXPLORER} = _sipcfg NATVC_EXPLORER;
_var {NATVC_EXPLORER} = "{SYS_ROOT}/{NATVC_EXPLORER}";

_var {NATVC_BOOT_DLOAD} = _sipcfg NATVC_BOOT_DLOAD;
_var {NATVC_SHUTDOWN_SECURE} = _sipcfg NATVC_SHUTDOWN_SECURE;

_file_write "[%time%][Kernel][Boot] Shutdown Secure Mode is :  {NATVC_SHUTDOWN_SECURE}";

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loading Base Kernel ... ";

_var {NATVC_CRASH_EXECUTE} = _sipcfg NATVC_CRASH_EXECUTE;

_var {NATVC_ABOUTS_TEXT} = _sipcfg NATVC_ABOUTS_TEXT;

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Safe Mode Detect ...";

_file_write "[%time%][Kernel][Boot] Boot Safe Mode :  {boot_rsmode}";

_var {NATVC_CRASH_TEXT} = _sipcfg NATVC_CRASH_TEXT;
_var {NATVC_CRASH_TEXT} = "{NATVC_DISK}/{NATVC_CRASH_TEXT}";

_if(_cp("{NoGUIBootOpt}","1"))|_goto :SkipLoadUIBoot2;
_if(_cp("{boot_rsmode}","true"))|_goto :SkipLoadUIBoot2;
_script <"{SYS_ROOT}/ntvani.ca">;
:SkipLoadUIBoot2;

//END

//Check SysImage

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Checking System Image...";

_if(!_dir_exist "{NATVC_DISK}/{Boot_OSPATH}/SystemImage")|_var {CALLSYSFIX} = _script<"{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca"> "new";

_if(_cp("{CALLSYSFIX}","restart"))|_goto :RESTART_OK;

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Start Complete ...";

_file_write "[%time%][Kernel][Boot] System Image Status:  OK";

_file_write "[%time%][Kernel][Boot] SYSTEM Load Memory is complete";
_file_write "[%time%][Kernel][Boot] Load Natvc Logon Service";

_if(_cp("{NoGUIBootOpt}","1"))| _ms_sleep 500;

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Loggin KERNEL USER (SYSTEM)";

_if(_cp("{NoGUIBootOpt}","1"))| _cout "Run User Service ...";

_if(_cp("{NoGUIBootOpt}","1"))| _ms_sleep 700;

_clear;

//Restore Default CS
_var {NATVC_CRASH_CODE} = "UNKNOWN_ERROR_KERNEL_BREAK";
_var {NATVC_CRASH_MESSAGE} = "Kernel Suspended and Stop Running";

_file_write "[%time%][Kernel][Boot] The Kernel Interrupt Protection Service is loaded";

//Complete
//Load SYSTEM USER
:LoadSystemMain;
//_if(_cp("{HiberMode}","1"))|_clear;
_if(_cp("{HiberMode}","1"))|_file_write "[%time%][Kernel][Boot] System Wake up from hiberfile";
_if(_cp("{HiberMode}","1"))|_file_write "@ [%time%][SYSTEM] System is Wake up on %fulltime%";

_var {HiberMode} = "0";
_var {IsAutoLogin} = true;

_file_write "[%time%][Kernel][Boot] Load -->  NATVC User Experience Service (NUES)";

_if(!_file_exist "{NATVC_USERSVC}") | _return "{NATVC_USERSVC}";
//_var {PRE_AUTOENTRY_PASSWORD} = "@nopswd";

_file_write "[%time%][Kernel][Boot] Pre Boot complete";
_file_write "[%time%][Kernel][Boot] Load Natvc Logon Service";

_var {UserSVCBUFFER} = "KernelModeDetect";

_if(_cp("{Shutdown_Data}","1")) |_dir_remove "{SYS_NROOT}/SECURITY";

_var {K_SERVICE_CALLBACK} = _script <"{NATVC_USERSVC}"> "SYSTEM";

_if(_cp("{K_SERVICE_CALLBACK}","user_logoff")) | _goto :SHUTDOWN_OK;
_if(_cp("{K_SERVICE_CALLBACK}","user_shutdown")) | _goto :SHUTDOWN_OK;
_if(_cp("{K_SERVICE_CALLBACK}","user_restart")) | _goto :RESTART_OK;

_if(!_cp("{K_SERVICE_CALLBACK}","reload_SYSTEM"))|_goto :FAILLOGIN_SYSTEM;

_var {K_SERVICE_CALLBACK} = _script <"{SYS_ROOT}/ntvlogon.ca"> "Kernel_int_load_system";

_file_write "[%time%][Kernel] NUES Service is Closed.  Argument:  {K_SERVICE_CALLBACK}";

_if(_cp("{K_SERVICE_CALLBACK}","user_logoff")) | _goto :SHUTDOWN_OK;
_if(_cp("{K_SERVICE_CALLBACK}","user_shutdown")) | _goto :SHUTDOWN_OK;
_if(_cp("{K_SERVICE_CALLBACK}","user_restart")) | _goto :RESTART_OK;

//If nues service crash

//System API
_if(_cp("{K_SERVICE_CALLBACK}","$shutdown")) | _goto :SHUTDOWN_OK;
_if(_cp("{K_SERVICE_CALLBACK}","$reboot")) | _goto :RESTART_OK;
_if(_cp("{K_SERVICE_CALLBACK}","$hiber")) | _return "$shutdown";

_if(_cp("{K_SERVICE_CALLBACK}","shutdown")) | _goto :SHUTDOWN_OK;
_if(_cp("{K_SERVICE_CALLBACK}","reboot")) | _goto :RESTART_OK;


_file_write "[%time%][Kernel][Error] NUES Report a unexpected error on Callback :  {K_SERVICE_CALLBACK}";

_file_write "[%time%][Kernel][Error] An attempt is being made to analyze the issue and generate a report";

//Exception
_if(_cp("{K_SERVICE_CALLBACK}","failsys")) | _goto :FAILSYSMODE;
_if(_cp("{K_SERVICE_CALLBACK}","fail_localsvc")) | _goto :FAILSYSLOCALSVC;
_if(_cp("{K_SERVICE_CALLBACK}","device_crash")) | _goto :BACKLOADCRASH;
_if(_cp("{K_SERVICE_CALLBACK}","user_hiber")) | _goto :NULLKERNEL_DEBUG;
_if(_cp("{K_SERVICE_CALLBACK}","ok")) | _goto :FAILSERVICEBACK;

_var {BUG_REPORT} = "ntvkernel.ca";
_var {ToolsName} = "OS Kernel";
_var {NATVC_CRASH_CODE} = "SYSTEM_SERVICE_EXCEPTION";
_var {NATVC_CRASH_MESSAGE} = "NUES Service Error. callback: {K_SERVICE_CALLBACK}";



:BACKLOADCRASH;
_file_write "[%time%][Kernel][Error] Crash Screen Load";
_file_write "[%time%][Kernel][Error] Crash Error    : {NATVC_CRASH_CODE}";
_file_write "[%time%][Kernel][Error] Error Message  : {NATVC_CRASH_MESSAGE}";
_file_write "[%time%][Kernel][Error] Last Execute Program is {ToolsName}";


//Display Crash Screen
_clear;
_if(!_file_exist "{NATVC_CRASH_TEXT}")|_goto :MissResCT;
_typefile "{NATVC_CRASH_TEXT}";
:MissResCT;
_if(!_file_exist "{NATVC_CRASH_TEXT}")|_clear;

_if(!_file_exist "{NATVC_CRASH_TEXT}")|_cout "Your device ran into problem. need restart now";
_if(!_file_exist "{NATVC_CRASH_TEXT}")|_cout "Stop Code :  {NATVC_CRASH_CODE}";
_if(!_file_exist "{NATVC_CRASH_TEXT}")|_cout "Some Resources File is missing. the crash screen could not display";
_if(!_file_exist "{NATVC_CRASH_TEXT}")|_cout "Try to reinstall Natvc";

_file_write "[%time%][Kernel][Error] Crash Report print Complete";
_file_write "[%time%][Kernel][Notice] If you are unable to resolve this issue, please contact us";

_if(!_file_exist "{SYS_ROOT}/krnlrep.ca")|_cout "[Error] Could not collect error report.   krnlrep.ca missing";
_if(!_file_exist "{SYS_ROOT}/krnlrep.ca")|_goto :SkipKRP;
_script <"{SYS_ROOT}/krnlrep.ca"> "kernelmode";
:SkipKRP;

_cout "                 Press enter to Continue";
_pause;
_file_write "[%time%][Kernel] Crash Report is saved on :  {SYS_NROOT}/MiniRep/CrashReport-{CurrentDate}-{LOG_REPSTR}.txt";
_file_write "[%time%][Kernel] try to contact develop and send them this file";
_file_write "[%time%][Kernel] System Closed(unexpected)";
_var {SysLocker} = "false";
_return "{NATVC_CRASH_EXECUTE}";
_exit;


//Error Code
:NUES_EXIT;
_clear;
_file_write "[%time%][Kernel][Error] NUES Service exit";
_cout "Failed to initialize the Natvc User Experience Service (NUES).";
_cout "Press Enter to restart NUES Service";
_pause;
_dir_remove "{SYS_NROOT}/SECURITY";
_goto :LoadSystemMain;

:FAILSYSMODE;
_file_write "[%time%][Kernel][Error][Exception] CID : failsys (unexpected)";
_var {BUG_REPORT} = "ntvkernel.ca";
_var {NATVC_CRASH_CODE} = "CRITICAL_MODULE_DIED";
_var {NATVC_CRASH_MESSAGE} = "A Critical Module unexpected died . Your device needs to be aware of this problem";
_goto :BACKLOADCRASH;

:NULLKERNEL_DEBUG;
_file_write "[%time%][Kernel][Error][Exception] CID : FailKernel_Debug (unexpected)";
_var {BUG_REPORT} = "ntvkernel.ca";
_var {NATVC_CRASH_CODE} = "INVALID_SERVICE_OPERATION";
_var {NATVC_CRASH_MESSAGE} = "This service prohibits invocation of kernel operations";
_goto :BACKLOADCRASH;

:FAILSERVICEBACK;
_file_write "[%time%][Kernel][Error][Exception] CID : FailKernel_Debug (unexpected)";
_var {BUG_REPORT} = "ntvkernel.ca";
_var {NATVC_CRASH_CODE} = "KERNEL_SERVICE_ERROR";
_var {NATVC_CRASH_MESSAGE} = "Kernel service error";
_goto :BACKLOADCRASH;

:FAILLOGIN_SYSTEM;
_file_write "[%time%][Kernel][Error][Exception] CID : SYSTEM Module User Initialization failed (unexpected)";
_var {BUG_REPORT} = "ntvkernel.ca";
_var {NATVC_CRASH_CODE} = "NTVLOGON_FATAL_ERROR";
_var {NATVC_CRASH_MESSAGE} = "Kernel service error";
_goto :BACKLOADCRASH;

:FAILSYSLOCALSVC;
_file_write "[%time%][Kernel][Error][Exception] CID : ntvlogon.ca Module Prepare Service failed (unexpected)";
_var {BUG_REPORT} = "ntvlogon.ca";
_var {NATVC_CRASH_CODE} = "LOCAL_SERVICE_FAILED";
_var {NATVC_CRASH_MESSAGE} = "System Service error";
_goto :BACKLOADCRASH;

//Load Recovery
:failbootRecovery;
_var {NATVC_A_RE} = "false";
_var {SystemStartupNotification} = "Please select boot option";

_if(_cp("{Shutdown_Data}","0")) | _goto :SkipProcessUnexp;

_file_write "[%time%][NATVC Boot Loader][Error] last shutdown is unexpected";
_var {SystemStartupNotification} = "System last shutdown is unexpected.";

:SkipProcessUnexp;
_file_write "[%time%][NATVC Boot Loader] Load Advanced Boot Option .. ";
_clear;
_typefile "{NATVC_Fail_Startup}";
_prt "Type here. default 1 >";
_var {boot_set} = _getline;
_clear;
_if( _cp ("{boot_set}" , "s") )| _goto :NBR_REPAIR;
_if( _cp ("{boot_set}" , "2") )| _goto :NBR_RS;
_if( _cp ("{boot_set}" , "3") )| _goto :NBR_RBS;
_if( _cp ("{boot_set}" , "4") )| _goto :SHUTDOWN_OK;
_if( _cp ("{boot_set}" , "5") )| _goto :GORECOVERY;
_file_write "[%time%][Kernel] Startup Recovery :  Normal Boot";
_clear;
_if(_cp("{NoGUIBootOpt}","1"))| _goto :SkipLoadUIBoot3;
_typefile "{NATVC_BOOTUI}";
:SkipLoadUIBoot3;

_goto :BackToNormalBoot;

//Other
:NBR_REPAIR;
_var {checksysfix} = "true";
_goto :RESTART_OK;


:NBR_RS;
_file_write "[%time%][Kernel] Advanced Boot Option :  Load Safe mode (rootshell)";
_var {boot_rsmode} = "true";
_clear;

_if(_cp("{NoGUIBootOpt}","1"))| _goto :SkipLoadUIBoot4;
_typefile "{NATVC_BOOTUI}";
:SkipLoadUIBoot4;

_goto :BackToNormalBoot;


:NBR_RBS;
_file_write "[%time%][Kernel] Advanced Boot Option :  Reboot and select boot device";
_var bvm_bm = "true";
_goto :RESTART_OK;

//Set Shutdown Complete
:SHUTDOWN_OK;
_free {RE_ENV};
_free {CALLSYSFIX};
_file_write "[%time%][Kernel] System Closed (Normal)";

_var {temp_record_time} = _getfulltime;

_file_write "@ [%time%][SYSTEM] System Closed on :   {temp_record_time}";


_if(!_file_exist "{NATVC_DISK}/hiberfile.txt") | _var {Next_startup_fast_boot} = "-1";

_if(_cp("{Next_startup_fast_boot}","-1"))|_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(_cp("{Next_startup_fast_boot}","-1"))|_sipcfg shutdown = "0";
_if(_cp("{Next_startup_fast_boot}","-1"))|_sipcfg last_shutdown = "{temp_record_time}";

_if(_cp("{Next_startup_fast_boot}","1"))|_sipcfg.open "script/hiberdata";
_if(_cp("{Next_startup_fast_boot}","1"))|_sipcfg hiberfile = "{NATVC_DISK}/hiberfile.txt";
_if(_cp("{Next_startup_fast_boot}","1"))|_file_write "[%time%][Kernel] Next Startup will use fast boot";

_if(_cp("{Next_startup_fast_boot}","-1"))|_file_del "script/hiberdata";
_if(_cp("{Next_startup_fast_boot}","-1"))|_file_del "{NATVC_DISK}/hiberfile.txt";
_if(_cp("{Next_startup_fast_boot}","-1"))|_file_write "[%time%][Kernel] Fast boot is turn off on next startup";

_if(_cp("{Next_startup_fast_boot}","-1"))|_dir_remove "{SYS_NROOT}/SECURITY";

_var {SysLocker} = "false";
_return "$shutdown";

:RESTART_OK;
_free {RE_ENV};
_free {CALLSYSFIX};
_file_write "[%time%][Kernel] System Closed (Normal)";
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_sipcfg shutdown = "0";
_var {temp_record_time} = _getfulltime;
_sipcfg last_shutdown = "{temp_record_time}";
_file_write "@ [%time%][SYSTEM] System Closed on :   {temp_record_time}";


_file_del "script/hiberdata";
_file_del "{NATVC_DISK}/hiberfile.txt";

_dir_remove "{SYS_NROOT}/SECURITY";

_var {SysLocker} = "false";
_return "$reboot";




:UpdateKernel;
_clear;
_file_write "[%time%][Kernel][Update] Kernel Need Update";
_var {ReCreateImage} = "true";
//Get Update Execute File
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_var {update_execute} = _sipcfg startup_execute;
_var {update_title} = _sipcfg startup_exe_title;

//restore default
_sipcfg startup_exe_title = "Prepare Update ";
_sipcfg startup_execute = "noexec";

_file_write "[%time%][Kernel][Update] Execute File :  {update_execute}";
_file_write "[%time%][Kernel][Update] Check File Exist if not back restart";

_if(!_file_exist "{update_execute}")|_goto :backUpdateKernel;
_file_write "[%time%][Kernel][Update] Start Update File :  {update_execute}";


_file_write "[%time%][Kernel][Update] Title :  {update_title}";

_clear;
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";

_file_write "[%time%][Kernel][Update] Starting Update";

_var {update_callback} = _script<"{update_execute}"> "kernel";

_script<"{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca"> "remove";

_file_write "[%time%][Kernel][Update] Update End";
_file_write "[%time%][Kernel][Update] Status :  {update_callback}";
//If Need Restart
_if(_cp("{update_callback}","restart"))|_goto :RESTART_OK;
//Back Restart
_goto :backUpdateKernel;



//ToWARNING
:CompilerWarning;
_file_write "[%time%][NATVC Boot Loader][Error] Bootloader Report a problem :  Hardware not Complier & Warning";
_file_write "[%time%][NATVC Boot Loader][Error] Update your Platform {CalciumL_FMV} to {NATVC_FMV_REQ} or Later";
_clear;
_typefile "{NATVC_Compiler_Warning}";
_prt "Type here. default 2 >";
_var {boot_set} = _getline;
_clear;
_if( _cp ("{boot_set}" , "1") )|_goto :BackToTryBoot;
_file_write "[%time%][Kernel] Startup Recovery :  Shutdown";
_goto :SHUTDOWN_OK;


:BLFail_Repair;
_file_write "[%time%][Kernel][Boot][Error] Boot loader is not trusted try repair";

_var {update_title} = "System is update bootloader";

_clear;

_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";

_sleep 2;

_file_copy("{BL_Verify_F}","{BVM_OSBOOT}");

_goto :RESTART_OK;


:GORECOVERY;
_var {NTV_AutoRepair} = "true";

_cout "Recovery";

_ms_sleep 300;

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if (_cp(_sipcfg SystemRE_Status,"false"))|_goto :RESTART_OK;

_script <"{NATVC_DISK}/{Boot_OSPATH}/System/ntvrebl.ca">;

_goto :RESTART_OK;



:SysBootFallbackConfig;
_clear;
_cout " Natvc System Loader";
_cout " Error Report";
_cout " ";
_cout "       Some system config files are abnormal";
_cout "     Have you change your device config files ?";
_cout "     If you didn`t known what happend";
_cout "     Press Enter to Run ASR (Automatic System Repair)";
_cout " ";
_cout " ";
_cout " Pree Enter (<_|) to Run ASR";
_cout " ";

_file_write "[%time%][Kernel][Boot][ERROR] Some system config files are abnormal";
_file_write "[%time%][Kernel][Boot][ERROR] System need recovery";
_file_write "[%time%][Kernel][Boot][ERROR] Startup failed ..";

_pause;
_return "configMiss";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvkernel.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvload.ca);
_$directmode;
_$nolog;
_$no_err_report;

//Natvc System Loader
//Anti rootshell load
//Remove Old Assets

_var {BootUIA} = "     "; 
_var {BootUIB} = "         ████   ████   ████   ████   ████";
_var {BootUIC} = "         ████   ████   ████   ████   ████";

//SignLoad
//$signload=nvkrnl_universal_bootsignal_fullcore_natvc;

_var {RBootSign} = "nvkrnl_universal_bootsignal_fullcore_natvc";
_var {OSLOADER_FILE} = "ntvload.ca";



//Main Loader

_var {BootMethod} = "$BVM_VOL_LOAD";

//Check System Loader is Valid 

_var {Status} = _getargs;

_if(_cp("{Status}","getsign"))|_return "{RBootSign}";

//Load Main

_if(_cp("{BootSign}",'{BootSign}'))|_goto :SkipCheckBootSign;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/{OSLOADER_FILE}";
_var {REV_ErrorCode} = "Null Boot Load Signature";
_if(!_cp("{BootSign}","{RBootSign}"))|_goto :SystemLoadError;

:SkipCheckBootSign;

_free {BootSign};

_if(_cp("{HiberMode}","1"))|_goto :SkipSessionCheck;

_if(_cp("{SysLocker}","true"))|_return "notworkonusermode";

_clear;
_typefile "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-bootui.txt";

:SkipSessionCheck;


// Load Main System 

:NatvcReloader;


//Check system load

_if(_cp("{checksysfix}","true"))|_goto :LoadSysFix; 

//Check System file is exist

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/ntvrebl.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemLoadError;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/ntvkernel.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/ntvani.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/usersvc.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "System Boot fail";


//Load System Kernel
_var {Status} = _script <"{NATVC_DISK}/{Boot_OSPATH}/System/ntvkernel.ca"> ;
_if(_cp("{Status}","$reboot"))|_return "$reboot";
_if(_cp("{Status}","$shutdown"))|_return "$shutdown";
_goto :SystemRecovery;







//System Recovery
:SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :FailFix;


:LoadSysFix;
_var {checksysfix} = "false";

//Prepare Basic Env
_var {SYS_NROOT} = "{NATVC_DISK}/{Boot_OSPATH}";
_var {SYS_ROOT} = "{NATVC_DISK}/{Boot_OSPATH}/System";

_var {Status} = _script<"{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca"> "check";
_if(_cp("{Status}","$reboot"))|_return "$reboot";
_if(_cp("{Status}","$shutdown"))|_return "$shutdown";
_goto :NatvcReloader;

//FailFix
:FailFix;
:GORECOVERY;

_var {NTV_AutoRepair} = "true";
_cout "Recovery";
_ms_sleep 300;

_sipcfg.open "{NATVC_DISK}/{Boot_OSPATH}/config/SETUP";
_if (_cp(_sipcfg SystemRE_Status,"false"))|_return "$reboot";

_script <"{NATVC_DISK}/{Boot_OSPATH}/System/ntvrebl.ca">;

_return "$reboot";




//Error Load System
:SystemLoadError;
_var bvm_bm = "true";
_clear;
_typefile "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-recovery-error.txt";
_pause;
_return "$reboot";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvload.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvload.nbf);
_$directmode;
_$nolog;
_$no_err_report;

//Natvc System Loader
//Anti rootshell load
//Remove Old Assets

//SignLoad
//$signload=nvkrnl_universal_bootsignal_fullcore_natvc;

_var {RBootSign} = "nvkrnl_universal_bootsignal_fullcore_natvc";
_var {OSLOADER_FILE} = "ntvload.nbf";



//Main Loader

_var {BootMethod} = "$BVM_VOL_LOAD";

//Check System Loader is Valid 

_var {Status} = _getargs;

_if(_cp("{Status}","getsign"))|_return "{RBootSign}";

//Load Main

_if(_cp("{BootSign}",'{BootSign}'))|_goto :SkipCheckBootSign;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/{OSLOADER_FILE}";
_var {REV_ErrorCode} = "Null Boot Load Signature";
_if(!_cp("{BootSign}","{RBootSign}"))|_goto :SystemLoadError;

:SkipCheckBootSign;

_free {BootSign};

_if(_cp("{HiberMode}","1"))|_goto :SkipSessionCheck;

_if(_cp("{SysLocker}","true"))|_return "notworkonusermode";

_clear;
_typefile "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-bootui.txt";

:SkipSessionCheck;


// Load Main System 

:NatvcReloader;


//Check system load

_if(_cp("{checksysfix}","true"))|_goto :LoadSysFix; 

//Check System file is exist

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/ntvrebl.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemLoadError;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/ntvkernel.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/ntvani.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/usersvc.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :SystemRecovery;

_var {REV_Missing_File} = "System Boot fail";


//Load System Kernel
_var {Status} = _script <"{NATVC_DISK}/{Boot_OSPATH}/System/ntvkernel.ca"> ;
_if(_cp("{Status}","$reboot"))|_return "$reboot";
_if(_cp("{Status}","$shutdown"))|_return "$shutdown";
_goto :SystemRecovery;







//System Recovery
:SystemRecovery;

_var {REV_Missing_File} = "{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca";
_if(!_file_exist "{REV_Missing_File}")|_goto :FailFix;


:LoadSysFix;
_var {checksysfix} = "false";

//Prepare Basic Env
_var {SYS_NROOT} = "{NATVC_DISK}/{Boot_OSPATH}";
_var {SYS_ROOT} = "{NATVC_DISK}/{Boot_OSPATH}/System";

_var {Status} = _script<"{NATVC_DISK}/{Boot_OSPATH}/System/sysfix.ca"> "check";
_if(_cp("{Status}","$reboot"))|_return "$reboot";
_if(_cp("{Status}","$shutdown"))|_return "$shutdown";
_goto :NatvcReloader;

//FailFix
:FailFix;
:GORECOVERY;

_var {NTV_AutoRepair} = "true";
_cout "Recovery";
_ms_sleep 300;

_sipcfg.open "{NATVC_DISK}/{Boot_OSPATH}/config/SETUP";
_if (_cp(_sipcfg SystemRE_Status,"false"))|_return "$reboot";

_script <"{NATVC_DISK}/{Boot_OSPATH}/System/ntvrebl.ca">;

_return "$reboot";




//Error Load System
:SystemLoadError;
_var bvm_bm = "true";
_clear;
_typefile "{NATVC_DISK}/{Boot_OSPATH}/res/natvc-recovery-error.txt";
_pause;
_return "$reboot";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvload.nbf);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvlogon.ca);
_$directmode;
_$nolog;

_var {ntvl_temp} = _getargs;

_if(!_cp("{ntvl_temp}","Kernel_int_load_system"))|_return "failuserauth";

//SYSTEM New Logon Service
_file_open "{SYS_LOG}";
_file_write "[%time%][Natvc Logon] The system logon service is start";


//Load User Logon Interface
:ReinitService;
_file_write "[%time%][Natvc Logon] Attempt Load User Logon Service";
_var {ntvl_process} = _script <"{SYS_ROOT}/services.ca"> "ntvue_user_logon_interface";
//Process NULI Result
_file_write "[%time%][Natvc Logon] User Logon Service is stop. code:  {ntvl_process}";

//Break Result
_if(_cp("{ntvl_process}","relogin")) | _goto :ReinitService;
_if(_cp("{ntvl_process}","noauth")) | _goto :ReinitService;

//BadResult;
_if(_cp("{ntvl_process}","logoff")) | _goto :NUES_EXIT;
_if(_cp("{ntvl_process}","user_logoff")) | _goto :NUES_EXIT;
_if(_cp("{ntvl_process}","reload_SYSTEM")) | _goto :NUES_EXIT;
_if(_cp("{ntvl_process}","runid.exit")) | _goto :NUES_EXIT;
_if(_cp("{ntvl_process}","failuserauth")) | _goto :NUES_EXIT;
_if(_cp("{ntvl_process}","ok")) | _goto :NUES_EXIT;
_return "{ntvl_process}";

:NUES_EXIT;
_file_write "[%time%][Natvc Logon] User Logon Service Initialization failed";
_file_write "[%time%][Natvc Logon] Status Error :  {ntvl_process}";
_file_write "[%time%][Natvc Logon] last program :  {ToolsName}";
_clear;
_cout "Natvc User Logon Interface  Initialization failed";
_cout " ";
_cout "  ERROR:  Logon Interface Initialization failed."
_cout "          Check the Log for details";
_cout " ";
_cout "   Press Enter to Restart Logon Interface";
_pause;
_goto :ReinitService;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvlogon.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvperf.ca);
_$directmode;
_$nolog;

_clear;
_cout "Benchmark is running ....";

_var {Natvc_perf_write} = _perftest-write;
_var {Natvc_perf_process} = _perftest-cmd;

_clear;
_cout "Complete.";
_cout "Natvc Performance Test Result";
_cout "Write/Read Performance :  {Natvc_perf_write}";
_cout "Process Performance :  {Natvc_perf_process}";
_cout "";
_cout "Benchmark system :  {SYSNAME}.{SYS_KERNEL_VID}";
_pause;
_return "complete";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvperf.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvrebl.ca);
_$directmode;
_$nolog;


//RESTART TO NTVRE

_if(!_file_exist "{BootVolume}/nbf/recovery") | _goto :NullConfigRE;

_sipcfg.open "nul";
_if(_cp("{BootMethod}","nbfload"))|_sipcfg.open "{BootVolume}/nbfload";
_if(_cp("{BootMethod}","boot"))|_sipcfg.open "{BootVolume}/boot";

_if(_cp(_sipcfg DefaultOption,"recovery"))|_goto :BootAlready;

_sipcfg DefaultOption = "recovery";
_sipcfg RollBackLoad = "{BootDefaultOption}";

_return "restart";





:BootAlready;
_cout "Recovery is Ready";
_cout "Restart your device";
_pause;
_return "false";

:NullConfigRE;
_clear;
_cout "Error Recovery";
_cout "Not Found Recovery Boot File";
_pause;
_return "false";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvrebl.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvue.ca);
// NATVC User Experience
// Default UI or LogonUI
_$directmode;
_$nolog;

//Execute

_var {ToolsName} = "UserExperience";

_file_write "[%time%][UserExperience] Load User Experience Main";

_var {ntvue.logontime} = _getclock;
_var {ntvue.logondate} = _getdate;

//MAIN UI
_file_write "[%time%][UserExperience] Check pre_execute program";


_if(_cp("{ReCreateImage}","true"))|_goto :ReCreateImage;
:BackCreateImage;

//Default Disabled
_if(!_file_exist "{NATVC_USERPROFILE}/EnabledLogonImageCheck")|_goto :DisabledLImageCheck;
_file_write "[%time%][UserExperience] Checking Logon Interface Image";
_if(!_file_cp("{SYS_ROOT}/ntvue.ca","{SYS_NROOT}/SystemImage/ntvue.ca"))|_goto :CrashNTVueErr;
//Compare File full

:DisabledLImageCheck;

_if(!_cp("{NATVC_isAdmin}","2"))|_return "failuserauth";
_if(!_file_exist "{NATVC_USERPROFILE}/LogonUI.txt")|_return "failuserauth";
_file_write "[%time%][Logon Interface] Boot Safe Mode :  {boot_rsmode}";
_if(_cp("{boot_rsmode}","true"))|_goto :O_ROOTSHELL;

//Try Save Natvc Fast Boot Dump File
_if(_file_exist "{NATVC_DISK}/hiberfile.txt")|_goto :SkipLoadFSL;
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_var {OSLoad_UseFastBoot} = _sipcfg FastBoot;
_if(!_cp("{OSLoad_UseFastBoot}","1"))|_goto :SkipLoadAllFSB;

_file_write "[%time%][UserExperience] System is trying Save Hiberfile for next startup fast boot";
_file_write "[%time%][UserExperience] Make VarSpace Snapshot.";

_envsave "{NATVC_DISK}/hiberfile.txt";

_file_write "[%time%][UserExperience] File Dump on {NATVC_DISK}/hiberfile.txt";

:SkipLoadFSL;
_file_write "[%time%][UserExperience] Fast boot is OK";
_var {Next_startup_fast_boot} = "1";
_goto :Load_Main_UserExperience;

:SkipLoadAllFSB;
_file_write "[%time%][UserExperience] Fast boot is Disabled on system settings";
_var {Next_startup_fast_boot} = "-1";
_goto :Load_Main_UserExperience;


:Load_Main_UserExperience;
//Load Main

_file_write "[%time%][UserExperience] Load Logon Interface";

_sipcfg.open "{SYS_NROOT}/Themes/NtvueThemes.txt";

_var {NTVUE_AD_1} = _sipcfg TitleA;
_var {NTVUE_AD_2} = _sipcfg TitleB;
_var {NTVUE_AD_3} = _sipcfg TitleC;

_clear;

//DETECT OOBE

_file_write "[%time%][Logon Interface] Check this system oobe";

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(_cp(_sipcfg oobe,"1")) | _goto :startOOBEuser;

_if(_cp("{IsAutoLogin}","false"))|_goto :SkipDetectAL;

_sipcfg.open "{NATVC_CONFIG_USERS}";
_var {sys_autologin} = _sipcfg default;
_if(!_cp("{sys_autologin}","@"))| _goto :AutoLoginUserA;

:SkipDetectAL;

:BACKMAINTEXT;
//GET LOGON THEMES

_var {ntvue.logontime} = _getclock;
_var {ntvue.logondate} = _getdate;

_var {USER_REQ_LOGON} = "{NULLUSER}";
_clear
_typefile "{SYS_NROOT}/res/natvc-ntvue.txt";
_file_write "[%time%][Logon Interface] Wait User Operation";
_prt "Type User Name>";
_var {USER_REQ_LOGON} = _getline;

_if(_cp("{USER_REQ_LOGON}","{NULLUSER}"))|_goto :NE_ERR_NOTTYPE;
_if(_cp("{USER_REQ_LOGON}","restart"))|_goto :UE_RESTART_API;
_if(_cp("{USER_REQ_LOGON}","shutdown"))|_goto :UE_SHUTDOWN_API;
_if(_cp("{USER_REQ_LOGON}","apiexit"))|_return "$shutdown";
_if(_cp("{USER_REQ_LOGON}",'{varspace.null}'))|_goto :NE_ERR_NOTTYPE;

:AutoLoginUserLoadM;

//BLOCK Illegal Request
_if(_cp("{USER_REQ_LOGON}","SYSTEM"))|_goto :USERFAIL_NOUSER;
_if(_cp("{USER_REQ_LOGON}","default"))|_goto :USERFAIL_NOUSER;
_if(_cp("{USER_REQ_LOGON}","LOCAL_SERVICE"))|_goto :USERFAIL_NOUSER;
//END

_file_write "[%time%][Logon Interface] Run User Service...";

_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-loggin.txt";

//Check user is exist ?
_sipcfg.open "{NATVC_CONFIG_USERS}";
_var {NATVC_USERPROFILE} = _sipcfg {USER_REQ_LOGON};

_if(_cp("{NoGUIBootOpt}","1"))|_cout "Load User Service";

_if(_cp("{NATVC_USERPROFILE}",'{varspace.null}')) | _goto :USERFAIL_NOUSER;

_if(_cp("{NoGUIBootOpt}","1"))| _goto :SkipPlayLogonANI;
_if(!_file_exist "{SYS_NROOT}/SECURITY/{USER_REQ_LOGON}.nuslc")|_script <"{SYS_ROOT}/ntvani.ca">;
:SkipPlayLogonANI;

_file_write "[%time%][Logon Interface] Load System User";
_if(_cp("{NoGUIBootOpt}","1"))|_cout "Waitting User Service";
  //_cout "Waitting User Service";
_var {NATVC_isAdmin} = "2";
_var {USER_UE_CALLBACK} = _script <"{NATVC_USERSVC}"> "{USER_REQ_LOGON}";

_if(_cp("{USER_UE_CALLBACK}","loginfail"))|_goto :BACKMAINTEXT;

_file_write "[%time%][Logon Interface] User logoff with argument :  {USER_UE_CALLBACK}";

_if(_cp("{USER_UE_CALLBACK}","reload_SYSTEM"))|_goto :UE_LOGOFF_API;
_if(_cp("{USER_UE_CALLBACK}","logoff"))|_goto :UE_LOGOFF_API;
_if(_cp("{USER_UE_CALLBACK}","user_logoff"))|_goto :UE_LOGOFF_API;
_if(_cp("{USER_UE_CALLBACK}","user_shutdown"))|_goto :UE_SHUTDOWN_API;
_if(_cp("{USER_UE_CALLBACK}","user_restart"))|_goto :UE_RESTART_API;
_if(_cp("{USER_UE_CALLBACK}","user_hiber"))|_goto :HiberClose;
_if(_cp("{USER_UE_CALLBACK}","ok"))|_goto :UE_LOGOFF_API;

_return "{USER_UE_CALLBACK}";


//TEXTPRINT
:ReloadSystemUser;
_file_write "[%time%][Logon Interface] Reload System User";

_clear;


_var {NATVC_REQ_LOGIN} = "SYSTEM";

_return "relogin";


:AutoLoginUserA;
_var {USER_REQ_LOGON} = _sipcfg default;
_file_write "[%time%][Logon Interface] Config Autologin User :  {USER_REQ_LOGON}";
_var {IsAutoLogin} = "false";
_goto :AutoLoginUserLoadM;


:O_ROOTSHELL;
//OPEN ROOT SHELL
_file_write "[%time%][Logon Interface] Startup as safemode (rootshell)";
_clear;
_cout "{SYSNAME} {NATVC_EDITION}.  CodeName : {SYS_KERNEL_CODENAME}";
_cout "Version :  {SYSNAME}.{SYS_KERNEL_VID}   Build :  {SYS_RELEASE_Channel}";
_cout "This system is booting in safe mode - Boot firmware :  {BootMethod}";
_sleep 5;


_file_write "[%time%][Logon Interface] Set Auto Execute Program";

_var {NATVC_EXPLORER} = {NATVC_ROOTSHELL};
_var {boot_rsmode} = "false";
_var {DEF_Title} = "NATVC SafeMode";
_var {IsAutoLogin} = "false";

_goto :BACKMAINTEXT;


:ShellMissing;
_file_write "[%time%][Logon Interface][Error] Fail load rootshell ";
_clear;
_cout "NATVC User Experience";
_cout "Fail Load Root Shell {NATVC_ROOTSHELL}";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Please use normal boot to login";
_pause;
_if(_cp("{NATVC_WHOIS}","SYSTEM"))|_return "$shutdown";
_if(_cp("{NATVC_WHOIS}","SystemShell"))|_return "$shutdown";
_if(_cp("{NATVC_WHOIS}","LOCAL_SERVICE"))|_return "$shutdown";
_file_write "[%time%][Logon Interface] System Closed";
_return "$shutdown";


:UE_LOGOFF_API;
_if(_cp("{NATVC_DisableUser}","1"))|_goto :ReloadSystemUser;
_var {USER_REQ_LOGON} = "{NATVC_WHOIS}";
_clear
_file_write "[%time%][UserExperience] UserSvc Callback : user_logoff";
_clear;
_if(!_file_exist "{SYS_NROOT}/SECURITY/{NATVC_WHOIS}.nuslc")|_typefile "{SYS_NROOT}/res/natvc-ntvue-logoff.txt";
_if(!_file_exist "{SYS_NROOT}/SECURITY/{NATVC_WHOIS}.nuslc")|_script <"{SYS_ROOT}/ntvani.ca">;
_clear;
_goto :ReloadSystemUser;

:UE_RESTART_API;
_clear;
_file_write "[%time%][UserExperience] UserSvc Callback : user_restart";
_if(_cp("{boot_rsmode}","true")) | _goto :UE_WAIT_RESTART_API;
//Check Shutdown Execute
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(!_cp(_sipcfg shutdown_execute,"noexec")) | _goto :startUpdater;

:BackRestartMode;

_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-restart.txt";
_script <"{SYS_ROOT}/ntvani.ca"> "1";
_if(_cp("{NATVC_SHUTDOWN_SECURE}","1")) | _goto :UE_RESTART_API_SECURE;
_return "$reboot";

:UE_WAIT_RESTART_API;
_clear;
_file_write "[%time%][UserExperience] UserSvc Callback : user_restart / wait_screen";
_typefile "{SYS_NROOT}/res/natvc-ntvue-wait.txt";
_sleep 1;
_if(_cp("{NATVC_SHUTDOWN_SECURE}","1")) | _goto :UE_RESTART_API_SECURE;
_return "$reboot";


:UE_RESTART_API_SECURE;
_file_write "[%time%][UserExperience] Secure Shutdown Report.";
_clear;
_cout "Now. Press any Key to Restart. All Application is closed. (Secure Shutdown)";
_pause;
_file_write "[%time%][UserExperience] System Restart.";
_return "$reboot";

:UE_SHUTDOWN_API;
_file_write "[%time%][UserExperience] UserSvc Callback : user_shutdown";
_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-shutdown.txt";
_if(_cp("{Next_startup_fast_boot}","-1"))|_script <"{SYS_ROOT}/ntvani.ca"> "1";
_if(_cp("{NATVC_SHUTDOWN_SECURE}","1")) | _goto :UE_SHUTDOWN_API_SECURE;
_file_write "[%time%][UserExperience] System Shutdown";
_return "$shutdown";

:UE_SHUTDOWN_API_SECURE;
_file_write "[%time%][UserExperience] Secure Shutdown Report.";
_clear;
_cout "Now. You can close this Device. All Application is closed. (Secure Shutdown)";
_pause;
_return "$shutdown";


:HiberClose;
_file_write "[%time%][UserExperience] System Load Hiber Mode";
_file_write "[%time%][UserExperience] Make VarSpace Snapshot.";
_envsave "{NATVC_DISK}/hiberfile.txt";
_file_write "[%time%][UserExperience] Save Snapshot on {NATVC_DISK}/hiberfile.txt";
_sipcfg.open "script/hiberdata";
_sipcfg hiberfile = "{NATVC_DISK}/hiberfile.txt";
_file_write "@ [%time%][SYSTEM] System is HiberMode on %fulltime%";
_return "$hiber";


//ERRPAGE
:NE_ERR_NOAUTH;
_clear;
_file_write "[%time%][UserExperience][Error] Forbidden Run this service";
_cout "NATVC User Experience";
_cout "This User is not allowed run this service";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Please try to reboot and restart";
_pause;
_if(_cp("{NATVC_WHOIS}","SYSTEM"))|_return "$shutdown";
_goto :ReloadSystemUser;

:NE_ERR_NOTALLOW;
_file_write "[%time%][UserExperience][Error] Report : NotAllow";
_clear;
_cout "NATVC User Experience";
_cout "This User is not allowed logon.  User Name : "{USER_REQ_LOGON}". ";
_cout "Your sign-in request was intercepted";
_cout "Press Enter key to back";
_pause;
_goto :BACKMAINTEXT;

:NE_ERR_NOTTYPE;
_file_write "[%time%][UserExperience][Error] No Type Detected";
_var {USER_REQ_LOGON} = "NOT SELECT";
_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-notype.txt";
_pause;
_goto :BACKMAINTEXT;


//OOBE MANAGER
:startOOBEuser;
//Load System Deploy
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_var {Natvc_Deploy_Program} = _sipcfg SystemDeploy;
_if(!_file_exist "{Natvc_Deploy_Program}")|_goto :FailDetectDeployProg;

_var {Deploy_callback} = _script <"{Natvc_Deploy_Program}">;


_if(_cp("{Deploy_callback}","oobe_shutdown"))|_goto :UE_SHUTDOWN_API;
_if(_cp("{Deploy_callback}","user_shutdown"))|_goto :UE_SHUTDOWN_API;
_if(_cp("{Deploy_callback}","user_restart"))|_goto :UE_RESTART_API;

_file_write "[%time%][UserExperience][Report] Deploy Service Exit,  Status Code :  {Deploy_callback}";

_clear;
_goto :ReloadSystemUser;

:FailDetectDeployProg;
_file_write "[%time%][UserExperience][Error] Deploy Service Failed :  {Natvc_Deploy_Program}";
_clear;
_cout "Natvc Setup Could not continue";
_cout "System Deploy Program is missing or unable load";
_cout "try to reinstall natvc or use third party software deploy natvc";
_cout "ERROR :  DEPLOY_ERROR_EXECUTE";
_pause;
_return "$reboot";


//Update API
:startUpdater;
_file_write "[%time%][UserExperience] System has a Update need install";
_var {ReCreateImage} = "true";
//Get Update Execute File
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_var {update_execute} = _sipcfg shutdown_execute;
_var {update_title} = _sipcfg shutdown_exe_title;

//restore default
_sipcfg shutdown_exe_title = "Please Wait. Prepare Update";
_sipcfg shutdown_execute = "noexec";

_file_write "[%time%][UserExperience][Update] Execute File :  {update_execute}";
_file_write "[%time%][UserExperience][Update] Check File Exist if not back restart";

_if(!_file_exist "{update_execute}")|_goto :BackRestartMode;
_file_write "[%time%][UserExperience][Update] Start Update File :  {update_execute}";
_file_write "[%time%][UserExperience][Update] Title :  {update_title}";

_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-updater.txt";

_file_write "[%time%][UserExperience][Update] Starting Update";

_var {update_callback} = _script<"{update_execute}"> "autoupdate";

_file_write "[%time%][UserExperience][Update] Update End";
_file_write "[%time%][UserExperience][Update] Status :  {update_callback}";

//Back Restart
_goto :BackRestartMode;


:ReCreateImage;
_var {ReCreateImage} = "false";
_script <"{SYS_ROOT}/sysfix.ca"> "remove";
_script <"{SYS_ROOT}/sysfix.ca"> "new";
_goto :BackCreateImage;


:CrashNTVueErr;
_file_write "[%time%][UserExperience][Error] Unexpected terminate .. ";
_var {BUG_REPORT} = "ntvue.ca";
_var {NATVC_CRASH_CODE} = "NTVUE_FATAL_ERROR";
_var {NATVC_CRASH_MESSAGE} = "Ntvue Service unexpected exit ,  try use sysfix to repair your system";
_return "device_crash";

:USERFAIL_NOUSER;
_file_write "[%time%][UserExperience][Error] Fail load user. user not exist";
_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-nouser.txt"
_pause;
_goto :BACKMAINTEXT;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvue.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/ntvupd.ca);
//Natvc Update
//Host Service
_$directmode;
_$nolog;

_var {ToolsName} = "Update Program";

_file_write "[%time%][NATVC Update] Load Main";

_clear;

_cout "Natvc Update is starting...";
_file_write "[%time%][NATVC Update] Service loading";

_if(!_file_exist "{SYS_NROOT}/SystemUpdate/nusp/setupworker.ca")|_goto :Download_NUSP;
:defaultMain;
_file_write "[%time%][NATVC Update] Load NUSP";
_if(!_file_exist "{SYS_NROOT}/SystemUpdate/nusp/setupworker.ca")|_goto :NUSP_EXEC_FAIL;
_file_write "[%time%][NATVC Update] NUSP Service loading";
_var {NUSP_STATUS_CODE} = _script <"{SYS_NROOT}/SystemUpdate/nusp/setupworker.ca">;

_file_write "[%time%][NATVC Update] NUSP Status Code :  {NUSP_STATUS_CODE}";
_file_write "[%time%][NATVC Update] Service Stop";

_return "ok";

:Download_NUSP;
_sipcfg.open "{NATVC_CONFIG}/UPDATE";
_var {NUSP_GET} = _sipcfg NUSP_GET;

_cout "Downloading NUSP...";
_file_write "[%time%][NATVC Update] Downloading NUSP :  {NUSP_GET}";
_cout "GET FROM :   {NUSP_GET}";

_if(!_dir_exist "{SYS_NROOT}/SystemUpdate/downloading")|_dir_full "{SYS_NROOT}/SystemUpdate/downloading/example";
_if(_file_exist "{SYS_NROOT}/SystemUpdate/downloading/nusp_package.cstp")|_file_del "{SYS_NROOT}/SystemUpdate/downloading/nusp_package.cstp";

_url_get ("{NUSP_GET}","{SYS_NROOT}/SystemUpdate/downloading/nusp_package.cstp");
_file_write "[%time%][NATVC Update] Verifying NUSP";
_if(!_file_exist "{SYS_NROOT}/SystemUpdate/downloading/nusp_package.cstp")|_goto :ERR_NUSP;
_file_uncstp ("{SYS_NROOT}/SystemUpdate/downloading/nusp_package.cstp","{SYS_NROOT}/SystemUpdate/nusp");
_goto :defaultMain;


:ERR_NUSP;
_file_write "[%time%][NATVC Update][Error] NUSP Download failed.";
_clear;
_cout "Download NUSP failed";
_cout "Check your internet and try again";
_pause;
_return "ok";

:NUSP_EXEC_FAIL;
_file_write "[%time%][NATVC Update][Error] NUSP File missing...";
_clear;
_cout "NUSP Core file missing";
_cout "no setupworker.ca";
_cout "Use diskclean to redownload NUSP";
_pause;
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/ntvupd.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/oobe.ca);
//NATVC Explorer
//Enter User Experience
_$directmode;
_$nolog;

_var {ToolsName} = "NATVC_OOBE_Service";

//Only Run on oobe user

_file_write "[%time%][OOBE] Loading";

//MAIN UI EXP
_if(!_cp("{NATVC_isAdmin}","1"))|_return "failuserauth";
_if(!_cp("{NATVC_WHOIS}","oobe"))|_return "failuserauth";

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_var {OOBEQUICK} = _sipcfg oobequick;

//MAIN Header
:SkipSecureDetect;
:ReloadExplorer;
_if(_cp("{OOBEQUICK}","1")) | _goto :Server Page;

_clear;
_sleep 2;

//Open Load Screen..
_typefile "{SYS_NROOT}/res/natvc-oobe-start.txt";
_script <"{SYS_ROOT}/ntvani.ca"> "1";

:BACKMAINCONSOLE;
_file_write "[%time%][OOBE] Load Main";
_clear;
_typefile "{SYS_NROOT}/res/natvc-oobe-welcome.txt";
_pause;
_clear;

//Open EULA.
_typefile "{SYS_NROOT}/res/natvc-eula.txt";
_pause;

_var {OOBE_PAGE_STATUS} = "oobe_unknown";

//Create New User
:CreateUserPage;
_clear;
//Open NEW USER.
_typefile "{SYS_NROOT}/res/natvc-oobe-user.txt";

//WRITE MAIN NAME
:RESET_FULLNAMETYPE;
_prt "Write your full name >";
_var _ARGS_NU_FULLNAME = _getline;
_if(_cp("_ARGS_NU_FULLNAME","{varspace.null}"))|_goto :RESET_FULLNAMETYPE;
_if(_cp("_ARGS_NU_FULLNAME","@oobereload"))|_goto :ReloadExplorer;
_if(_cp("_ARGS_NU_FULLNAME","@loaddebug"))|_return "oobeexit";
_if(_cp("_ARGS_NU_FULLNAME","@oobecancel"))|_goto :ConfigCANCEL;
_if(_cp("_ARGS_NU_FULLNAME","@restart"))|_return "restart";
_if(_cp("_ARGS_NU_FULLNAME","@shutdown"))|_return "shutdown";
_if(_cp("_ARGS_NU_FULLNAME","@skipoobe"))|_goto :EndPageOOBE;


//WRITE ID
:FORBIDDEN;
_prt "Write your user id (no space bar) >";
_var _ARGS_NU_ID = _getline;

_if(_cp("_ARGS_NU_ID","@oobereload"))|_goto :ReloadExplorer;

_if(_cp("_ARGS_NU_ID",'SYSTEM'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'SystemShell'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'admin'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'oobe'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'default'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'{varspace.null}'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'@'))|_goto :FORBIDDEN;

//GET PASSWORD
:invalidPasswordType;
_prt "Write your user password (If you do not want set password. press enter) >";
_var _ARGS_NU_PSWD = _getline;
_if(_cp("_ARGS_NU_PSWD",'{varspace.null}'))|_var _ARGS_NU_PSWD = "@nopswd";
_if(_cp("_ARGS_NU_PSWD",'@servicemode'))|_goto :invalidPasswordType;

_var _ARGS_NU_ADMIN = "1";

_script<"{SYS_ROOT}/usermgr.ca"> "newuser";
_if(!_dir_exist "{SYS_USERPATH}/_ARGS_NU_ID")|_goto :UserCreateFailed_RETRY;
_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg default = "_ARGS_NU_ID";


:EndPageOOBE;
_sipcfg.open "{SYS_NROOT}/config/DeploySettings";
_var {DepResult_A} = _sipcfg ModifySetupOOBEtoZero;
_var {DepResult_B} = _sipcfg EnableFastBoot;

//Write Register
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(_cp("{DepResult_A}","true"))|_sipcfg oobe = "0";
_if(_cp("{DepResult_B}","true"))|_sipcfg FastBoot = "1";

_var {OOBE_PAGE_STATUS} = "oobe_done";
_clear;
//Open Endpage..
_typefile "{SYS_NROOT}/res/natvc-oobe-end.txt";
_pause;
//Delete OOBE
_var _ARGS_NU_FULLNAME = "NATVC User Out of box Experience";
_var _ARGS_NU_ID = "oobe";
_var _ARGS_NU_PSWD = "@rtoobe";
_var _ARGS_NU_ADMIN = "1";

_script<"{SYS_ROOT}/usermgr.ca"> "deluser";

_clear;

_return "logoff";


:Open_Shell;
_script <"{SYS_ROOT}/rootshell.ca">;
_goto :ReloadExplorer;


//ERRPAGE
:FAIL_CRASH;
_clear;
_cout "NATVC USER OOBE";
_cout "APPCRASH. Last Command :  {NATVC_USEREXP_GET}";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to logoff";
_pause;
_return "user_logoff";


:FAIL_DISALLOW;
_clear;
_cout "NATVC USER OOBE";
_cout "For system security reasons, current users cannot run Explorer";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to logoff";
_pause;
_return "user_logoff";

:FAIL_NOSCRIPTAUTH;
_clear;
_cout "NATVC USER OOBE";
_cout "This User Authority is not allowed run any script";
_cout "Please use administrator try again";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to Back";
_pause;
_goto :BACKMAINCONSOLE;

:NoRightCMD;
_var {NATVC_USEREXP_GET} = "NOTSET";
_goto :BACKMAINCONSOLE;


:FAIL_USERERR;
_clear;
_cout "NATVC USER OOBE";
_cout "This User not allowed Run OOBE";
_cout "You can run sysreset.ca first and restart your device";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to Back";
_pause;
_return "fail";


:UserCreateFailed_RETRY;
_clear;
_cout "   Something went wrong";
_cout "Your user is create failed";
_cout "maybe your type is invalid";
_cout "or type has Illegal Path";
_pause:
_goto :CreateUserPage;

//Hidden
:LoadDebugUser;

_var _ARGS_NU_FULLNAME = "Debug User";
_var _ARGS_NU_ID = "debugmode";
_var _ARGS_NU_PSWD = "@rtoobe";
_var _ARGS_NU_ADMIN = "1";

_script<"{SYS_ROOT}/usermgr.ca"> "newuser";

_script<"{SYS_ROOT}/usermgr.ca"> "login";

_script<"{SYS_ROOT}/usermgr.ca"> "deluser";

_goto :ReloadExplorer;


:ConfigCANCEL;
_var {OOBE_PAGE_STATUS} = "oobe_shutdown";
_return "shutdown";


:Server Page;
_clear;
_cout "Config your device";
_cout "";
_cout "Set your server password";
_prts "Administrator Password > ";
_var {ServerPSWD} = _getline;
_if(_cp("{ServerPSWD}",'@oobecancel'))|_goto :ConfigCANCEL;
_if(_cp("{ServerPSWD}",'@restart'))|_return "restart";
_if(_cp("{ServerPSWD}",'@shutdown'))|_return "shutdown";
_if(_cp("{ServerPSWD}",'{varspace.null}'))|_goto :MustPassword;

_sipcfg.open "{SYS_USERPATH}/admin/userconfig";

_sipcfg UserPassword = "{ServerPSWD}";
_sipcfg DisableUser = "0";

_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg default = "admin";

_clear;
_cout "Please wait ...";
_cout "Apply your settings ...";
_cout "";
_script <"{SYS_ROOT}/ntvani.ca"> "1";

_clear;
_goto :EndPageOOBE;


:MustPassword;
_clear;
_cout "For Security reason, you must set password";
_cout "This user is system manager";
_pause;
_goto :Server Page;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/oobe.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/powermenu.ca);
_$directmode;
_$nolog;

_clear;
_cout "What do you want to do";
_cout "    1. Shutdown Device";
_cout "    2. Restart Device";
_cout "    3. Switch User";
_cout "    4. Logoff User";
_cout "    Press [Enter] to Back";
_cout "";
_cout "Advanced User Menu";
_var {pwMenu} = _getline;
_if(_cp("{pwMenu}","1"))|_return "user_shutdown";
_if(_cp("{pwMenu}","2"))|_return "user_restart";
_if(_cp("{pwMenu}","3"))|_return "lock";
_if(_cp("{pwMenu}","4"))|_return "user_logoff";
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/powermenu.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/refix.ca);
_$directmode;
_$nolog;

//Recovery Fix

_var {ReDir} = _getargs;

_if(!_file_exist "{ReDir}/Recovery/re.nbf")|_goto :NoNRBLoad;

_if(_cp("{BootMethod}","nbfload"))|_file_copy("{SYS_NROOT}/nbf/NBF-Temple","script/vdisk/nbf/nbf/recovery");
_if(_cp("{BootMethod}","boot"))|_file_copy("{SYS_NROOT}/nbf/NBF-Temple","script/vdisk/sysboot/nbf/recovery");


_sipcfg.open "{ReDir}/Recovery/re.nbf";
_var {refix_getsign} = _sipcfg signload;

_if(_cp("{BootMethod}","nbfload"))|_file_del "script/vdisk/nbf/nbf/recovery";
_if(_cp("{BootMethod}","boot"))|_file_del "script/vdisk/sysboot/nbf/recovery";

_if(_cp("{BootMethod}","nbfload"))|_sipcfg.open "script/vdisk/nbf/nbf/recovery";
_if(_cp("{BootMethod}","boot"))|_sipcfg.open "script/vdisk/sysboot/nbf/recovery";

_sipcfg osvol = "{ReDir}";
_sipcfg ospath = "Recovery";
_sipcfg osload = "Recovery/re.nbf";
_sipcfg bootsign = "{refix_getsign}";

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_sipcfg SystemRE_Status = "true";
_sipcfg SystemRE_Dir = "{ReDir}";

_file_del "{ReDir}/Recovery/bindos";
_sipcfg.open "{ReDir}/Recovery/bindos";
_sipcfg OSDIR="{osvolume}";

_cout "Recovery Environment is OK";
_if(_cp("{BootMethod}","nbfload"))|_cout "Boot dat file is copy on script/vdisk/nbf/nbf/recovery";
_if(_cp("{BootMethod}","boot"))|_cout "Boot dat file is copy on script/vdisk/sysboot/nbf/recovery";

_return "true";


:NoNRBLoad;
_cout "Recovery Environment Fix Tool";
_cout "args = Re Dir";
_cout "May be you are not type vaild system recovery path";
_return "false";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/refix.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/restart.ca);
_$directmode;
_$nolog;

_return "restart";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/restart.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/rootshell.ca);
// NATVC ROOT SHELL
// Only Running on SYSTEM
_$directmode;
_$nolog;

_var {ToolsName} = "ROOTSHELL";

_var {boot_rsmode} = "false"; 
_file_write "[%time%][RootShell] Load Root shell";

_var {RunArgs} = "RootShell";

_var {rs_pathexec} = "{SYS_ROOT}";

//Load Main
_clear
_file_write "[%time%][RootShell] Load Main";
:BACKMAINTEXT;
_var {USER_REQ_LOGON} = "{NULLUSER}";
_clear
_cout "FDL. {SYS_NAME} {SYSNAME} [Version: {SYSNAME}.{SYS_KERNEL_VID}]";
_cout "(c)FoxaXu Dev Lab. All rights reserved.";


:RESET SHELL MODE;
_file_open "{SYS_LOG}";
_var {USER_REQ_LOGON} = "";
_cout "";
_file_write "[%time%][RootShell] wait User Operation";
_prt "@{NATVC_WHOIS}:{rs_pathexec}/>";
_var {USER_REQ_LOGON} = _getline;
_var {UEL_OriginType} = "{USER_REQ_LOGON}";

//Check EXP is allow?
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{USER_REQ_LOGON}";
_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_if(_cp("{callback_temp}","false")) | _goto :bancmd;


_if(_cp("{USER_REQ_LOGON}",".exit"))|_return "ok";
_if(_cp("{USER_REQ_LOGON}","exit"))|_return "ok";
_if(_cp("{USER_REQ_LOGON}","cd"))|_goto :PathSet;
_if(_cp("{USER_REQ_LOGON}","path"))|_goto :PathSet;
_if(_cp("{USER_REQ_LOGON}","return"))|_goto :return;
_if(_cp("{USER_REQ_LOGON}","args"))|_goto :SetArgs;
_if(_cp("{USER_REQ_LOGON}","help"))|_goto :ListHelp;
_if(_cp("{USER_REQ_LOGON}","log"))|_goto :ListLogFile;
_if(_cp("{USER_REQ_LOGON}","about"))|_goto :About;
_if(_cp("{USER_REQ_LOGON}","clear"))|_goto :ClearConsole;
_if(_cp("{USER_REQ_LOGON}","analysis"))|_goto :NewAnalysis;
_if(_cp("{USER_REQ_LOGON}",'{varspace.null}'))|_goto :RESET SHELL MODE;

_if(_cp("{USER_REQ_LOGON}","shutdown"))|_return "user_shutdown";
_if(_cp("{USER_REQ_LOGON}","restart"))|_return "user_restart";
_if(_cp("{USER_REQ_LOGON}","logoff"))|_return "user_logoff";
_if(_cp("{USER_REQ_LOGON}","lock"))|_return "lock";
_if(_cp("{USER_REQ_LOGON}",".shell"))|_goto :RESET SHELL MODE;
_if(_cp("{USER_REQ_LOGON}","ver"))|_goto :List Version Message;
_if(_cp("{USER_REQ_LOGON}","version"))|_goto :List Version Message;

//Type Fallback
_if(_cp("{USER_REQ_LOGON}","notworkonusermode"))|_cout "This Application cannot running on User Mode";
_if(_cp("{USER_REQ_LOGON}","noauth"))|_cout "This Application cannot running in current user";
_if(_cp("{USER_REQ_LOGON}","failuserauth"))|_cout "This Application cannot running in current user";

//Check this file exist ?

_goto :TestMNAWork;
:MNABACK;
_if(_file_exist "{USER_REQ_LOGON}") | _goto :Exec_Script;

//Check this file is exist in System Root?
_var {USER_REQ_LOGON_D} = "{USER_REQ_LOGON}";

_var {USER_REQ_LOGON} = "{SYS_ROOT}/{USER_REQ_LOGON}";
_if(_file_exist "{USER_REQ_LOGON}") | _goto :Exec_Script;

_var {USER_REQ_LOGON} = "{USER_REQ_LOGON}.ca";
_if(_file_exist "{USER_REQ_LOGON}") | _goto :Exec_Script;

_var {USER_REQ_LOGON} = "{USER_REQ_LOGON_D}";
_free {USER_REQ_LOGON_D};


//Run as System Execute Path
_if(_file_exist "{USER_REQ_LOGON}") | _goto :Exec_Script;
_var {USER_REQ_LOGON} = "{rs_pathexec}/{USER_REQ_LOGON}";

_if(_file_exist "{USER_REQ_LOGON}") | _goto :Exec_Script;

_var {USER_REQ_LOGON} = "{USER_REQ_LOGON}.ca";
_if(_file_exist "{USER_REQ_LOGON}") | _goto :Exec_Script;



_file_write "[%time%][RootShell][Error] Callback -->  {ROOTSHELL_CALLBACK}";
_file_write "[%time%][RootShell] Origin Type  -->  "{UEL_OriginType}"  ";
_cout " --> "{UEL_OriginType}" is not a command or execute program. ";
_cout "use "help" to list command";
_goto :RESET SHELL MODE;


:Exec_Script;
_file_write "[%time%][RootShell] User Execute Script -->  {USER_REQ_LOGON}";
_var {ROOTSHELL_CALLBACK} = _script <"{USER_REQ_LOGON}"> "{RunArgs}";
_file_write "[%time%][RootShell] Root Shell Return -->  {ROOTSHELL_CALLBACK}";
_if(_cp("{ROOTSHELL_CALLBACK}","user_shutdown"))|_return "user_shutdown";
_if(_cp("{ROOTSHELL_CALLBACK}","user_restart"))|_return "user_restart";
_if(_cp("{ROOTSHELL_CALLBACK}","user_logoff"))|_return "user_logoff";
_if(_cp("{ROOTSHELL_CALLBACK}","lock"))|_return "lock";
_if(_cp("{ROOTSHELL_CALLBACK}","shutdown"))|_return "user_shutdown";
_if(_cp("{ROOTSHELL_CALLBACK}","restart"))|_return "user_restart";
_if(_cp("{ROOTSHELL_CALLBACK}","logoff"))|_return "user_logoff";

_if(_cp("{ROOTSHELL_CALLBACK}","notworkonusermode"))|_cout "This Application cannot running on User Mode";
_if(_cp("{ROOTSHELL_CALLBACK}","noauth"))|_cout "This Application cannot running in current user";
_if(_cp("{ROOTSHELL_CALLBACK}","failuserauth"))|_cout "This Application cannot running in current user";

_goto :RESET SHELL MODE;

:PathSet;
_cout "Set Shell RunPath";
_prts "Path>";
_var {rs_pathexec_cache} = _getline;

_if(!_dir_exist "{rs_pathexec_cache}")|_goto :TryAdvancedSet;
_var {rs_pathexec} = "{rs_pathexec_cache}";
_goto :RESET SHELL MODE;


:TryAdvancedSet;
_var {rs_pathexec_cache} = "{rs_pathexec}/{rs_pathexec_cache}";
_if(!_dir_exist "{rs_pathexec_cache}")|_goto :NULLPATHSET;
_var {rs_pathexec} = "{rs_pathexec_cache}";
_goto :RESET SHELL MODE;


:NULLPATHSET;
_cout "this directory is not exist or unable access";
_cout "Could not set this path";
_goto :RESET SHELL MODE;


:TestMNAWork;
//_file_write "MNA DETECT OK "{USER_REQ_LOGON}" ";
_if(!_file_exist "{SYS_NROOT}/mnacore/quickload.ca")|_goto :SKIP_TestMNAWork;
_var {mna_Result} = _script<"{SYS_NROOT}/mnacore/quickload.ca"> "{USER_REQ_LOGON}";
_if(_cp("{mna_Result}","noapp"))|_goto :MNABACK;
//_file_write "mna service report :  {mna_Result}";
_return "{mna_Result}";
//RunOKStatus
:SKIP_TestMNAWork;
_goto :MNABACK;



//ERRPAGE
:NE_ERR_NOAUTH;
_file_write "[%time%][RootShell][Error] Not allowed";
_clear;
_cout "NATVC ROOT SHELL";
_cout "This User is not allowed run this service";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Please try to reboot and restart";
_pause;
_if(_cp("{NATVC_WHOIS}","SYSTEM"))|_return "$shutdown";
_return "@@appcrash@rootshell@usernotallow@";

:About;
_clear;
_typefile "{NATVC_ABOUTS_TEXT}";
_pause;
_goto :RESET SHELL MODE;

:return;
_prts "return >";
_var {rs_pathexec} = _getline;
_return "{rs_pathexec}";

:SetArgs;
_prts "Set Args >";
_var {RunArgs} = _getline;
_goto :RESET SHELL MODE;


:NewAnalysis;
_$analysis;
_cout "The Command is execute Successfully";
_goto :RESET SHELL MODE;

:ListHelp;
_cout " Natvc Shell Help ";
_cout "                                                                        ";
_cout "  BASIC COMMANDS:                                                       ";
_cout "    path      Set script run path                                       ";
_cout "    return    Return message for call program                           ";
_cout "    args      Run program with arguments                                ";
_cout "    about     Show about information                                    ";
_cout "    clear     Clear console screen                                      ";
_cout "    exit      Exit Natvc Shell                                          ";
_cout "    help      Display this help menu                                    ";
_cout "                                                                        ";
_cout "  SYSTEM COMMANDS:                                                      ";
_cout "    shutdown  Shutdown device                                           ";
_cout "    restart   Restart device                                            ";
_cout "    logoff    Logoff current user                                       ";
_cout "                                                                        ";
_cout "  Root Shell {SYSNAME}.{SYS_KERNEL_VID}";
_cout "";
_goto :RESET SHELL MODE;

:ClearConsole;
_clear;
_goto :RESET SHELL MODE;


:ListLogFile;
:ListHelp;
_cout "Current Log File is :   {SYS_LOG}";
_goto :RESET SHELL MODE;


:bancmd;
_file_write "[%time%][RootShell] Command is disabled by administrator";
_cout "This command is disabled by administrator";
_cout "";
_goto :RESET SHELL MODE;


:List Version Message;
_cout " Project {SYS_NAME} {SYSNAME}.{SYS_KERNEL_VID}  {SYS_KERNEL_CODENAME}";
_cout "  {NATVC_EDITION} Edition";
_cout " OS :  {SYS_RELEASE_Channel} ";
_goto :RESET SHELL MODE;

$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/rootshell.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/run.ca);
_$directmode;
_$nolog;

//RunCore

_var {NATVC_Run_Script_RAL} = _getargs;


//Check EXP is allow?
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{NATVC_Run_Script_RAL}";
_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_if(_cp("{callback_temp}","false")) | _cout "Fail Open this program {NATVC_Run_Script_RAL}, Secure settings not allowed";
_if(_cp("{callback_temp}","false")) | _pause;
_if(_cp("{callback_temp}","false")) | _return "ok";



_var {NATVC_Run_Script} = "{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "script/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "script/vdisk/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "{SYS_NROOT}/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "{SYS_ROOT}/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "{NATVC_DISK}/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;

_if(!_file_exist "{SYS_NROOT}/mnacore/quickload.ca")|_goto :SKIP_TestMNAWork;
_var {mna_Result} = _script<"{SYS_NROOT}/mnacore/quickload.ca"> "{NATVC_Run_Script_RAL}";
_if(_cp("{mna_Result}","noapp"))|_goto :SKIP_TestMNAWork;
_return "{mna_Result}";

//RunOKStatus
:SKIP_TestMNAWork;

//faildetect found
_cout "fail execute program";
_return "failfound";


:startExecutePrg;
//Start Script
_var {NRS_CALLBACK} = _script <"{NATVC_Run_Script}">;
_return "{NRS_CALLBACK}";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/run.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/runexec.ca);
_$directmode;
_$nolog;

//RunCore
:ReloadCore;
_clear;
_cout "         Natvc Run";
_cout "Type Program you want execute";
_cout "like tools. software and system files";
_prt "Type here >";

_var {NATVC_Run_Script_RAL} = _getline;
_if(_cp("{NATVC_Run_Script_RAL}","exit"))|_return "reload";
_if(_cp("{NATVC_Run_Script_RAL}",".exit"))|_return "reload";
_if(_cp("{NATVC_Run_Script_RAL}","{varspace.null}"))|_return "reload";

//Check EXP is allow?
_var {CONFGET_FILE} = "{NATVC_USERPROFILE}/useroptban";
_var {CONFGET_WORD} = "{NATVC_Run_Script_RAL}";
_var {callback_temp} = _script <"{SYS_ROOT}/confget.ca">;

_if(_cp("{callback_temp}","false")) | _cout "Fail Open this program {NATVC_Run_Script_RAL}, Secure settings not allowed";
_if(_cp("{callback_temp}","false")) | _pause;
_if(_cp("{callback_temp}","false")) | _goto :ReloadCore;


_var {NATVC_Run_Script} = "{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "script/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "script/vdisk/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "{SYS_NROOT}/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "{SYS_ROOT}/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;


_var {NATVC_Run_Script} = "{NATVC_DISK}/{NATVC_Run_Script_RAL}";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;
_var {NATVC_Run_Script} = "{NATVC_Run_Script}.ca";
_if(_file_exist "{NATVC_Run_Script}") | _goto :startExecutePrg;

_if(!_file_exist "{SYS_NROOT}/mnacore/quickload.ca")|_goto :SKIP_TestMNAWork;
_var {mna_Result} = _script<"{SYS_NROOT}/mnacore/quickload.ca"> "{NATVC_Run_Script_RAL}";
_if(_cp("{mna_Result}","noapp"))|_goto :SKIP_TestMNAWork;
_return "{mna_Result}";

//RunOKStatus
:SKIP_TestMNAWork;

//faildetect found

_clear;
_cout "Error. Execute Program not found ";
_cout "Natvc cannot found this file :  "{NATVC_Run_Script_RAL}" ";
_cout "check your type or found this file right path and try again";
_pause;
_goto :ReloadCore;


:startExecutePrg;
//Start Script
_var {NRS_CALLBACK} = _script <"{NATVC_Run_Script}">;
_return "{NRS_CALLBACK}";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/runexec.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/services.ca);
_$directmode;
_$nolog;

//System Service

_var {NSV_DATA} = _getargs;

//Detect Service
_if(!_file_exist "{NSV_DATA}")|_goto :TryFindOnLocalService;
_goto :StartLoadService;

:TryFindOnLocalService;
_if(!_file_exist "{SYS_NROOT}/Service/{NSV_DATA}.nsv")|_goto :FailLoadService;

_var {NSV_DATA} = "{SYS_NROOT}/Service/{NSV_DATA}.nsv";

:StartLoadService;

//Load Config Datas
_sipcfg.open "{NSV_DATA}";
_var {NSV_Execute} = _sipcfg Execute;

_var {NSV_UserID} = _sipcfg UserID;
_var {NSV_UserPassword} = _sipcfg UserPassword;

//Login Current Users

_if(!_file_exist "{SYS_NROOT}/SECURITY/{NSV_UserID}.nuslc")|_goto :UserNotAlreadyLogin;

_var {Recovery_SvcUser} = "{NATVC_WHOIS}";

_sipcfg.open "{SYS_NROOT}/SECURITY/{NSV_UserID}.nuslc";
_var {PASSWD_VERIFY} = _sipcfg USERPASSWORD;
_if(!_cp("{PASSWD_VERIFY}","{NSV_UserPassword}"))|_goto :FailPasswordWrong;

_var {NATVC_USERNAME}      = _sipcfg USERNAME;
_var {NATVC_WHOIS}         = _sipcfg USERID;
_var {NATVC_USERPROFILE}   = _sipcfg USERPROFILE;
_var {NATVC_isAdmin}       = _sipcfg USERADMIN;
_var {NATVC_UserAutoRun}   = _sipcfg AUTORUN;
_var {NATVC_USER_PASSWORD} = _sipcfg USERPASSWORD;
_var {NATVC_DisableUser}   = _sipcfg DISABLEUSER;

_var {NSV_SERVICE_MODE} = "true";
_file_write "[%time%][Services] Start Service :  {NSV_DATA}  User :  {NATVC_WHOIS}  Auth :  {NATVC_isAdmin} .";
_var {CALLBACK_NSV} = _script <"{NSV_Execute}">;
_file_write "[%time%][Services] Stop Service :  {NSV_DATA}  .";
_var {NSV_SERVICE_MODE} = "false";

_sipcfg.open "{SYS_NROOT}/SECURITY/{Recovery_SvcUser}.nuslc";
_var {NATVC_USERNAME}      = _sipcfg USERNAME;
_var {NATVC_WHOIS}         = _sipcfg USERID;
_var {NATVC_USERPROFILE}   = _sipcfg USERPROFILE;
_var {NATVC_isAdmin}       = _sipcfg USERADMIN;
_var {NATVC_UserAutoRun}   = _sipcfg AUTORUN;
_var {NATVC_USER_PASSWORD} = _sipcfg USERPASSWORD;
_var {NATVC_DisableUser}   = _sipcfg DISABLEUSER;

_return "{CALLBACK_NSV}";




:FailLoadService;
_clear;
_cout "Natvc Service Start Failed";
_cout "Require Service :   {NSV_DATA}";
_cout "Configuration File is missing";
_pause;
_return "false";

:UserNotAlreadyLogin;
_clear;
_cout "Natvc Service Start Failed";
_cout "Require Service :   {NSV_DATA}";
_cout "Require User Not Logged.  Restart your device and try again";
_pause;
_return "false";

:FailPasswordWrong;
_clear;
_sipcfg.open "{SYS_NROOT}/SECURITY/{Recovery_SvcUser}.nuslc";
_cout "Natvc Service Start Failed";
_cout "Require Service :   {NSV_DATA}";
_cout "Require User Password wrong. ";
_pause;
_return "false";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/services.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/shutdown.ca);
_$directmode;
_$nolog;

_return "shutdown";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/shutdown.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/sysfix.ca);
_$directmode;
_$nolog;

_sipcfg.open "{SYS_NROOT}/config/SETUP";
_if(_cp(_sipcfg DisableSysRepiar,"{varspace.null}"))|_sipcfg DisableSysRepiar = "false";
_if(_cp(_sipcfg DisableSysRepiar,"true"))|_return "service_disable";

//Natvc System Fix or Check tools

_var {SYSFIX_DIR} = "{SYS_NROOT}/SystemImage";
_var {SYSFIX_MAP} = "{SYS_NROOT}/config/SystemImage";

_var {Status} = _getargs;

_if(_cp("{Status}","check"))|_goto :SystemFixMode;
_if(_cp("{Status}","new"))|_goto :SystemFixNew;
_if(_cp("{Status}","remove"))|_goto :SystemRemove;

_cout "Do you want recreate a new system image";
_cout "If your device update. but system image not update";
_cout "you can use this tool recreate a new system image";

_prts "Execute Now ? (y/n) >"

_var {makeusersure} = _getline;
_if(_cp("{makeusersure}","y"))| _goto :ReCreateImage;

_return "Status Fail";



//Need System load Var {SYS_NROOT}
:SystemFixMode;
_file_write "[%time%][SysFix] Task :  Check All System files";
_clear;

_file_write "[%time%][SysFix] From {SYSFIX_DIR}";

_file_open "{SYS_NROOT}/SysRepairLogfile.log";

_if(_file_exist "{SYS_NROOT}/SysRepairLogfile.log")|_file_del "{SYS_NROOT}/SysRepairLogfile.log";

_file_write "System Repiar Log File Start on %time%";

_var {update_title} = "Preparing Automatic Repair";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";

_sleep 2;
_clear;
_var {Int_Total_BreakFile} = "0";
_var {update_title} = "Automatic Repair is trying to repair your device";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";

_var {IntLoad} = "1";

:SYSFIXRESCAN;
_var {ReadCache} = _file_read ("{SYSFIX_MAP}","{IntLoad}");

_if(_cp("{ReadCache}","FileNotExist"))|_goto :FailRepairRecFMissing;

_if(_cp("{ReadCache}","overline")) | _goto :SYSFIXRESCAN_OK;

//Verify
_file_write "[INFO] Checking File :  {ReadCache}";
_prts "\r                                                           \r Verifying: {SYS_ROOT}/{ReadCache}";
_if(!_file_cp("{SYS_ROOT}/{ReadCache}","{SYSFIX_DIR}/{ReadCache}"))|_goto :FixFiles;
:Back_FixFiles;

_var {IntLoad} = _+("{IntLoad}","1");   
_goto :SYSFIXRESCAN;


:FixFiles;
_if(!_file_exist "{SYSFIX_DIR}/{ReadCache}")|_goto :FailFix;
_prts "\r                                                           \r Fixed: {SYS_ROOT}/{ReadCache}";
_var {Int_Total_BreakFile} = _+("{Int_Total_BreakFile}","1");
_ms_sleep 300;
_file_copy("{SYSFIX_DIR}/{ReadCache}","{SYS_ROOT}/{ReadCache}");
_file_write "[ERROR] {ReadCache} :  There is corruption in this file and attempts to repair it";
_file_write "[ERROR] Fix File :  {ReadCache}";
_goto :Back_FixFiles;


:SYSFIXRESCAN_OK;

_clear;

_file_write "[INFO] Check Complete. total file corruption {Int_Total_BreakFile}";
_file_write "[INFO] All File is Verified";

_var {update_title} = "    Complete";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";

_if(_cp("{Int_Total_BreakFile}","0"))|_cout "Scan Complete. No file was corruption";
_if(!_cp("{Int_Total_BreakFile}","0"))|_cout "Scan Complete. Total {Int_Total_BreakFile} files was fixed";
_free {Int_Total_BreakFile};
_ms_sleep 6500;

_return "$reboot";


//Fix Complete



//Create New
:SystemFixNew;

//Add RE
_sipcfg.open "{NATVC_CONFIG_SETUP}";
_if(!_file_exist "{BootVolume}/nbf/recovery") | _goto :SkipCreateRE;

_sipcfg SystemRE_Status = "true";

_sipcfg.open "{BootVolume}/nbf/recovery";
_var {GETREDIR} = _sipcfg osvol;

_script<"{SYS_ROOT}/refix.ca"> "{GETREDIR}";

//Complete
:SkipCreateRE;

//Delete Old Bootmgr
_if(_file_exist "{BootVolume}/ReplaceLoader.nbf")|_file_del "{BootVolume}/ReplaceLoader.nbf";

//Anti Create Image too many
_var {ReCreateImage} = "false";

_clear;

_var {update_title} = "Setup is preparing systemimage";
_typefile "{SYS_NROOT}/res/natvc-bootupdate.txt";



_if(_dir_exist "{SYSFIX_DIR}")|_dir_remove "{SYSFIX_DIR}";
_if(_file_exist "{SYSFIX_MAP}")|_file_del "{SYSFIX_MAP}";

_dir_make "{SYSFIX_DIR}";
//New Map
_dir_list ("{SYSFIX_MAP}","{SYS_ROOT}");
_file_replace "{SYSFIX_MAP}" ("{SYS_ROOT}/","");


_var {IntLoad} = "1";

:WHILEHEAD_NEW;

_var {ReadCache} = _file_read ("{SYSFIX_MAP}","{IntLoad}");

_if(_cp("{ReadCache}","overline")) | _goto :COMPLETE;

//CopyFile
_if(!_file_exist "{SYS_ROOT}/{ReadCache}")|_goto :SetupFailDirectory;
_file_copy("{SYS_ROOT}/{ReadCache}","{SYSFIX_DIR}/{ReadCache}");
_prts "\r                                                           \r Copying: {SYS_ROOT}/{ReadCache}";

_var {IntLoad} = _+("{IntLoad}","1");

_goto :WHILEHEAD_NEW;


:COMPLETE;

//Complete

//System Fix Create Complete

_return "true";



//Remove All Fix cache
:SystemRemove;
_if(_dir_exist "{SYSFIX_DIR}")|_dir_remove "{SYSFIX_DIR}";
_file_del "{SYSFIX_MAP}";
_return "true";


:ReCreateImage;
_script <"{SYS_ROOT}/sysfix.ca"> "remove";
_clear;
_cout "Restart your device to continue";
_return "restart";



:FailFix;
_clear;
_typefile "{SYS_NROOT}/res/natvc-fail-repair.txt";
_file_write "[ERROR] {ReadCache} :  There is corruption in this file";
_file_write "[ERROR] SystemImage not found this file. please use setup media fix this file";
_pause;
_goto :Back_FixFiles;


:SetupFailDirectory;

//Remove old files
_file_del "{SYSFIX_MAP}";
_dir_remove "{SYSFIX_DIR}";

//Type data
_clear;
_cout "Setup Could not Continue. System Boot Config not Correct.";
_cout "Try use setup media to rewrite bootloader";
_pause;
_return "restart";


:FailRepairRecFMissing;
_clear;
_cout "========================================================";
_cout "Automatic Repair Could not repair your system";
_cout "File :  config/SystemImage is missing. ";
_cout "use sysfix.ca to recreate new system image";
_cout "";
_cout "Press Enter to Reboot";
_cout "========================================================";
_pause;
_return "$reboot";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/sysfix.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/syspack.ca);
//Reset System

_$directmode;
_$nolog;

_if(!_cp("{NATVC_isAdmin}","1"))|_goto :FAIL_DISALLOW;

_var {esr} = _getargs;
_if(_cp("{esr}","auto"))|_goto :StartExecSysReset;


_cout "This tool is pack system tools";
_cout "All Program and Users will remove";
_cout "Pack system to release";

_prts "Execute Now ? (y/n) >"
_var {makeusersure} = _getline;
_if(!_cp("{makeusersure}","y"))| _return "cancel";

:StartExecSysReset;

_script <"{SYS_ROOT}/diskclean.ca"> "auto";
_script <"{SYS_ROOT}/sysfix.ca"> "remove";
_script <"{SYS_ROOT}/mnareset.ca"> "uninstallonly";

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_sipcfg oobe = "1";
_sipcfg FastBoot = "0";
_sipcfg shutdown = "0";
_sipcfg last_startup = "0";
_sipcfg last_shutdown = "0";
_sipcfg SystemRE_Dir = "{NoReEnv}";
_sipcfg SystemRE_Status = "false";

//Recovery Admin 
_sipcfg.open "{SYS_USERPATH}/admin/userconfig";
_sipcfg UserPassword = "@nopswd";
_sipcfg DisableUser = "1";


_file_del "script/vdisk/Recovery/Recovery/bindos";

_file_del "{SYS_NROOT}/SysRepairLogfile.log";
_file_del "{SYS_NROOT}/SystemLogFile.log";
_file_del "{SYS_NROOT}/SystemLogFile.log.old";

_file_write "This is New System Mark Record";

_dir_remove "{SYS_NROOT}/SystemUser/Temp";
_file_del "{SYS_NROOT}/SystemUser/userindex";

_dir_remove "{SYS_NROOT}/LOCAL_SERVICE/Temp";
_file_del "{SYS_NROOT}/LOCAL_SERVICE/userindex";

_dir_remove "{NATVC_DISK}/Users/admin/Temp";
_file_del "{NATVC_DISK}/Users/admin/userindex";
_file_del "{NATVC_DISK}/Users/admin/startcomplete";


_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg default = '@';

_cout "OOBE = "1"";
_cout "Restart Your Device.";
_cout "to OOBE on User Create name. Type "@oobecancel" to Complete Pack";

_free _ARGS_NU_ID;
_var _ARGS_NU_ID = "{NATVC_WHOIS}";

_free {umback};
_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "deluser";

_free _ARGS_NU_ID;
_var _ARGS_NU_ID = "oobe";

_free {umback};
_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "deluser";

_cout "{umback}";

_sleep 2;

_return "user_restart";

:FAIL_DISALLOW;
_cout "Only Admin can run this tool";
_return "fail";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/syspack.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/sysreset.ca);
//Reset System

_$directmode;
_$nolog;

_if(!_cp("{NATVC_isAdmin}","1"))|_goto :FAIL_DISALLOW;

_var {esr} = _getargs;
_if(_cp("{esr}","auto"))|_goto :StartExecSysReset;


_cout "NATVC System Reset OOBE";

_prts "Execute Now ? (y/n) >"
_var {makeusersure} = _getline;
_if(!_cp("{makeusersure}","y"))| _return "cancel";

:StartExecSysReset;

_script <"{SYS_ROOT}/diskclean.ca"> "auto";
_script <"{SYS_ROOT}/sysfix.ca"> "remove";
_script <"{SYS_ROOT}/mnareset.ca"> "uninstallonly";

_sipcfg.open "{NATVC_CONFIG_SETUP}";
_sipcfg oobe = "1";
_sipcfg FastBoot = "0";
_sipcfg shutdown = "0";
_sipcfg last_startup = "0";
_sipcfg last_shutdown = "0";
_sipcfg SystemRE_Dir = "{NoReEnv}";
_sipcfg SystemRE_Status = "false";

//Recovery Admin 
_sipcfg.open "{SYS_USERPATH}/admin/userconfig";
_sipcfg UserPassword = "@nopswd";
_sipcfg DisableUser = "1";


_file_del "script/vdisk/Recovery/Recovery/bindos";

_file_del "{SYS_NROOT}/SysRepairLogfile.log";
_file_del "{SYS_NROOT}/SystemLogFile.log";
_file_del "{SYS_NROOT}/SystemLogFile.log.old";

_file_write "This is New System Mark Record";

_dir_remove "{SYS_NROOT}/SystemUser/Temp";
_file_del "{SYS_NROOT}/SystemUser/userindex";

_dir_remove "{SYS_NROOT}/LOCAL_SERVICE/Temp";
_file_del "{SYS_NROOT}/LOCAL_SERVICE/userindex";

_dir_remove "{NATVC_DISK}/Users/admin/Temp";
_file_del "{NATVC_DISK}/Users/admin/userindex";
_file_del "{NATVC_DISK}/Users/admin/startcomplete";

_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg default = '@';

_cout "OOBE = "1"";
_cout "Restart Your Device.";

_sleep 2;

_return "1";

:FAIL_DISALLOW;
_cout "Only Admin can run this tool";
_return "fail";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/sysreset.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/sysrollback.ca);
_$directmode;
_$nolog;

//System Roll Back
//SYS ROLLBACK Function

_if(!_dir_exist "{NATVC_DISK}/Natvc.old")|_goto :NoOldSystem;
_if(!_dir_exist "{NATVC_DISK}/NatvcUpdate")|_goto :ImportFileDestory;

_var {ROLLBACKARGS} = _getargs;

_if(_cp("{ROLLBACKARGS}","auto"))|_goto :startRollBack;

_clear;
_cout "Do you want Roll back old System ?";
_cout "type "rollback" to make sure";

_prt "$>";
_var {GET_USER_REQ} = _getline;

_if(_cp("{GET_USER_REQ}","rollback"))|_goto :startRollBack;

_return "usercancel";



//Error Page
:NoOldSystem;
_cout "No Old System exist";
_cout "System Could not RollBack";
_pause;
_return "no_oldsys";

:ImportFileDestory;
_cout "NatvcUpdate File is missing";
_cout "System Could not RollBack";
_pause;
_return "no_oldsys";



:startRollBack;
_clear;
_cout "Please wait ...";
_cout "Copying files  ...";

//PROCESS

_sipcfg.open "{BootVolume}/nbf/{BootDefaultOption}";
_sipcfg osload = 'NatvcUpdate/sysupd.ca';
_sipcfg bootsign = "ntvupdate";
_goto :RollBackNext;


:RollBackNext;
_clear;
_cout "Restarting your device";
_sleep 1;

//END
_return "restart";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/sysrollback.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/textreader.ca);
_$directmode;
_$nolog;

_var {ACCESS_URL} = _getargs;

_if(_file_exist "{ACCESS_URL}")|_goto :NEXPLORER MAIN;

_clear;
_cout "Text File Reader   ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "----------------------------------------------------------------";
_cout "@FILE DIR   | > <Not Open>";
_cout "----------------------------------------------------------------";

_cout "Open files";
_prts "File >";
_var {ACCESS_URL} = _getline;
_if(_cp("{ACCESS_URL}","exit"))|_return "close";
_if(_cp("{ACCESS_URL}",".exit"))|_return "close";
_goto :NEXPLORER MAIN;



:NEXPLORER MAIN;
_clear;
_cout "Text File Reader   ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "----------------------------------------------------------------";
_cout "@FILE DIR   | >{ACCESS_URL}";
_cout "----------------------------------------------------------------";

_prts "Loading Pages ...";

_if(!_file_exist "{ACCESS_URL}")|_goto :FailLoad;

_prts "\r                                              \r";
_textprint "{ACCESS_URL}";

:EndloadPage;
_cout "----------------------------------------------------------------";
_prts "File >";
_var {ACCESS_URL} = _getline;
_if(_cp("{ACCESS_URL}","exit"))|_return "close";
_if(_cp("{ACCESS_URL}",".exit"))|_return "close";
_goto :NEXPLORER MAIN;  

//Get Main


//ERROR PAGE
:FailLoad;
_cout "   Error Load page";
_cout "   File Not Exist";
_cout "";
_cout "";
_cout "";
_goto :EndloadPage;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/textreader.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/usermenu.ca);
//NATVC USER MENU
// BASE USER Function
_$directmode;
_$nolog;

_var {ToolsName} = "USERMENU";

//MAIN TYPE
//USER MENU

_file_write "[%time%][UserMenu] User {NATVC_WHOIS} open Menu";

_if(!_file_exist "{NATVC_USER_MENU_CONFIG}") | _goto :ERR_NOCONFIG;

//Load Menu
_file_write "[%time%][UserMenu] Load config :  {NATVC_USER_MENU_CONFIG}";
_sipcfg.open "{NATVC_USER_MENU_CONFIG}";
_var {Menu_Type} = _sipcfg MENU_TYPE;

_if(!_file_exist "{Menu_Type}") | _goto :ERR_NOMType;

_clear;
_typefile "{Menu_Type}";
_file_write "[%time%][UserMenu] LoadMain";

:BACKMAINCONSOLE;
_cout "";
_prt "$ User Start Menu > ";
_file_write "[%time%][UserMenu] Wait user Operation";
_var {NATVC_USEREXP_GET} = _getline;

_file_write "[%time%][UserMenu] User Execute Command -->  {NATVC_USEREXP_GET}";
_goto :RET_RAW;

//Function
:RET_RAW;
_file_write "[%time%][UserMenu] userLib return {NATVC_USEREXP_GET}";

_if(_cp("{NATVC_USEREXP_GET}","{varspace.null}"))|_return "cmenu";

_return "{NATVC_USEREXP_GET}";

//ERRPAGE
:ERR_NOCONFIG;
_file_write "[%time%][UserMenu][Error] Fail Load User Menu: ";
_file_write "[%time%][UserMenu][Error] Missing Config :  {NATVC_USER_MENU_CONFIG} ";
_cout "------------------------------------";
_cout "NATVC User Menu";
_cout "Fail Load. CONFIG File";
_cout "Missing Config File :  {NATVC_USER_MENU_CONFIG}";
_cout "AppCrash";
_cout "------------------------------------";
_return "@@appcrash@natvc@usermenu@_failconfig";

:ERR_NOMType;
_file_write "[%time%][UserMenu][Error] Fail Load User Menu: ";
_file_write "[%time%][UserMenu][Error] Missing Resource :  {Menu_Type} ";
_cout "------------------------------------";
_cout "NATVC User Menu";
_cout "Fail Load Resource {Menu_Type}";
_cout "Missing Config File :  {Menu_Type}";
_cout "AppCrash";
_cout "------------------------------------";
_return "@@appcrash@natvc@usermenu@_failresource";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/usermenu.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/usermgr.ca);
_$directmode;
_$nolog;

//User Mgr
//Main Console

_var {ToolsName} = "USERMGR";

//_cout "NATVC User Manager";

//REQ EXAMPLE
//VAR _ARGS_NU_FULLNAME = <UserFULLNAME>
//VAR _ARGS_NU_ID = <UserID>
//VAR _ARGS_NU_PSWD = <User Password>
//VAR _ARGS_NU_ADMIN = <Is user admin ?  1 or 0>
//
//REQ DELETE / NEW
// newuser / deluser / banuser / setadmin / login

_var {getargs} = _getargs ; //Get Args

_if( _cp( "{getargs}" , "newuser" ) ) | _goto :FUN_NEWUSER;
_if( _cp( "{getargs}" , "deluser") )  | _goto :FUN_DELUSER;
_if( _cp( "{getargs}" , "banuser") )  | _goto :FUN_BANUSER;
_if( _cp( "{getargs}" , "setadmin") ) | _goto :FUN_SETADMIN;
_if( _cp( "{getargs}" , "login") )    | _goto :FUN_LOGIN;
_if( _cp( "{getargs}" , "setautorun") )    | _goto :FUN_SETAUTORUN;


:COUTNULL;
_cout "Please use right command :  ({getargs})";
_cout "newuser / deluser / banuser / setadmin / login";
_cout '//VAR _ARGS_NU_FULLNAME = <UserFULLNAME>';
_cout '//VAR _ARGS_NU_ID = <UserID>';
_cout '//VAR _ARGS_NU_PSWD = <User Password>';
_cout '//VAR _ARGS_NU_ADMIN = <Is user admin ?  1 or 0>';
_pause;
_return "ok";



//Function
:FUN_NEWUSER;
_cout "Create New User _ARGS_NU_ID";

_if( _cp ( "_ARGS_NU_ID" , '_ARGS_NU_ID' ))|_goto :COUTNULL;

_if(_dir_exist "{SYS_USERPATH}/_ARGS_NU_ID")|_return "Create fail. User Exist.";
_if(_cp("_ARGS_NU_ID","SYSTEM"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","default"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","admin"))|_return "Create fail. Forbidden";

//Add User
_dir_make "{SYS_USERPATH}/_ARGS_NU_ID";
_if(!_dir_exist "{SYS_USERPATH}/_ARGS_NU_ID")|_return "This user id is Illegal";
_file_copy("{SYS_USERPATH}/default/userconfig","{SYS_USERPATH}/_ARGS_NU_ID/userconfig");
_file_copy("{SYS_USERPATH}/default/usermenu","{SYS_USERPATH}/_ARGS_NU_ID/usermenu");
_file_copy("{SYS_USERPATH}/default/useroptban","{SYS_USERPATH}/_ARGS_NU_ID/useroptban");


//Set User Profile
_sipcfg.open "{SYS_USERPATH}/_ARGS_NU_ID/userconfig";
_sipcfg UserName = "_ARGS_NU_FULLNAME";
_sipcfg isAdmin = "_ARGS_NU_ADMIN";
_sipcfg UserPassword = "_ARGS_NU_PSWD";

//Set System Config Profile;
_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg _ARGS_NU_ID = {SYS_USERDIR}/_ARGS_NU_ID;

//Report Succeed
_return "User Create Succeed";


:FUN_DELUSER;
//Uninstall User Directory
_if(_cp("_ARGS_NU_ID","SYSTEM"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","default"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","SystemShell"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","admin"))|_return "Create fail. Forbidden";

_dir_remove "{SYS_USERPATH}/_ARGS_NU_ID";

//Remove SYSTEM Config
_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg.remove _ARGS_NU_ID;
_return "User is Delete Complete _ARGS_NU_ID";


:FUN_BANUSER;
//Detect User is Ban or unban
//Set User Profile
_if(_cp("_ARGS_NU_ID","SYSTEM"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","default"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","SystemShell"))|_return "Create fail. Forbidden";

_sipcfg.open "{SYS_USERPATH}/_ARGS_NU_ID/userconfig";
_var {GetUserStatus} = _sipcfg DisableUser;
_if(_cp("{GetUserStatus}","1"))|_sipcfg DisableUser = "0";
_if(_cp("{GetUserStatus}","0"))|_sipcfg DisableUser = "1";
_var {GetUserStatus} = _sipcfg DisableUser;

_return "Set User Status is {GetUserStatus}";


:FUN_SETADMIN;
_if(_cp("_ARGS_NU_ID","SYSTEM"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","default"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","SystemShell"))|_return "Create fail. Forbidden";
_if(_cp("_ARGS_NU_ID","admin"))|_return "Create fail. Forbidden";

_sipcfg.open "{SYS_USERPATH}/_ARGS_NU_ID/userconfig";
_var {GetUserStatus} = _sipcfg isAdmin;
_if(_cp("{GetUserStatus}","1"))|_sipcfg isAdmin = "0";
_if(_cp("{GetUserStatus}","0"))|_sipcfg isAdmin = "1";
_var {GetUserStatus} = _sipcfg isAdmin;

_return "Set User Administrator is {GetUserStatus}";

:FUN_LOGIN;
_var {PRE_AUTOENTRY_PASSWORD} = "_ARGS_NU_PSWD";
_script<"{NATVC_USERSVC}"> "_ARGS_NU_ID";
_return "User is logoff";

:FUN_SETAUTORUN;
_if(_cp("_ARGS_NU_ID","remove"))|_goto :RemAtRun;
_if(!_file_exist "_ARGS_NU_ID")|_return "Fail. File not found";
_file_copy ("{SYS_USERPATH}/default/autorun","{NATVC_USERPROFILE}/autorun");
_sipcfg.open "{NATVC_USERPROFILE}/autorun";
_sipcfg task = "_ARGS_NU_ID";
_return "Create task Succeed. use "remove" to delete this task";

:RemAtRun;
_file_del "{NATVC_USERPROFILE}/autorun";
_return "User auto run task is remove";


//ERR PAGE
:FAIL_DISALLOW;
_clear;
_cout "NATVC USER Manager";
_cout "User Manager Error";
_cout "This user is not allowed run this service";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to Back";
_pause;
_return "accessenied";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/usermgr.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/usersettings.ca);
//NATVC User Settings
_$directmode;
_$nolog;

_var {ToolsName} = "USERSETTINGS";

_file_write "[%time%][UserSettings] Start Main";

//MAIN UI EXP
_file_write "[%time%][UserSettings] Check User Sign Certificates";
_if(!_cp("{NATVC_isAdmin}","1"))|_goto :FAIL_DISALLOW;

//MAIN Header
:SkipSecureDetect;
:ReloadExplorer;
_file_write "[%time%][UserSettings] Reload Main Console";
_var _ARGS_NU_FULLNAME = "NOT SET";
_var _ARGS_NU_ID = "NOT SET";
_var _ARGS_NU_PSWD = "NOT SET";
_var _ARGS_NU_ADMIN = "NOT SET";

_file_write "[%time%][UserSettings] Main";
_clear;
_typefile "{SYS_NROOT}/res/natvc-user-settings-main.txt";

_prt "Enter your choice (use ".exit" cancel)>";
_var _US_EMODE= _getline;
_file_write "[%time%][UserSettings] UserType :  _US_EMODE";

_if(_cp("_US_EMODE",".exit"))|_return "cancel";
_if(_cp("_US_EMODE","1"))|_goto :_exe_newuser;

:FORBIDDEN;
_file_write "[%time%][UserSettings] Select Operate User";
_prt "Execute User (UserID.  use ".exit" cancel)>";
_var _ARGS_NU_ID = _getline;

_file_write "[%time%][UserSettings] Select User is _ARGS_NU_ID";

_if(_cp("_ARGS_NU_ID","SYSTEM"))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID","SystemShell"))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID","default"))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",'{varspace.null}'))|_goto :FORBIDDEN;
_if(_cp("_ARGS_NU_ID",".exit"))|_return "cancel";

//EXECUTE
_cout "Please wait ..";
_if(_cp("_US_EMODE","2"))|_goto :_exe_deluser;
_if(_cp("_US_EMODE","3"))|_goto :_exe_banuser;
_if(_cp("_US_EMODE","4"))|_goto :_exe_setadmin;
_if(_cp("_US_EMODE","5"))|_goto :_exe_setautologin;
_if(_cp("_US_EMODE","autorun"))|_goto :_exe_setuserautorun;

_file_write "[%time%][UserSettings] User Select Mode is Invalid";

_cout "NULL Mode _US_EMODE";
_pause;
_goto :ReloadExplorer;

:_exe_newuser;
//Create New User
:CreateUserPage;
_file_write "[%time%][UserSettings] Create new users";
_clear;
//Open NEW USER.
_typefile "{NATVC_DISK}/Natvc/res/natvc-oobe-user.txt";

//WRITE MAIN NAME
_cout "Use .exit cancel";
:RESET_FULLNAMETYPE;
_prt "Write your full name >";
_var _ARGS_NU_FULLNAME = _getline;
_if(_cp("_ARGS_NU_FULLNAME","{varspace.null}"))|_goto :RESET_FULLNAMETYPE;
_if(_cp("_ARGS_NU_FULLNAME",".exit"))|_return "cancel";


//WRITE ID
:FORBIDDEN_X;
_file_write "[%time%][UserSettings] wait user type id";
_prt "Write your user id (no space bar) >";
_var _ARGS_NU_ID = _getline;
_if(_cp("_ARGS_NU_ID","SYSTEM"))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID","SystemShell"))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID","oobe"))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID","admin"))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID",'{varspace.null}'))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID","default"))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID","@"))|_goto :FORBIDDEN_X;
_if(_cp("_ARGS_NU_ID",".exit"))|_return "cancel";

_file_write "[%time%][UserSettings] User Type is :  _ARGS_NU_ID";

//GET PASSWORD
:invalidPasswordType;
_prt "Write your user password (If you do not want set password. press enter) >";
_var _ARGS_NU_PSWD = _getline;
_if(_cp("_ARGS_NU_PSWD",'{varspace.null}'))|_var _ARGS_NU_PSWD = "@nopswd";
_if(_cp("_ARGS_NU_PSWD",'@servicemode'))|_goto :invalidPasswordType;

_file_write "[%time%][UserSettings] User : _ARGS_NU_ID    Password is : _ARGS_NU_PSWD ";

_var _ARGS_NU_ADMIN = "1";

_file_write "[%time%][UserSettings] Start service "User Manager Service"  ";

_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "newuser";

_file_write "[%time%][UserSettings] Service Stop. Result: {umback} ";
_if(!_dir_exist "{SYS_USERPATH}/_ARGS_NU_ID")|_goto :UserCreateFailed_RETRY;

_cout "{umback}";
_pause;
_goto :ReloadExplorer;



:_exe_deluser;
_file_write "[%time%][UserSettings] Start service "User Manager Service"  ";
_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "deluser";
_file_write "[%time%][UserSettings] Service Stop. Result: {umback} ";

_cout "{umback}";
_pause;
_goto :ReloadExplorer;

:_exe_banuser;
_file_write "[%time%][UserSettings] Start service "User Manager Service"  ";
_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "banuser";
_file_write "[%time%][UserSettings] Service Stop. Result: {umback} ";

_cout "{umback}";
_pause;
_goto :ReloadExplorer;

:_exe_setadmin;
_file_write "[%time%][UserSettings] Start service "User Manager Service"  ";
_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "setadmin";
_file_write "[%time%][UserSettings] Service Stop. Result: {umback} ";

_cout "{umback}";
_pause;
_goto :ReloadExplorer;

:_exe_setautologin;
_file_write "[%time%][UserSettings] Config System Auto Login :  _ARGS_NU_ID";
_sipcfg.open "{NATVC_CONFIG_USERS}";
_sipcfg default = "_ARGS_NU_ID";
_goto :ReloadExplorer;

:_exe_setuserautorun;
_file_write "[%time%][UserSettings] Config User Auto Run :  _ARGS_NU_ID";
_cout "";
_cout "Set Auto Run program :  _ARGS_NU_ID";

_var {umback} = _script<"{SYS_ROOT}/usermgr.ca"> "setautorun";
_cout "{umback}";
_pause;
_goto :ReloadExplorer;


//ERRPAGE
:FAIL_CRASH;
_clear;
_cout "NATVC USER SETTINGS";
_cout "APPCRASH. Last Command :  {NATVC_USEREXP_GET}";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to back";
_pause;
_return "noauth";


:FAIL_DISALLOW;
_file_write "[%time%][UserSettings] Access Denied :  User is not allowed run this tools";
_clear;
_cout "NATVC USER SETTINGS";
_cout "For system security reasons, current users cannot run User Settings";
_cout "User :  {NATVC_USERNAME} ({NATVC_WHOIS})  IA :  {NATVC_isAdmin}";
_cout "Press Enter to back";
_pause;
_return "noauth";

:NoRightCMD;
_file_write "[%time%][UserSettings] Command is Invalid";
_var {NATVC_USEREXP_GET} = "NOTSET";
_goto :BACKMAINCONSOLE;


:UserCreateFailed_RETRY;
_clear;
_cout "   Something went wrong";
_cout "Your user is create failed";
_cout "maybe your type is invalid";
_cout "or type has Illegal Path";
_pause:
_goto :CreateUserPage;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/usersettings.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/usersvc.ca);
//NATVC SYSTEM
//User Services
_$directmode;
_$nolog;
_$no_err_report;

_if(_cp("{UserSVCBUFFER}","KernelModeDetect")) | _goto :SkipAuthCheck;

_if(!_cp("{NATVC_isAdmin}","2"))|_return "noauth";

:SkipAuthCheck;
_var {UserSVCBUFFER} = "Unknown";


:RELOADAPI;

//Load Pre
_var {NATVC_REQ_LOGIN} = _getargs;

_if(_file_exist "{SYS_NROOT}/SECURITY/{NATVC_REQ_LOGIN}.nuslc")|_goto :FastLoginFromFiles;

_file_write "[%time%][UserService] Service Load";
_file_write "[%time%][UserService] Request Login :  {NATVC_REQ_LOGIN}";

:RELOAD2API;

_if(!_file_exist "{NATVC_CONFIG_USERS}") | _return "{NATVC_CONFIG_USERS}";

//Load Users
_file_write "[%time%][UserService] Load from config/USERS";

_sipcfg.open "{NATVC_CONFIG_USERS}";
_var {NATVC_WHOIS} = "{NATVC_REQ_LOGIN}";
_var {NATVC_USERPROFILE} = _sipcfg {NATVC_REQ_LOGIN};

_if(_cp("{NATVC_USERPROFILE}",'{varspace.null}')) | _goto :USERFAIL_NOUSER;

_var {NATVC_USERPROFILE} = "{NATVC_DISK}/{NATVC_USERPROFILE}";


_var {temp} = "{NATVC_USERPROFILE}/Temp";
_if(!_dir_exist "{temp}")|_dir_make "{temp}";


_var {NATVC_USERPROFILE_CONFIG} = "{NATVC_USERPROFILE}/userconfig";

_if(!_file_exist "{NATVC_USERPROFILE_CONFIG}") | _goto :USERFAIL_NOCONFIG;

_if(_cp("{NoGUIBootOpt}","1"))|_cout "Load User Profile";

_file_write "[%time%][UserService] Load User Profile";

_if(_cp("{NoGUIBootOpt}","1"))|_cout "User Service is trying verify your credentials";

_sipcfg.open "{NATVC_USERPROFILE_CONFIG}";
_var {NATVC_USERNAME} = _sipcfg UserName;

_var {NATVC_isAdmin} = _sipcfg isAdmin;

_var {NATVC_UserAutoRun} = _sipcfg AutoRun;

_var {NATVC_DisableUser} = _sipcfg DisableUser;
_if(_cp("{NATVC_DisableUser}","1")) | _goto :USERFAIL_DISABLED;

_file_write "[%time%][UserService] Verify User Login Login credentials";

_var {NATVC_USER_PASSWORD} = _sipcfg UserPassword;
_if(!_cp("{NATVC_USER_PASSWORD}","@nopswd")) | _goto :REQ_PASSWORD;

:PASS_VERIFED;

_if(_cp("{NoGUIBootOpt}","1"))|_cout "Loggin your user";

_file_write "[%time%][UserService] All User credentials is Verified";
_file_write "[%time%][UserService] Load User Data ... ";

_if(_cp("{NoGUIBootOpt}","1"))|_cout "Load User Data";

_file_write "[%time%][UserService] User Name : {NATVC_USERNAME} ";
_file_write "[%time%][UserService] User ID :  {NATVC_WHOIS}";
_file_write "[%time%][UserService] User Profile on : {NATVC_USERPROFILE}";
_file_write "[%time%][UserService] User Authority Level :  {NATVC_isAdmin}";
_file_write "[%time%][UserService] All User data is load Complete";

_if(_cp("{NoGUIBootOpt}","1"))|_cout "Waitting user main service startup";

//Execute User Auto Run
_file_write "[%time%][UserService] Start service :  {NATVC_UserAutoRun}";

_if(_cp("{NATVC_UserAutoRun}","@servicemode"))|_goto :SkipCheckautoRunExist;

_if(!_file_exist "{NATVC_UserAutoRun}") | _goto :USERFAIL_NOAR;
  //_cout "Waitting User Auto Run ...";

:SkipCheckautoRunExist;

:RESTART_USER_MAIN_SERVICE;

//Create User Dump
_if(!_dir_exist "{SYS_NROOT}/SECURITY")|_dir_make "{SYS_NROOT}/SECURITY";
_file_open "{SYS_NROOT}/SECURITY/{NATVC_WHOIS}.nuslc";
_file_write "//Natvc User Secure Login Certificate";
_file_write "$USERNAME={NATVC_USERNAME};";
_file_write "$USERID={NATVC_WHOIS};";
_file_write "$USERPROFILE={NATVC_USERPROFILE};";
_file_write "$USERADMIN={NATVC_isAdmin};";
_file_write "$AUTORUN={NATVC_UserAutoRun};";
_file_write "$USERPASSWORD={NATVC_USER_PASSWORD};";
_file_write "$DISABLEUSER={NATVC_DisableUser};";
_goto :PASSFLB;

:FASTLoginBack;
_if(!_cp("{NATVC_USER_PASSWORD}","@nopswd")) | _goto :REQ_PASSWORD_TO_UNLOCKUSER;
:PASSFLB;

_file_open "{SYS_LOG}";

//For Pre Login Service
_if(_cp("{NATVC_UserAutoRun}","@servicemode"))|_return "reload_SYSTEM";

_var {NATVC_USERSVC_CALLBACK} = _script<"{NATVC_UserAutoRun}">;

_file_write "[%time%][UserService] User Service is Closed with argument :  {NATVC_USERSVC_CALLBACK}";

_if(_cp("{NATVC_USERSVC_CALLBACK}","logoff")) | _return "reload_SYSTEM";
_if(_cp("{NATVC_USERSVC_CALLBACK}","user_logoff")) | _file_del "{SYS_NROOT}/SECURITY/{NATVC_WHOIS}.nuslc";
_if(_cp("{NATVC_USERSVC_CALLBACK}","user_logoff")) | _return "reload_SYSTEM";

_if(_cp("{NATVC_USERSVC_CALLBACK}","user_lock")) | _return "reload_SYSTEM";

_if(_cp("{NATVC_USERSVC_CALLBACK}","relogin")) | _goto :RELOADAPI;
_if(_cp("{NATVC_USERSVC_CALLBACK}","runid.exit")) | _goto :RESTART_USER_MAIN_SERVICE;
_if(_cp("{NATVC_USERSVC_CALLBACK}","ok")) | _goto :RESTART_USER_MAIN_SERVICE;
_return "{NATVC_USERSVC_CALLBACK}";
_exit;




:REQ_PASSWORD;
_file_write "[%time%][UserService] This User need credentials to login";
_if(!_cp("{PRE_AUTOENTRY_PASSWORD}","@EMPTY"))|_goto :REQ_autopassword;
:REQ_REALPSWD;
_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-req-passwd.txt";
_prt "{NATVC_USERNAME} | Password >";
_var {NATVC_LOGIN_USERPSWD} = _getline;
_if(_cp("{NATVC_LOGIN_USERPSWD}","{NATVC_USER_PASSWORD}")) | _goto :PASS_VERIFED;
_file_write "[%time%][UserService][Warning] Failed verify user credentials. login fail";
_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-req-wrong-passwd.txt";
_pause;
_return "loginfail";

:REQ_autopassword;
_file_write "[%time%][UserService] This user use Pre-Password login";
_var {NATVC_LOGIN_USERPSWD} = "{PRE_AUTOENTRY_PASSWORD}";
_var {PRE_AUTOENTRY_PASSWORD} = "@EMPTY";
_if(_cp("{NATVC_LOGIN_USERPSWD}","{NATVC_USER_PASSWORD}")) | _goto :PASS_VERIFED;
_file_write "[%time%][UserService][Warning] Pre-Password is Invalid";
_goto :REQ_REALPSWD;

//ERRPAGE
:USERFAIL_NOCONFIG;
_file_write "[%time%][UserService][Error] Fail load user profile {NATVC_USERPROFILE_CONFIG}";
_clear;
_cout "--NATVC User Service";
_cout "Fail Load User Profile :  {NATVC_REQ_LOGIN}";
_cout "Path on {NATVC_USERPROFILE_CONFIG}";
_cout "_Press Enter to Logoff";
_pause;
_return "logoff";

:USERFAIL_NOAR;
_clear;
_file_write "[%time%][UserService][Error] Fail load user autorun {NATVC_UserAutoRun}";
_cout "Failed to initialize user login service";
_cout "File :  {NATVC_UserAutoRun}";
_cout "User auto run is NULL";
_cout "_Press Enter to Logoff";
_pause;
_return "user_logoff";

:USERFAIL_NOUSER;
_file_write "[%time%][UserService][Error] Fail load user. user not exist -->  {NATVC_REQ_LOGIN}";
_clear;
_typefile "{SYS_NROOT}/res/natvc-ntvue-nouser.txt";
_pause;
_return "loginfail";

:USERFAIL_DISABLED;
_clear;
_file_write "[%time%][UserService][Error] Fail load user. this user is Disabled by admin --> {NATVC_REQ_LOGIN}";
_typefile "{SYS_NROOT}/res/natvc-ntvue-userban.txt";
_pause;
_return "logoff";


:FastLoginFromFiles;
_sipcfg.open "{SYS_NROOT}/SECURITY/{NATVC_REQ_LOGIN}.nuslc";

_var {NATVC_USERNAME}      = _sipcfg USERNAME;
_var {NATVC_WHOIS}         = _sipcfg USERID;
_var {NATVC_USERPROFILE}   = _sipcfg USERPROFILE;
_var {NATVC_isAdmin}       = _sipcfg USERADMIN;
_var {NATVC_UserAutoRun}   = _sipcfg AUTORUN;
_var {NATVC_USER_PASSWORD} = _sipcfg USERPASSWORD;
_var {NATVC_DisableUser}   = _sipcfg DISABLEUSER;

_goto :FASTLoginBack;



:REQ_PASSWORD_TO_UNLOCKUSER;
_file_write "[%time%][UserService] Login with cache Certificates";

_if(_cp("{PRE_AUTOENTRY_PASSWORD}",'{PRE_AUTOENTRY_PASSWORD}'))|_var {PRE_AUTOENTRY_PASSWORD} = "@EMPTY";
_if(!_cp("{PRE_AUTOENTRY_PASSWORD}","@EMPTY"))|_goto :TryUsePrePasswd;
_var {Logon_Method} = "Logon Interface Input By User";
_file_write "[%time%][UserService] wait user type password to unlocker login user";
_clear;
_cout "Type your password to unlock this user";
_prt "password>";
_var {GET_PASSWORD} = _getline;

:MOD_A_UNLOCKER_TRY;
_file_write "[%time%][UserService] attempt login.  Method :   {Logon_Method}";
_if(_cp("{GET_PASSWORD}","{NATVC_USER_PASSWORD}"))|_goto :PASSFLB;

_clear;
_file_write "[%time%][UserService][Error] Unlock failed:  password wrong";
_typefile "{SYS_NROOT}/res/natvc-ntvue-req-wrong-passwd.txt"
//_cout "Logon Method :  {Logon_Method}";
//_cout "REAL PASSWORD:  "{NATVC_USER_PASSWORD}" TRUE";
//_cout "Your type :  "{GET_PASSWORD}" FAILED";
_pause;
_return "reload_SYSTEM";


:TryUsePrePasswd;
_file_write "[%time%][UserService] Request Pre password login";
_var {Logon_Method} = "Pre Password Login By Application";
_var {GET_PASSWORD} = "{PRE_AUTOENTRY_PASSWORD}";
_var {PRE_AUTOENTRY_PASSWORD} = "@EMPTY";
_goto :MOD_A_UNLOCKER_TRY;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/usersvc.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/whoami.ca);
_$directmode;
_$nolog;

//Natvc WhoAMI

_cout "Current User :  {NATVC_USERNAME} | User ID: {NATVC_WHOIS} | User Auth Info :  {NATVC_isAdmin}  |";
_cout "User Path :  {NATVC_USERPROFILE}";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/whoami.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/System/xcopy.ca);
_$directmode;
_$nolog;

//Natvc System Copy Tools
//Example Copy {XCOPY_A} to {XCOPY_B}

_var {TempListFiles} = "{temp}/filexcopy.txt";

_if(_file_exist "{TempListFiles}")|_file_del "{TempListFiles}";

_if(_cp("{XCOPY_A}",'{XCOPY_A}'))|_goto :ListHelp;
_if(_cp("{XCOPY_B}",'{XCOPY_B}'))|_goto :ListHelp;

//Create New List

_dir_list ("{TempListFiles}","{XCOPY_A}");
_file_replace "{TempListFiles}" ("{XCOPY_A}","");

_if(!_file_exist "{TempListFiles}")|_goto :listfileError;

_var {IntLoad} = "1";

:XCOPY_START;

_var {ReadCache} = _file_read ("{TempListFiles}","{IntLoad}");

_if(_cp("{ReadCache}","overline")) | _goto :XCOPY_START_OK;

//CopyFiles
_dir_full "{XCOPY_B}/{ReadCache}";
_file_copy("{XCOPY_A}/{ReadCache}","{XCOPY_B}/{ReadCache}");

_var {IntLoad} = _+("{IntLoad}","1");   
_goto :XCOPY_START;



:XCOPY_START_OK;
_file_del "{TempListFiles}";
_return "OK";








:ListHelp;
_cout "Xcopy tools";
_cout 'Copy dir {XCOPY_A} to {XCOPY_B}';
_cout "Support Single file execute";
_return "ok";

:listfileError;
_cout "Xcopy Error";
_cout "Create file map error";
_return "fail";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/System/xcopy.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemPackage/mnacore.pkgmanager.mna);
Calcium_Text_Pack_File  New Format
//START EXTRACT
$CSTP_FILE_RECORD_MARK_ID_START(/apploader.ca);
_$directmode;
_$nolog;

//ok
_cover <"{AppDir}/pkm.ca">;
_return "FailLoadUserInterface";
$CSTP_FILE_RECORD_MARK_ID_END(/apploader.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/pkgdata.mna);
//SIPCFG Package Data
$AppName=Natvc mna Package Manager;
$Setup=mnacore.pkgmanager.mna;
$AppProperties=systemapps; // systemapps or userapps

$AppVersion=1006;

//Copyright FoxaXu 2025
//Default Package
$CSTP_FILE_RECORD_MARK_ID_END(/pkgdata.mna);
$CSTP_FILE_RECORD_MARK_ID_START(/pkm.ca);
_$directmode;
_$nolog;

//Modern Natvc application   -Package manager
//mna manager

_clear;
:BACKMAINCONSOLE;
_clear;
_cout "-----------------------------------------------";
_cout " Modern Natvc Application";
_cout " Package Manager";
_cout " ";
_cout "       1. Install App";
_cout "       2. Uninstall App";
_cout "       3. Save Package";
_cout "       4. Get Package Version";
_cout "       5. List All installed apps";
_cout "       e. Exit";
_cout " ";
_cout " PKM Version";
_cout "-----------------------------------------------";
_prt "Type number: >";
_var {UserReq} = _getline;
_if(_cp("{UserReq}","1"))|_goto :Pkm_InstallApp;
_if(_cp("{UserReq}","2"))|_goto :Pkm_UninstallApp;
_if(_cp("{UserReq}","3"))|_goto :Pkm_SavePkgApp;
_if(_cp("{UserReq}","4"))|_goto :Pkm_GetPkmData;
_if(_cp("{UserReq}","5"))|_goto :Pkm_GetAllApps;
_if(_cp("{UserReq}","e"))|_return "ok";

_goto :BACKMAINCONSOLE;




:Pkm_InstallApp;
//Install Apps
_clear;
_cout "Type software package file";
_prt "Type Package>";
_var {UserTypeSetup} = _getline;
_script<"{SYS_NROOT}/mnacore/install.ca"> "{UserTypeSetup}";
_pause;
_goto :BACKMAINCONSOLE;




:Pkm_UninstallApp;
//Uninstall Apps
//Install Apps
_clear;
_cout "Type software package uninstall";
_prt "Type Package>";
_var {UserTypeSetup} = _getline;
_script<"{SYS_NROOT}/mnacore/uninstall.ca"> "{UserTypeSetup}";
_pause;
_goto :BACKMAINCONSOLE;




:Pkm_SavePkgApp;
//Save Packages File
//Install Apps
_clear;
_cout "Type software package to save";
_prt "Type Package>";
_var {UserTypeSetup} = _getline;
_script<"{SYS_NROOT}/mnacore/pkgSaved.ca"> "{UserTypeSetup}";
_pause;
_goto :BACKMAINCONSOLE;




:Pkm_GetPkmData;
//Get Package Info Data
//Install Apps
_clear;
_cout "Type software package file";
_prt "Type Package>";
_var {UserTypeSetup} = _getline;
//Open Package Data
_free {pkginfof};
_if(_file_exist "{PROG_PATH}/{UserTypeSetup}/pkgdata.mna")           |_var {pkginfof} = "{PROG_PATH}/{UserTypeSetup}/pkgdata.mna";
_if(_file_exist "{SYS_NROOT}/NatvcApps/{UserTypeSetup}/pkgdata.mna") |_var {pkginfof} = "{SYS_NROOT}/NatvcApps/{UserTypeSetup}/pkgdata.mna";
_if(_cp("{pkginfof}",'{pkginfof}'))|_goto :BACKMAINCONSOLE;
_sipcfg.open "{pkginfof}";
_var {AppName_PKMF} = _sipcfg AppName;
_var {Setup_PKMF} = _sipcfg Setup;
_var {AppProperties_PKMF} = _sipcfg AppProperties;

_var {AppVersion_PKMF} = _sipcfg AppVersion;

_clear;

_cout "---------------------------------------------";
_cout " App Name :  {AppName_PKMF}";
_cout " Setup Name :  {Setup_PKMF}";
_cout " App Properties :  {AppProperties_PKMF}";
_cout " App Version :   {AppVersion_PKMF}";
_cout "";
_cout " Install Directory :   {pkginfof}";
_cout "---------------------------------------------";
_cout " Modern Natvc Application    Pack info";
_cout "---------------------------------------------";
_cout "Press Enter to back";
_pause;

_goto :BACKMAINCONSOLE;




:Pkm_GetAllApps;

_dir_list ("{temp}/mnalist","{SYS_NROOT}/SystemPackage");
_file_replace "{temp}/mnalist" ("{SYS_NROOT}/SystemPackage/","");

//List All Apps
_clear;
_cout "---------------------------------------------";
_cout "All installed mna apps";
_cout "---------------------------------------------";
_textprint "{temp}/mnalist";
_file_del "{temp}/mnalist";
_cout "---------------------------------------------";

_pause;


_goto :BACKMAINCONSOLE;
$CSTP_FILE_RECORD_MARK_ID_END(/pkm.ca);
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemPackage/mnacore.pkgmanager.mna);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemPackage/natvc_fdl.dev_toolkit.mna);
Calcium_Text_Pack_File  New Format
//START EXTRACT
$CSTP_FILE_RECORD_MARK_ID_START(/apploader.ca);
_$directmode;
_$nolog;

//ok
_cover <"{AppDir}/mainexp.ca">;
_return "FailLoadUserInterface";
$CSTP_FILE_RECORD_MARK_ID_END(/apploader.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/license.txt);
foxaxu_dev_lab
DevLab_Tookit
Copyright FDL 2025

for natvc system
$CSTP_FILE_RECORD_MARK_ID_END(/license.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/mainexp.ca);
_$directmode;
_$nolog;

_clear;

//M
_cout "Welcome to Natvc FDL Version";
_cout "This is DevLab Toolkit";
_cout "more info to visit :  https://devlab.foxaxu.com";
_cout "";
_cout "What do you need help";
_cout "    1.Report Bugs";
_cout "    2.Contact Us";
_cout "    3.Exit";
_cout "";
:ReloadExplorer;
_cout "";
_prt "Please type number >";
_var {dt_getreq} = _getline;
_if(_cp ("{dt_getreq}","1"))|_cout "Open Web site :    https://devlab.foxaxu.com/reportbug";
_if(_cp ("{dt_getreq}","2"))|_cout "Open Web site :    https://www.foxaxu.com/contact";
_if(_cp ("{dt_getreq}","3"))|_return "ok";

_goto :ReloadExplorer;
$CSTP_FILE_RECORD_MARK_ID_END(/mainexp.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/pkgdata.mna);
//SIPCFG Package Data
$AppName=Natvc_FDL Dev Tookit;
$Setup=natvc_fdl.dev_toolkit.mna;
$AppProperties=userapps; // systemapps or userapps

$AppVersion=1002;

//Copyright FoxaXu 2025
//Default Package
$CSTP_FILE_RECORD_MARK_ID_END(/pkgdata.mna);
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemPackage/natvc_fdl.dev_toolkit.mna);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemPackage/natvc_fdl.nexplorer.mna);
Calcium_Text_Pack_File  New Format
//START EXTRACT
$CSTP_FILE_RECORD_MARK_ID_START(/apploader.ca);
_$directmode;
_$nolog;

//ok
_cover <"{AppDir}/nexplorer.ca">;
_return "FailLoadInterface";
$CSTP_FILE_RECORD_MARK_ID_END(/apploader.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/nexplorer.ca);
_$directmode;
_$nolog;

_var {URLBIND} = "{temp}/mainexplorer.html";

_clear;
_cout "Type URL to access";
_prts "URL >";
_var {ACCESS_URL} = _getline;
_if(_cp("{ACCESS_URL}",".exit"))|_return "close";
_goto :NEXPLORER MAIN;



:NEXPLORER MAIN;
_clear;
_cout "N Explorer .   _The Internet Explorer   ({SYSNAME}.{SYS_KERNEL_VID})";
_cout "----------------------------------------------------------------";
_cout "@URL | {ACCESS_URL}";
_cout "----------------------------------------------------------------";

_prts "Loading Pages ...";

_if(_file_exist "{URLBIND}")|_file_del "{URLBIND}";
_url_get ("{ACCESS_URL}","{URLBIND}");

_if(!_file_exist "{URLBIND}")|_goto :FailLoad;

_prts "\r                                              \r";
_textprint "{URLBIND}";

:EndloadPage;
_cout "----------------------------------------------------------------";
_prts "NExplorer URL >";
_var {ACCESS_URL} = _getline;
_if(_cp("{ACCESS_URL}",".exit"))|_return "close";
_goto :NEXPLORER MAIN;  

//Get Main


//ERROR PAGE
:FailLoad;
_cout "   Error Load page";
_cout "   Check your internet or URL is Valid ?";
_cout "";
_cout "";
_cout "";
_goto :EndloadPage;
$CSTP_FILE_RECORD_MARK_ID_END(/nexplorer.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/pkgdata.mna);
//SIPCFG Package Data
$AppName=Natvc Internet Explorer;
$Setup=natvc_fdl.nexplorer.mna;
$AppProperties=userapps; // systemapps or userapps

$AppVersion=1002;

//Copyright FoxaXu 2025
//Default Package
$CSTP_FILE_RECORD_MARK_ID_END(/pkgdata.mna);
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemPackage/natvc_fdl.nexplorer.mna);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemRNU/fdl_labc.ca);
_$directmode;
_$nolog;

_clear;

//M
_cout "Welcome to Natvc FDL Version";
_cout "FoxaXu_Dev_Lab";
_cout "more info to visit :  https://devlab.foxaxu.com";
_cout "";
_cout "Thanks your support";
_pause;
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemRNU/fdl_labc.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemRNU/Hardware_Test.ca);
_$directmode;
_$nolog;

_clear;

//M
_if(!_=>("{CalciumL_FMV}","1891"))|_goto :HWCompilerWarning;
_cout "Your Device support run Natvc_FDL";
_cout "Natvc_FDL Require FMV : 1891    Your FMV :  {CalciumL_FMV}";
_pause;
_return "ok";


:HWCompilerWarning;
_cout "Your Device Not Support Natvc_FDL";
_cout "Update your device";
_cout "Natvc_FDL Require FMV : 1891    Your FMV :  {CalciumL_FMV}";
_pause;
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemRNU/Hardware_Test.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemRNU/isServiceMode.ca);
_$directmode;
_$nolog;

//Detect Service Mode;

_if(_cp("{NSV_SERVICE_MODE}","true"))|_cout "The program is running on service mode";
_if(_cp("{NSV_SERVICE_MODE}","true"))|_return "ok";

_cout "The program is running on user mode";
_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemRNU/isServiceMode.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemRNU/MNA_Package_NotEnable/mna.apptemple.mna);
Calcium_Text_Pack_File  New Format
//START EXTRACT
$CSTP_FILE_RECORD_MARK_ID_START(/apploader.ca);
_$directmode;
_$nolog;

//ok
//_cover <"{AppDir}/YourOwnApps.ca">;
_cout "Example App";
_return "FailLoadUserInterface";


//ExpamleApps
$CSTP_FILE_RECORD_MARK_ID_END(/apploader.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/pkgdata.mna);
//SIPCFG Package Data
$AppName=ModernApp temple;
$Setup=mna.apptemple.mna;
$AppProperties=userapps; // systemapps or userapps

$AppVersion=1001;

//Copyright FoxaXu 2025
//Default Package
$CSTP_FILE_RECORD_MARK_ID_END(/pkgdata.mna);
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemRNU/MNA_Package_NotEnable/mna.apptemple.mna);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemRNU/Services/supershell.nsv);
//Natvc Service Config

//PROGRAM
$Execute={SYS_ROOT}/rootshell.ca;

//RUNAS USER
$UserID=SYSTEM;
$UserPassword=%sysKerneluserPSWD;



//DETECT SERVICE API  {NSV_SERVICE_MODE} return true;
//Natvc Service
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemRNU/Services/supershell.nsv);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemRNU/SystemResourceNotUsed.txt);
this folder is collect system old files
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemRNU/SystemResourceNotUsed.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemUser/LogonUI.txt);
This file is the login verification file for the Natvc system
Do not manually delete this file, as losing this file will cause the system to initialize the login service failure
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemUser/LogonUI.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemUser/userconfig);
//NATVC USER CONFIG
$UserName=SYSTEM;//User ID
$isAdmin=2;//Admin Auther 0-User 1-Admin 2-System User
$AutoRun=@servicemode;
$DisableUser=0; // User is Disabled 0/1
$UserPassword=@nopswd; // UserPassword
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemUser/userconfig);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/SystemUser/useroptban);
//User Ban Operation
$useroptban=false;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/SystemUser/useroptban);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/textread.ca);
_$directmode;
_$nolog;

_var {COV_ARGS} = _getargs;

_cover <"{SYS_ROOT}/textreader.ca"> "{COV_ARGS}";

_cout "Invoke App failed. Use sysfix to repair this system";

_return "ok";
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/textread.ca);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Themes/NtvexpThemes.txt);
//Natvc Explorer Themes

//Copyright FoxaXu

$TitleA=Natvc Liquid;
$TitleB=Welcome to Natvc 15 Liquid OS;
$TitleC=💧 Natvc 15 Liquid | Lightweight • AI-Enhanced • Secure • Fast;

//Part 2
$TitleD=Open Menu type "menu";
$TitleE=Try to type "help" to list command;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Themes/NtvexpThemes.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Natvc/Themes/NtvueThemes.txt);
//Logon Themes

//Copyright FoxaXu

$TitleA=Natvc Liquid;
$TitleB=Welcome to Natvc 15 Liquid OS;
$TitleC=💧 Natvc 15 Liquid | Lightweight • AI-Enhanced • Secure • Fast;
$CSTP_FILE_RECORD_MARK_ID_END(/Natvc/Themes/NtvueThemes.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Program/$PROGRAM_ROOT.txt);
PROGRAM
$CSTP_FILE_RECORD_MARK_ID_END(/Program/$PROGRAM_ROOT.txt);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/admin/userconfig);
//NATVC USER CONFIG
$UserName=Administrator;
$isAdmin=1;
$AutoRun={NATVC_EXPLORER};
$DisableUser=1;
$UserPassword=@nopswd;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/admin/userconfig);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/admin/usermenu);
//USERMENU
//SETTINGS

$MENU_TYPE={SYS_NROOT}/res/natvc-UserMenu.txt;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/admin/usermenu);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/admin/useroptban);
//User Ban Operation
$useroptban=false;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/admin/useroptban);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/default/autorun);
//Auto Run Tasks
$task=;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/default/autorun);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/default/userconfig);
//NATVC USER CONFIG
$UserName=;//User ID
$isAdmin=;//Admin Auther 0-User 1-Admin 2-System User
$AutoRun={NATVC_EXPLORER};
$DisableUser=0; // User is Disabled 0/1
$UserPassword=; // UserPassword
$CSTP_FILE_RECORD_MARK_ID_END(/Users/default/userconfig);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/default/userindex);
//User Index Link
//Config Link File address
$pm={SYS_ROOT}/powermenu.ca;
$aboutsys={SYS_ROOT}/aboutsys.ca;
$devinfo={SYS_ROOT}/devinfo.ca;
$update={SYS_ROOT}/ntvupd.ca;
$filemgr={SYS_ROOT}/filemgr.ca;
$filecstp={SYS_ROOT}/filecstp.ca;
$ntsh={SYS_ROOT}/NativeShell.ca;
$confedit={SYS_ROOT}/confedit.ca;
$usersettings={SYS_ROOT}/usersettings.ca;
$nbfmgr={SYS_ROOT}/nbfmgr.ca;
$textread={SYS_ROOT}/textreader.ca;
$whoami={SYS_ROOT}/whoami.ca;
$diskclean={SYS_ROOT}/diskclean.ca;
$run={SYS_ROOT}/runexec.ca;
$explorer={SYS_ROOT}/explorer.ca;
$devtool=natvc_fdl.dev_toolkit.mna;
$nexp=natvc_fdl.nexplorer.mna;
$softmgr=mnacore.pkgmanager.mna;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/default/userindex);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/default/usermenu);
//USERMENU
//SETTINGS

$MENU_TYPE={SYS_NROOT}/res/natvc-UserMenu.txt;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/default/usermenu);
$CSTP_FILE_RECORD_MARK_ID_START(/Users/default/useroptban);
//User Ban Operation
$useroptban=false;
$CSTP_FILE_RECORD_MARK_ID_END(/Users/default/useroptban);
